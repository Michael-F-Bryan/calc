var searchIndex = {};
searchIndex["aho_corasick"] = {"doc":"An implementation of the Aho-Corasick string search algorithm.","items":[[3,"Match","aho_corasick","Records a match in the search text.",null,null],[12,"pati","","The pattern index.",0,null],[12,"start","","The starting byte offset of the match in the search text.",0,null],[12,"end","","The ending byte offset of the match in the search text.",0,null],[3,"Matches","","An iterator of non-overlapping matches for in-memory text.",null,null],[3,"MatchesOverlapping","","An iterator of overlapping matches for in-memory text.",null,null],[3,"StreamMatches","","An iterator of non-overlapping matches for streaming text.",null,null],[3,"StreamMatchesOverlapping","","An iterator of overlapping matches for streaming text.",null,null],[3,"FullAcAutomaton","","A complete Aho-Corasick automaton.",null,null],[3,"AcAutomaton","","An Aho-Corasick finite automaton.",null,null],[3,"Dense","","State transitions that can be stored either sparsely or densely.",null,null],[3,"Sparse","","State transitions that are always sparse.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"match"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["match"],"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["match"],"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"fullacautomaton"}}],[11,"new","","Build a new expanded Aho-Corasick automaton from an existing Aho-Corasick automaton.",5,{"inputs":[{"name":"acautomaton"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",5,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"get_match","","",5,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[11,"has_match","","",5,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"start_bytes","","",5,null],[11,"patterns","","",5,null],[11,"pattern","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"p"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"StateIdx","","The integer type used for the state index.",null,null],[8,"Automaton","","An abstraction over automatons and their corresponding iterators. The type parameter `P` is the type of the pattern that was used to construct this Automaton.",null,null],[10,"next_state","","Return the next state given the current state and next character.",6,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[10,"has_match","","Return true if and only if the given state and current pattern index indicate a match.",6,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"get_match","","Build a match given the current state, pattern index and input index.",6,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[10,"start_bytes","","Return the set of bytes that have transitions in the root state.",6,null],[10,"patterns","","Returns all of the patterns matched by this automaton.",6,null],[10,"pattern","","Returns the pattern indexed at `i`.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"p"}}],[11,"len","","Return the number of patterns in the automaton.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatchesoverlapping"}}],[8,"Transitions","","An abstraction over state transition strategies.",null,null],[10,"new","","Return a new state at the given depth.",7,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[10,"goto","","Return the next state index given the next character.",7,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"stateidx"}}],[10,"set_goto","","Set the next state index for the character given.",7,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[10,"heap_bytes","","The memory use in bytes (on the heap) of this set of transitions.",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"acautomaton"}}],[11,"new","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"generics":["dense"],"name":"acautomaton"}}],[11,"with_transitions","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"into_full","","Build out the entire automaton into a single matrix.",8,{"inputs":[{"name":"self"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",8,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"get_match","","",8,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[11,"has_match","","",8,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"start_bytes","","",8,null],[11,"patterns","","",8,null],[11,"pattern","","",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"p"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"dense"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",9,{"inputs":[{"name":"u32"}],"output":{"name":"dense"}}],[11,"goto","","",9,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"set_goto","","",9,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[11,"heap_bytes","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"sparse"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",10,{"inputs":[{"name":"u32"}],"output":{"name":"sparse"}}],[11,"goto","","",10,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"set_goto","","",10,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[11,"heap_bytes","","",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_iter","","Create an automaton from an iterator of strings.",8,{"inputs":[{"name":"t"}],"output":{"name":"acautomaton"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Return the number of patterns in the automaton.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatchesoverlapping"}}]],"paths":[[3,"Match"],[3,"Matches"],[3,"StreamMatches"],[3,"MatchesOverlapping"],[3,"StreamMatchesOverlapping"],[3,"FullAcAutomaton"],[8,"Automaton"],[8,"Transitions"],[3,"AcAutomaton"],[3,"Dense"],[3,"Sparse"]]};
searchIndex["backtrace"] = {"doc":"A library for acquiring a backtrace at runtime","items":[[3,"Frame","backtrace","A trait representing one frame of a backtrace, yielded to the `trace` function of this crate.",null,null],[3,"Symbol","","A trait representing the resolution of a symbol in a file.",null,null],[3,"SymbolName","","A wrapper around a symbol name to provide ergonomic accessors to the demangled name, the raw bytes, the raw string, etc.",null,null],[3,"Backtrace","","Representation of an owned and self-contained backtrace.",null,null],[3,"BacktraceFrame","","Captured version of a frame in a backtrace.",null,null],[3,"BacktraceSymbol","","Captured version of a symbol in a backtrace.",null,null],[5,"trace","","Inspects the current call-stack, passing all active frames into the closure provided to calculate a stack trace.",null,{"inputs":[{"name":"f"}],"output":null}],[5,"resolve","","Resolve an address to a symbol, passing the symbol to the specified closure.",null,null],[11,"ip","","Returns the current instruction pointer of this frame.",0,null],[11,"symbol_address","","Returns the starting symbol address of the frame of this function.",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"name","","Returns the name of this function.",1,{"inputs":[{"name":"self"}],"output":{"generics":["symbolname"],"name":"option"}}],[11,"addr","","Returns the starting address of this function.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"filename","","Returns the file name where this function was defined.",1,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"lineno","","Returns the line number for where this symbol is currently executing.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new symbol name from the raw underlying bytes.",2,null],[11,"as_str","","Returns the raw symbol name as a `str` if the symbols is valid utf-8.",2,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"as_bytes","","Returns the raw symbol name as a list of bytes",2,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"backtrace"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"backtraceframe"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"backtracesymbol"}}],[11,"new","","Captures a backtrace at the callsite of this function, returning an owned representation.",3,{"inputs":[],"output":{"name":"backtrace"}}],[11,"new_unresolved","","Similar to `new` except that this does not resolve any symbols, this simply captures the backtrace as a list of addresses.",3,{"inputs":[],"output":{"name":"backtrace"}}],[11,"frames","","Returns the frames from when this backtrace was captured.",3,null],[11,"resolve","","If this backtrace was created from `new_unresolved` then this function will resolve all addresses in the backtrace to their symbolic names.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"from","","",3,{"inputs":[{"generics":["backtraceframe"],"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["backtraceframe"],"name":"vec"}}],[11,"ip","","Same as `Frame::ip`",4,null],[11,"symbol_address","","Same as `Frame::symbol_address`",4,null],[11,"symbols","","Returns the list of symbols that this frame corresponds to.",4,null],[11,"name","","Same as `Symbol::name`",5,{"inputs":[{"name":"self"}],"output":{"generics":["symbolname"],"name":"option"}}],[11,"addr","","Same as `Symbol::addr`",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"filename","","Same as `Symbol::filename`",5,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"lineno","","Same as `Symbol::lineno`",5,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"backtrace"}}]],"paths":[[3,"Frame"],[3,"Symbol"],[3,"SymbolName"],[3,"Backtrace"],[3,"BacktraceFrame"],[3,"BacktraceSymbol"]]};
searchIndex["backtrace_sys"] = {"doc":"","items":[[4,"backtrace_state","backtrace_sys","",null,null],[5,"backtrace_create_state","","",null,null],[5,"backtrace_syminfo","","",null,null],[5,"backtrace_pcinfo","","",null,null],[6,"backtrace_syminfo_callback","","",null,null],[6,"backtrace_full_callback","","",null,null],[6,"backtrace_error_callback","","",null,null]],"paths":[]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator.","items":[[14,"bitflags","bitflags","The `bitflags!` macro generates a `struct` that holds a set of C-style bitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
searchIndex["calc"] = {"doc":"A JIT compiler written in Rust, using LLVM and [inkwell].","items":[[0,"syntax","calc","The language's parser and AST representation.",null,null],[3,"BinaryOp","calc::syntax","A binary operation.",null,null],[12,"op","","What kind of operation is this?",0,null],[12,"left","","The left operand.",0,null],[12,"right","","The right operand.",0,null],[3,"FunctionCall","","A function call.",null,null],[12,"name","","The function being called.",1,null],[12,"arguments","","The list of arguments passed to the function call.",1,null],[4,"Expr","","A `calc` expression.",null,null],[13,"FunctionCall","","A `FunctionCall` node.",2,null],[13,"Atom","","An `Atom` node.",2,null],[13,"BinaryOp","","A `BinaryOp` node.",2,null],[4,"Op","","The kind of operation in a `BinaryOp`.",null,null],[13,"Add","","Addition.",3,null],[13,"Divide","","Division.",3,null],[13,"Multiply","","Multiplication.",3,null],[13,"Subtract","","Subtraction.",3,null],[4,"Atom","","The most basic construct in the language.",null,null],[13,"Number","","A floating point literal.",4,null],[13,"Ident","","An identifier (e.g. `foo`).",4,null],[5,"parse","","Parse a string into its AST representation.",null,{"inputs":[{"name":"str"}],"output":{"generics":["expr","error"],"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"expr"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"from","","",2,{"inputs":[{"name":"atom"}],"output":{"name":"expr"}}],[11,"from","","",2,{"inputs":[{"name":"binaryop"}],"output":{"name":"expr"}}],[11,"from","","",2,{"inputs":[{"name":"functioncall"}],"output":{"name":"expr"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"binaryop"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"binaryop"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"binaryop"}],"output":{"name":"bool"}}],[11,"new","","Create a new `BinaryOp`.",0,{"inputs":[{"name":"expr"},{"name":"expr"},{"name":"op"}],"output":{"name":"binaryop"}}],[11,"add","","Create an addition operation.",0,{"inputs":[{"name":"expr"},{"name":"expr"}],"output":{"name":"binaryop"}}],[11,"sub","","Create a subtract operation.",0,{"inputs":[{"name":"expr"},{"name":"expr"}],"output":{"name":"binaryop"}}],[11,"mult","","Create a multiplication operation.",0,{"inputs":[{"name":"expr"},{"name":"expr"}],"output":{"name":"binaryop"}}],[11,"div","","Create a division operation.",0,{"inputs":[{"name":"expr"},{"name":"expr"}],"output":{"name":"binaryop"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"op"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"atom"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"atom"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"atom"}],"output":{"name":"bool"}}],[11,"from","","",4,{"inputs":[{"name":"string"}],"output":{"name":"atom"}}],[11,"from","","",4,{"inputs":[{"name":"str"}],"output":{"name":"atom"}}],[11,"from","","",4,{"inputs":[{"name":"f64"}],"output":{"name":"atom"}}],[11,"from","","",4,{"inputs":[{"name":"i32"}],"output":{"name":"atom"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"functioncall"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"functioncall"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"functioncall"}],"output":{"name":"bool"}}],[11,"new","","Create a new `FunctionCall`.",1,{"inputs":[{"name":"s"},{"name":"a"}],"output":{"name":"functioncall"}}],[0,"visit","","Syntax tree traversal.",null,null],[5,"walk_expr","calc::syntax::visit","Continue to recursively walk an expression, calling the visitor's `visit_atom()`, `visit_function_call()`, or `visit_binary_op()` method depending on what type of `Expr` it is.",null,{"inputs":[{"name":"v"},{"name":"expr"}],"output":null}],[5,"walk_binary_op","","Recursively visit a binary operation's left and right operands.",null,{"inputs":[{"name":"v"},{"name":"binaryop"}],"output":null}],[5,"walk_function_call","","Recursively visit each argument in the function call.",null,{"inputs":[{"name":"v"},{"name":"functioncall"}],"output":null}],[8,"Visitor","","A utility trait for traversing an AST.",null,null],[11,"visit_expr","","Visit an `Expr` node.",5,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"visit_binary_op","","Visit a binary operation.",5,{"inputs":[{"name":"self"},{"name":"binaryop"}],"output":null}],[11,"visit_function_call","","Visit a function call.",5,{"inputs":[{"name":"self"},{"name":"functioncall"}],"output":null}],[11,"visit_atom","","Visit an `Atom`.",5,{"inputs":[{"name":"self"},{"name":"atom"}],"output":null}],[0,"trans","calc","Generate LLVM IR for a valid `calc` expression.",null,null],[3,"Compiler","calc::trans","",null,null],[5,"translate","","",null,{"inputs":[{"name":"expr"},{"name":"context"},{"name":"logger"}],"output":{"generics":["module","error"],"name":"result"}}],[11,"new","","",6,{"inputs":[{"name":"context"}],"output":{"name":"compiler"}}],[11,"new_with_logger","","",6,{"inputs":[{"name":"context"},{"name":"logger"}],"output":{"name":"compiler"}}],[11,"compile","","Compile an AST tree to a LLVM `Module`.",6,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"module"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"BinaryOp"],[3,"FunctionCall"],[4,"Expr"],[4,"Op"],[4,"Atom"],[8,"Visitor"],[3,"Compiler"]]};
searchIndex["cfg_if"] = {"doc":"A macro for defining #[cfg] if-else statements.","items":[[14,"cfg_if","cfg_if","",null,null]],"paths":[]};
searchIndex["either"] = {"doc":"The enum [`Either`] with variants `Left` and `Right` is a general purpose sum type with two cases.","items":[[4,"Either","either","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",null,null],[13,"Left","","A value of type `L`.",0,null],[13,"Right","","A value of type `R`.",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_left","","Return true if the value is the `Left` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_right","","Return true if the value is the `Right` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",0,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",0,{"inputs":[{"name":"self"},{"name":"ctx"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"into_iter","","Convert the inner value to an iterator.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",0,null],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",0,null],[11,"into_inner","","Extract the value of an either over two equivalent types.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from","","",0,{"inputs":[{"name":"result"}],"output":{"name":"self"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"fold","","",0,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"count","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"collect","","",0,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"all","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"read","","",0,null],[11,"read_to_end","","",0,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["usize"],"name":"result"}}],[11,"fill_buf","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"write","","",0,null],[11,"flush","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"as_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"try_left","","Macro for unwrapping the left side of an `Either`, which fails early with the opposite side. Can only be used in functions that return `Either` because of the early return of `Right` that it provides.",null,null],[14,"try_right","","Dual to `try_left!`, see its documentation for more information.",null,null]],"paths":[[4,"Either"]]};
searchIndex["enum_methods"] = {"doc":"enum-methods","items":[],"paths":[]};
searchIndex["failure"] = {"doc":"An experimental new error-handling library.","items":[[3,"Backtrace","failure","A `Backtrace`.",null,null],[3,"Compat","","A compatibility wrapper around an error type from this crate.",null,null],[3,"Context","","An error with context around it.",null,null],[3,"SyncFailure","","Wrapper for `std` errors to make them `Sync`.",null,null],[3,"Error","","The `Error` type, which can contain any failure.",null,null],[3,"Causes","","A iterator over the causes of a `Fail`",null,null],[5,"err_msg","","Constructs a `Fail` type from a string.",null,{"inputs":[{"name":"d"}],"output":{"name":"error"}}],[11,"new","","Constructs a new backtrace. This will only create a real backtrace if the crate is compiled in std mode and the `RUST_BACKTRACE` environmental variable is activated.",0,{"inputs":[],"output":{"name":"backtrace"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"backtrace"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"compat"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"compat"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"compat"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"compat"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_inner","","Unwraps this into the inner error.",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","","Creates a new context without an underlying error message.",2,{"inputs":[{"name":"d"}],"output":{"name":"context"}}],[11,"get_context","","Returns a reference to the context provided with this error.",2,{"inputs":[{"name":"self"}],"output":{"name":"d"}}],[11,"cause","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",2,{"inputs":[{"name":"d"}],"output":{"name":"context"}}],[11,"new","","Wraps a non-`Sync` `Error` in order to make it implement `Fail`.",3,{"inputs":[{"name":"e"}],"output":{"name":"self"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",4,{"inputs":[{"name":"f"}],"output":{"name":"error"}}],[11,"cause","","Returns a reference to the underlying cause of this `Error`. Unlike the method on `Fail`, this does not return an `Option`. The `Error` type always has an underlying failure.",4,{"inputs":[{"name":"self"}],"output":{"name":"fail"}}],[11,"backtrace","","Gets a reference to the `Backtrace` for this `Error`.",4,{"inputs":[{"name":"self"}],"output":{"name":"backtrace"}}],[11,"context","","Provides context for this `Error`.",4,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"context"}}],[11,"compat","","Wraps `Error` in a compatibility type.",4,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"compat"}}],[11,"downcast","","Attempts to downcast this `Error` to a particular `Fail` type.",4,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"root_cause","","Returns the \"root cause\" of this error - the last value in the cause chain which does not return an underlying `cause`.",4,{"inputs":[{"name":"self"}],"output":{"name":"fail"}}],[11,"downcast_ref","","Attempts to downcast this `Error` to a particular `Fail` type by reference.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Attempts to downcast this `Error` to a particular `Fail` type by mutable reference.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"causes","","Returns a iterator over the causes of the `Error`, beginning with the failure returned by the `cause` method and ending with the failure returned by `root_cause`.",4,{"inputs":[{"name":"self"}],"output":{"name":"causes"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"ResultExt","","Extension methods for `Result`.",null,null],[10,"compat","","Wraps the error in `Compat` to make it compatible with older error handling APIs that expect `std::error::Error`.",5,{"inputs":[{"name":"self"}],"output":{"generics":["compat"],"name":"result"}}],[10,"context","","Wraps the error type in a context type.",5,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"generics":["context"],"name":"result"}}],[10,"with_context","","Wraps the error type in a context type generated by looking at the error value.",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["context"],"name":"result"}}],[8,"Fail","","The `Fail` trait.",null,null],[11,"cause","","Returns a reference to the underlying cause of this failure, if it is an error that wraps other errors.",6,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","Returns a reference to the `Backtrace` carried by this failure, if it carries one.",6,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"context","","Provides context for this failure.",6,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"context"}}],[11,"compat","","Wraps this failure in a compatibility wrapper that implements `std::error::Error`.",6,{"inputs":[{"name":"self"}],"output":{"name":"compat"}}],[11,"causes","","Returns a iterator over the causes of this `Fail` with itself as the first item and the `root_cause` as the final item.",6,{"inputs":[{"name":"self"}],"output":{"name":"causes"}}],[11,"root_cause","","Returns the \"root cause\" of this `Fail` - the last value in the cause chain which does not return an underlying `cause`.",6,{"inputs":[{"name":"self"}],"output":{"name":"fail"}}],[11,"downcast_ref","","Attempts to downcast this failure to a concrete type by reference.",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Attempts to downcast this failure to a concrete type by mutable reference.",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"root_cause","","Returns the \"root cause\" of this `Fail` - the last value in the cause chain which does not return an underlying `cause`.",6,{"inputs":[{"name":"self"}],"output":{"name":"fail"}}],[11,"causes","","Returns a iterator over the causes of this `Fail` with itself as the first item and the `root_cause` as the final item.",6,{"inputs":[{"name":"self"}],"output":{"name":"causes"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[14,"bail","","Exits a function early with an `Error`.",null,null],[14,"ensure","","Exits a function early with an `Error` if the condition is not satisfied.",null,null],[14,"format_err","","Constructs an `Error` using the standard string interpolation syntax.",null,null]],"paths":[[3,"Backtrace"],[3,"Compat"],[3,"Context"],[3,"SyncFailure"],[3,"Error"],[8,"ResultExt"],[8,"Fail"],[3,"Causes"]]};
searchIndex["failure_derive"] = {"doc":"","items":[[5,"Fail","failure_derive","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[]};
searchIndex["inkwell"] = {"doc":"Inkwell documentation is a work in progress.","items":[[4,"AddressSpace","inkwell","Defines the address space in which a global will be inserted.",null,null],[13,"Generic","","",0,null],[13,"Global","","",0,null],[13,"Shared","","",0,null],[13,"Const","","",0,null],[13,"Local","","",0,null],[4,"IntPredicate","","",null,null],[13,"EQ","","",1,null],[13,"NE","","",1,null],[13,"UGT","","",1,null],[13,"UGE","","",1,null],[13,"ULT","","",1,null],[13,"ULE","","",1,null],[13,"SGT","","",1,null],[13,"SGE","","",1,null],[13,"SLT","","",1,null],[13,"SLE","","",1,null],[4,"FloatPredicate","","Defines how to compare a `left` and `right` float value.",null,null],[13,"OEQ","","Returns true if `left` == `right` and neither are NaN",2,null],[13,"OGE","","Returns true if `left` >= `right` and neither are NaN",2,null],[13,"OGT","","Returns true if `left` > `right` and neither are NaN",2,null],[13,"OLE","","Returns true if `left` <= `right` and neither are NaN",2,null],[13,"OLT","","Returns true if `left` < `right` and neither are NaN",2,null],[13,"ONE","","Returns true if `left` != `right` and neither are NaN",2,null],[13,"ORD","","Returns true if neither value is NaN",2,null],[13,"PredicateFalse","","Always returns false",2,null],[13,"PredicateTrue","","Always returns true",2,null],[13,"UEQ","","Returns true if `left` == `right` or either is NaN",2,null],[13,"UGE","","Returns true if `left` >= `right` or either is NaN",2,null],[13,"UGT","","Returns true if `left` > `right` or either is NaN",2,null],[13,"ULE","","Returns true if `left` <= `right` or either is NaN",2,null],[13,"ULT","","Returns true if `left` < `right` or either is NaN",2,null],[13,"UNE","","Returns true if `left` != `right` or either is NaN",2,null],[13,"UNO","","Returns true if either value is NaN",2,null],[4,"OptimizationLevel","","Defines the optimization level used to compile a `Module`.",null,null],[13,"None","","",3,null],[13,"Less","","",3,null],[13,"Default","","",3,null],[13,"Aggressive","","",3,null],[4,"GlobalVisibility","","",null,null],[13,"Default","","",4,null],[13,"Hidden","","",4,null],[13,"Protected","","",4,null],[4,"ThreadLocalMode","","",null,null],[13,"GeneralDynamicTLSModel","","",5,null],[13,"LocalDynamicTLSModel","","",5,null],[13,"InitialExecTLSModel","","",5,null],[13,"LocalExecTLSModel","","",5,null],[4,"DLLStorageClass","","",null,null],[13,"Default","","",6,null],[13,"Import","","",6,null],[13,"Export","","",6,null],[5,"enable_llvm_pretty_stack_trace","","",null,{"inputs":[],"output":null}],[5,"is_multithreaded","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_library_permanently","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"shutdown_llvm","","",null,{"inputs":[],"output":null}],[5,"reset_fatal_error_handler","","Resets LLVM's fatal error handler back to the default",null,{"inputs":[],"output":null}],[0,"basic_block","","A `BasicBlock` is a container of instructions.",null,null],[3,"BasicBlock","inkwell::basic_block","A `BasicBlock` is a container of instructions.",null,null],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"basicblock"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"basicblock"}],"output":{"name":"bool"}}],[11,"get_parent","","Obtains the `FunctionValue` that this `BasicBlock` belongs to, if any.",7,{"inputs":[{"name":"self"}],"output":{"generics":["functionvalue"],"name":"option"}}],[11,"get_previous_basic_block","","Gets the `BasicBlock` preceeding the current one, in its own scope, if any.",7,{"inputs":[{"name":"self"}],"output":{"generics":["basicblock"],"name":"option"}}],[11,"get_next_basic_block","","Gets the `BasicBlock` succeeding the current one, in its own scope, if any.",7,{"inputs":[{"name":"self"}],"output":{"generics":["basicblock"],"name":"option"}}],[11,"move_before","","Prepends one `BasicBlock` before another.",7,{"inputs":[{"name":"self"},{"name":"basicblock"}],"output":null}],[11,"move_after","","Appends one `BasicBlock` after another.",7,{"inputs":[{"name":"self"},{"name":"basicblock"}],"output":null}],[11,"prepend_basic_block","","Prepends a new `BasicBlock` before this one.",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"basicblock"}}],[11,"get_first_instruction","","Obtains the first `InstructionValue` in this `BasicBlock`, if any.",7,{"inputs":[{"name":"self"}],"output":{"generics":["instructionvalue"],"name":"option"}}],[11,"get_last_instruction","","Obtains the last `InstructionValue` in this `BasicBlock`, if any. A `BasicBlock` must have a last instruction to be valid.",7,{"inputs":[{"name":"self"}],"output":{"generics":["instructionvalue"],"name":"option"}}],[11,"get_terminator","","Obtains the terminating `InstructionValue` in this `BasicBlock`, if any. A `BasicBlock` must have a terminating instruction to be valid.",7,{"inputs":[{"name":"self"}],"output":{"generics":["instructionvalue"],"name":"option"}}],[11,"remove_from_function","","Removes this `BasicBlock` from its parent `FunctionValue`. Does nothing if it has no parent.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"delete","","Removes this `BasicBlock` completely from memory. This is unsafe because you could easily have other references to the same `BasicBlock`.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"get_context","","Obtains the `ContextRef` this `BasicBlock` belongs to.",7,{"inputs":[{"name":"self"}],"output":{"name":"contextref"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"builder","inkwell","",null,null],[3,"Builder","inkwell::builder","",null,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"create","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"build_return","","",8,{"inputs":[{"name":"self"},{"generics":["basicvalue"],"name":"option"}],"output":{"name":"instructionvalue"}}],[11,"build_aggregate_return","","",8,null],[11,"build_call","","",8,null],[11,"build_gep","","",8,null],[11,"build_in_bounds_gep","","",8,null],[11,"build_struct_gep","","",8,{"inputs":[{"name":"self"},{"name":"pointervalue"},{"name":"u32"},{"name":"str"}],"output":{"name":"pointervalue"}}],[11,"build_ptr_diff","","",8,{"inputs":[{"name":"self"},{"name":"pointervalue"},{"name":"pointervalue"},{"name":"str"}],"output":{"name":"intvalue"}}],[11,"build_phi","","",8,{"inputs":[{"name":"self"},{"name":"t"},{"name":"str"}],"output":{"name":"phivalue"}}],[11,"build_store","","",8,{"inputs":[{"name":"self"},{"name":"pointervalue"},{"name":"v"}],"output":{"name":"instructionvalue"}}],[11,"build_load","","",8,{"inputs":[{"name":"self"},{"name":"pointervalue"},{"name":"str"}],"output":{"name":"basicvalueenum"}}],[11,"build_alloca","","",8,{"inputs":[{"name":"self"},{"name":"t"},{"name":"str"}],"output":{"name":"pointervalue"}}],[11,"build_array_alloca","","",8,{"inputs":[{"name":"self"},{"name":"t"},{"name":"intvalue"},{"name":"str"}],"output":{"name":"pointervalue"}}],[11,"build_malloc","","",8,{"inputs":[{"name":"self"},{"name":"t"},{"name":"str"}],"output":{"name":"pointervalue"}}],[11,"build_array_malloc","","",8,{"inputs":[{"name":"self"},{"name":"t"},{"name":"intvalue"},{"name":"str"}],"output":{"name":"pointervalue"}}],[11,"build_free","","",8,{"inputs":[{"name":"self"},{"name":"pointervalue"}],"output":{"name":"instructionvalue"}}],[11,"insert_instruction","","",8,{"inputs":[{"name":"self"},{"name":"instructionvalue"},{"generics":["str"],"name":"option"}],"output":null}],[11,"get_insert_block","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["basicblock"],"name":"option"}}],[11,"build_int_unsigned_div","","",8,{"inputs":[{"name":"self"},{"name":"intvalue"},{"name":"intvalue"},{"name":"str"}],"output":{"name":"intvalue"}}],[11,"build_int_signed_div","","",8,{"inputs":[{"name":"self"},{"name":"intvalue"},{"name":"intvalue"},{"name":"str"}],"output":{"name":"intvalue"}}],[11,"build_int_exact_signed_div","","",8,{"inputs":[{"name":"self"},{"name":"intvalue"},{"name":"intvalue"},{"name":"str"}],"output":{"name":"intvalue"}}],[11,"build_int_unsigned_rem","","",8,{"inputs":[{"name":"self"},{"name":"intvalue"},{"name":"intvalue"},{"name":"str"}],"output":{"name":"intvalue"}}],[11,"build_int_signed_rem","","",8,{"inputs":[{"name":"self"},{"name":"intvalue"},{"name":"intvalue"},{"name":"str"}],"output":{"name":"intvalue"}}],[11,"build_int_s_extend","","",8,{"inputs":[{"name":"self"},{"name":"intvalue"},{"name":"inttype"},{"name":"str"}],"output":{"name":"intvalue"}}],[11,"build_int_s_extend_or_bit_cast","","",8,{"inputs":[{"name":"self"},{"name":"intvalue"},{"name":"inttype"},{"name":"str"}],"output":{"name":"intvalue"}}],[11,"build_int_z_extend","","",8,{"inputs":[{"name":"self"},{"name":"intvalue"},{"name":"inttype"},{"name":"str"}],"output":{"name":"intvalue"}}],[11,"build_int_z_extend_or_bit_cast","","",8,{"inputs":[{"name":"self"},{"name":"intvalue"},{"name":"inttype"},{"name":"str"}],"output":{"name":"intvalue"}}],[11,"build_int_truncate","","",8,{"inputs":[{"name":"self"},{"name":"intvalue"},{"name":"inttype"},{"name":"str"}],"output":{"name":"intvalue"}}],[11,"build_int_truncate_or_bit_cast","","",8,{"inputs":[{"name":"self"},{"name":"intvalue"},{"name":"inttype"},{"name":"str"}],"output":{"name":"intvalue"}}],[11,"build_float_rem","","",8,{"inputs":[{"name":"self"},{"name":"floatvalue"},{"name":"floatvalue"},{"name":"str"}],"output":{"name":"floatvalue"}}],[11,"build_float_to_unsigned_int","","",8,{"inputs":[{"name":"self"},{"name":"floatvalue"},{"name":"inttype"},{"name":"str"}],"output":{"name":"intvalue"}}],[11,"build_float_to_signed_int","","",8,{"inputs":[{"name":"self"},{"name":"floatvalue"},{"name":"inttype"},{"name":"str"}],"output":{"name":"intvalue"}}],[11,"build_unsigned_int_to_float","","",8,{"inputs":[{"name":"self"},{"name":"intvalue"},{"name":"floattype"},{"name":"str"}],"output":{"name":"floatvalue"}}],[11,"build_signed_int_to_float","","",8,{"inputs":[{"name":"self"},{"name":"floatvalue"},{"name":"floattype"},{"name":"str"}],"output":{"name":"floatvalue"}}],[11,"build_float_trunc","","",8,{"inputs":[{"name":"self"},{"name":"floatvalue"},{"name":"floattype"},{"name":"str"}],"output":{"name":"floatvalue"}}],[11,"build_float_ext","","",8,{"inputs":[{"name":"self"},{"name":"floatvalue"},{"name":"floattype"},{"name":"str"}],"output":{"name":"floatvalue"}}],[11,"build_float_cast","","",8,{"inputs":[{"name":"self"},{"name":"floatvalue"},{"name":"floattype"},{"name":"str"}],"output":{"name":"floatvalue"}}],[11,"build_int_cast","","",8,{"inputs":[{"name":"self"},{"name":"intvalue"},{"name":"inttype"},{"name":"str"}],"output":{"name":"intvalue"}}],[11,"build_float_div","","",8,{"inputs":[{"name":"self"},{"name":"floatvalue"},{"name":"floatvalue"},{"name":"str"}],"output":{"name":"floatvalue"}}],[11,"build_int_add","","",8,{"inputs":[{"name":"self"},{"name":"intvalue"},{"name":"intvalue"},{"name":"str"}],"output":{"name":"intvalue"}}],[11,"build_int_nsw_add","","",8,{"inputs":[{"name":"self"},{"name":"intvalue"},{"name":"intvalue"},{"name":"str"}],"output":{"name":"intvalue"}}],[11,"build_int_nuw_add","","",8,{"inputs":[{"name":"self"},{"name":"intvalue"},{"name":"intvalue"},{"name":"str"}],"output":{"name":"intvalue"}}],[11,"build_float_add","","",8,{"inputs":[{"name":"self"},{"name":"floatvalue"},{"name":"floatvalue"},{"name":"str"}],"output":{"name":"floatvalue"}}],[11,"build_xor","","",8,{"inputs":[{"name":"self"},{"name":"intvalue"},{"name":"intvalue"},{"name":"str"}],"output":{"name":"intvalue"}}],[11,"build_and","","",8,{"inputs":[{"name":"self"},{"name":"intvalue"},{"name":"intvalue"},{"name":"str"}],"output":{"name":"intvalue"}}],[11,"build_or","","",8,{"inputs":[{"name":"self"},{"name":"intvalue"},{"name":"intvalue"},{"name":"str"}],"output":{"name":"intvalue"}}],[11,"build_left_shift","","Builds an `IntValue` containing the result of a logical left shift instruction.",8,{"inputs":[{"name":"self"},{"name":"intvalue"},{"name":"intvalue"},{"name":"str"}],"output":{"name":"intvalue"}}],[11,"build_right_shift","","Builds an `IntValue` containing the result of a right shift instruction.",8,{"inputs":[{"name":"self"},{"name":"intvalue"},{"name":"intvalue"},{"name":"bool"},{"name":"str"}],"output":{"name":"intvalue"}}],[11,"build_int_sub","","",8,{"inputs":[{"name":"self"},{"name":"intvalue"},{"name":"intvalue"},{"name":"str"}],"output":{"name":"intvalue"}}],[11,"build_int_nsw_sub","","",8,{"inputs":[{"name":"self"},{"name":"intvalue"},{"name":"intvalue"},{"name":"str"}],"output":{"name":"intvalue"}}],[11,"build_int_nuw_sub","","",8,{"inputs":[{"name":"self"},{"name":"intvalue"},{"name":"intvalue"},{"name":"str"}],"output":{"name":"intvalue"}}],[11,"build_float_sub","","",8,{"inputs":[{"name":"self"},{"name":"floatvalue"},{"name":"floatvalue"},{"name":"str"}],"output":{"name":"floatvalue"}}],[11,"build_int_mul","","",8,{"inputs":[{"name":"self"},{"name":"intvalue"},{"name":"intvalue"},{"name":"str"}],"output":{"name":"intvalue"}}],[11,"build_int_nsw_mul","","",8,{"inputs":[{"name":"self"},{"name":"intvalue"},{"name":"intvalue"},{"name":"str"}],"output":{"name":"intvalue"}}],[11,"build_int_nuw_mul","","",8,{"inputs":[{"name":"self"},{"name":"intvalue"},{"name":"intvalue"},{"name":"str"}],"output":{"name":"intvalue"}}],[11,"build_float_mul","","",8,{"inputs":[{"name":"self"},{"name":"floatvalue"},{"name":"floatvalue"},{"name":"str"}],"output":{"name":"floatvalue"}}],[11,"build_cast","","",8,{"inputs":[{"name":"self"},{"name":"instructionopcode"},{"name":"basicvalue"},{"name":"basictype"},{"name":"str"}],"output":{"name":"basicvalueenum"}}],[11,"build_pointer_cast","","",8,{"inputs":[{"name":"self"},{"name":"pointervalue"},{"name":"pointertype"},{"name":"str"}],"output":{"name":"pointervalue"}}],[11,"build_int_compare","","",8,{"inputs":[{"name":"self"},{"name":"intpredicate"},{"name":"intvalue"},{"name":"intvalue"},{"name":"str"}],"output":{"name":"intvalue"}}],[11,"build_float_compare","","",8,{"inputs":[{"name":"self"},{"name":"floatpredicate"},{"name":"floatvalue"},{"name":"floatvalue"},{"name":"str"}],"output":{"name":"intvalue"}}],[11,"build_unconditional_branch","","",8,{"inputs":[{"name":"self"},{"name":"basicblock"}],"output":{"name":"instructionvalue"}}],[11,"build_conditional_branch","","",8,{"inputs":[{"name":"self"},{"name":"intvalue"},{"name":"basicblock"},{"name":"basicblock"}],"output":{"name":"instructionvalue"}}],[11,"build_int_neg","","",8,{"inputs":[{"name":"self"},{"name":"intvalue"},{"name":"str"}],"output":{"name":"intvalue"}}],[11,"build_int_nsw_neg","","",8,{"inputs":[{"name":"self"},{"name":"intvalue"},{"name":"str"}],"output":{"name":"intvalue"}}],[11,"build_int_nuw_neg","","",8,{"inputs":[{"name":"self"},{"name":"intvalue"},{"name":"str"}],"output":{"name":"intvalue"}}],[11,"build_float_neg","","",8,{"inputs":[{"name":"self"},{"name":"floatvalue"},{"name":"str"}],"output":{"name":"floatvalue"}}],[11,"build_not","","",8,{"inputs":[{"name":"self"},{"name":"intvalue"},{"name":"str"}],"output":{"name":"intvalue"}}],[11,"position_at","","",8,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"instructionvalue"}],"output":null}],[11,"position_before","","",8,{"inputs":[{"name":"self"},{"name":"instructionvalue"}],"output":null}],[11,"position_at_end","","",8,{"inputs":[{"name":"self"},{"name":"basicblock"}],"output":null}],[11,"build_extract_value","","",8,{"inputs":[{"name":"self"},{"name":"aggregatevalue"},{"name":"u32"},{"name":"str"}],"output":{"name":"basicvalueenum"}}],[11,"build_insert_value","","",8,{"inputs":[{"name":"self"},{"name":"basicvalue"},{"name":"pointervalue"},{"name":"u32"},{"name":"str"}],"output":{"name":"instructionvalue"}}],[11,"build_extract_element","","",8,{"inputs":[{"name":"self"},{"name":"vectorvalue"},{"name":"intvalue"},{"name":"str"}],"output":{"name":"basicvalueenum"}}],[11,"build_insert_element","","",8,{"inputs":[{"name":"self"},{"name":"vectorvalue"},{"name":"basicvalue"},{"name":"intvalue"},{"name":"str"}],"output":{"name":"basicvalueenum"}}],[11,"build_unreachable","","",8,{"inputs":[{"name":"self"}],"output":{"name":"instructionvalue"}}],[11,"build_fence","","",8,{"inputs":[{"name":"self"},{"name":"llvmatomicordering"},{"name":"i32"},{"name":"str"}],"output":{"name":"instructionvalue"}}],[11,"build_is_null","","",8,{"inputs":[{"name":"self"},{"name":"pointervalue"},{"name":"str"}],"output":{"name":"intvalue"}}],[11,"build_is_not_null","","",8,{"inputs":[{"name":"self"},{"name":"pointervalue"},{"name":"str"}],"output":{"name":"intvalue"}}],[11,"build_int_to_ptr","","",8,{"inputs":[{"name":"self"},{"name":"intvalue"},{"name":"pointertype"},{"name":"str"}],"output":{"name":"pointervalue"}}],[11,"build_ptr_to_int","","",8,{"inputs":[{"name":"self"},{"name":"pointervalue"},{"name":"inttype"},{"name":"str"}],"output":{"name":"intvalue"}}],[11,"clear_insertion_position","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"build_switch","","",8,null],[11,"build_global_string","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"globalvalue"}}],[11,"build_global_string_ptr","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"globalvalue"}}],[11,"drop","","",8,{"inputs":[{"name":"self"}],"output":null}],[0,"context","inkwell","",null,null],[3,"Context","inkwell::context","",null,null],[3,"ContextRef","","",null,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"bool"}}],[11,"create","","Creates a new `Context`.",9,{"inputs":[],"output":{"name":"self"}}],[11,"get_global","","Creates a `ContextRef` which references the global context singleton.",9,{"inputs":[],"output":{"name":"contextref"}}],[11,"create_builder","","Creates a new `Builder` for a `Context`.",9,{"inputs":[{"name":"self"}],"output":{"name":"builder"}}],[11,"create_module","","Creates a new `Module` for a `Context`.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"module"}}],[11,"create_module_from_ir","","",9,{"inputs":[{"name":"self"},{"name":"memorybuffer"}],"output":{"generics":["module","string"],"name":"result"}}],[11,"void_type","","",9,{"inputs":[{"name":"self"}],"output":{"name":"voidtype"}}],[11,"bool_type","","",9,{"inputs":[{"name":"self"}],"output":{"name":"inttype"}}],[11,"i8_type","","",9,{"inputs":[{"name":"self"}],"output":{"name":"inttype"}}],[11,"i16_type","","",9,{"inputs":[{"name":"self"}],"output":{"name":"inttype"}}],[11,"i32_type","","",9,{"inputs":[{"name":"self"}],"output":{"name":"inttype"}}],[11,"i64_type","","",9,{"inputs":[{"name":"self"}],"output":{"name":"inttype"}}],[11,"i128_type","","",9,{"inputs":[{"name":"self"}],"output":{"name":"inttype"}}],[11,"custom_width_int_type","","",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"inttype"}}],[11,"f16_type","","",9,{"inputs":[{"name":"self"}],"output":{"name":"floattype"}}],[11,"f32_type","","",9,{"inputs":[{"name":"self"}],"output":{"name":"floattype"}}],[11,"f64_type","","",9,{"inputs":[{"name":"self"}],"output":{"name":"floattype"}}],[11,"f128_type","","",9,{"inputs":[{"name":"self"}],"output":{"name":"floattype"}}],[11,"ppc_f128_type","","",9,{"inputs":[{"name":"self"}],"output":{"name":"floattype"}}],[11,"struct_type","","",9,null],[11,"opaque_struct_type","","",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"structtype"}}],[11,"append_basic_block","","",9,{"inputs":[{"name":"self"},{"name":"functionvalue"},{"name":"str"}],"output":{"name":"basicblock"}}],[11,"insert_basic_block_after","","",9,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"str"}],"output":{"name":"basicblock"}}],[11,"prepend_basic_block","","",9,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"str"}],"output":{"name":"basicblock"}}],[11,"const_struct","","",9,null],[11,"metadata_node","","",9,null],[11,"metadata_string","","",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"metadatavalue"}}],[11,"get_kind_id","","",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"u32"}}],[11,"drop","","",9,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"contextref"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"contextref"}],"output":{"name":"bool"}}],[11,"deref","","",10,null],[11,"drop","","",10,{"inputs":[{"name":"self"}],"output":null}],[0,"data_layout","inkwell","",null,null],[3,"DataLayout","inkwell::data_layout","",null,null],[11,"as_str","","",11,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"datalayout"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",11,{"inputs":[{"name":"self"}],"output":null}],[0,"execution_engine","inkwell","",null,null],[3,"ExecutionEngine","inkwell::execution_engine","A reference-counted wrapper around LLVM's execution engine.",null,null],[3,"Symbol","","A wrapper around a function pointer which ensures the symbol being pointed to doesn't accidentally outlive its execution engine.",null,null],[4,"FunctionLookupError","","",null,null],[13,"JITNotEnabled","","",12,null],[13,"FunctionNotFound","","",12,null],[8,"UnsafeFunctionPointer","","Marker trait representing an unsafe function pointer (`unsafe extern \"C\" fn(A, B, ...) -> Output`).",null,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"functionlookuperror"}],"output":{"name":"bool"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"executionengine"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"executionengine"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"link_in_mc_jit","","",13,{"inputs":[],"output":null}],[11,"link_in_interpreter","","",13,{"inputs":[],"output":null}],[11,"add_global_mapping","","Maps the specified value to an address.",13,{"inputs":[{"name":"self"},{"name":"anyvalue"},{"name":"usize"}],"output":null}],[11,"add_module","","Adds a module to an `ExecutionEngine`.",13,{"inputs":[{"name":"self"},{"name":"module"}],"output":{"name":"result"}}],[11,"remove_module","","",13,{"inputs":[{"name":"self"},{"name":"module"}],"output":{"generics":["string"],"name":"result"}}],[11,"get_function","","Try to load a function from the execution engine.",13,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["symbol","functionlookuperror"],"name":"result"}}],[11,"get_target_data","","",13,{"inputs":[{"name":"self"}],"output":{"name":"targetdata"}}],[11,"get_function_value","","",13,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["functionvalue","functionlookuperror"],"name":"result"}}],[11,"run_function","","",13,null],[11,"run_function_as_main","","",13,{"inputs":[{"name":"self"},{"name":"functionvalue"}],"output":null}],[11,"free_fn_machine_code","","",13,{"inputs":[{"name":"self"},{"name":"functionvalue"}],"output":null}],[11,"drop","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"executionengine"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"deref","","",14,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"memory_buffer","inkwell","",null,null],[3,"MemoryBuffer","inkwell::memory_buffer","",null,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"create_from_file","","",15,{"inputs":[{"name":"path"}],"output":{"generics":["string"],"name":"result"}}],[11,"create_from_stdin","","",15,{"inputs":[],"output":{"generics":["string"],"name":"result"}}],[11,"create_from_memory_range","","",15,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"create_from_memory_range_copy","","",15,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"as_slice","","",15,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"get_size","","",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"create_object_file","","",15,{"inputs":[{"name":"self"}],"output":{"name":"objectfile"}}],[11,"drop","","",15,{"inputs":[{"name":"self"}],"output":null}],[0,"module","inkwell","",null,null],[3,"Module","inkwell::module","Represents a reference to an LLVM `Module`. The underlying module will be disposed when dropping this object.",null,null],[4,"Linkage","","",null,null],[13,"AppendingLinkage","","",16,null],[13,"AvailableExternallyLinkage","","",16,null],[13,"CommonLinkage","","",16,null],[13,"DLLExportLinkage","","",16,null],[13,"DLLImportLinkage","","",16,null],[13,"ExternalLinkage","","",16,null],[13,"ExternalWeakLinkage","","",16,null],[13,"GhostLinkage","","",16,null],[13,"InternalLinkage","","",16,null],[13,"LinkerPrivateLinkage","","",16,null],[13,"LinkerPrivateWeakLinkage","","",16,null],[13,"LinkOnceAnyLinkage","","",16,null],[13,"LinkOnceODRAutoHideLinkage","","",16,null],[13,"LinkOnceODRLinkage","","",16,null],[13,"PrivateLinkage","","",16,null],[13,"WeakAnyLinkage","","",16,null],[13,"WeakODRLinkage","","",16,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"linkage"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"linkage"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"module"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"module"}],"output":{"name":"bool"}}],[11,"create","","Creates a named `Module`. Will be automatically assigned the global context.",17,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"add_function","","Creates a function given its `name` and `ty`, adds it to the `Module` and returns it.",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"functiontype"},{"generics":["linkage"],"name":"option"}],"output":{"name":"functionvalue"}}],[11,"get_context","","Gets the `Context` from which this `Module` originates.",17,{"inputs":[{"name":"self"}],"output":{"name":"contextref"}}],[11,"get_first_function","","Gets the first `FunctionValue` defined in this `Module`.",17,{"inputs":[{"name":"self"}],"output":{"generics":["functionvalue"],"name":"option"}}],[11,"get_last_function","","Gets the last `FunctionValue` defined in this `Module`.",17,{"inputs":[{"name":"self"}],"output":{"generics":["functionvalue"],"name":"option"}}],[11,"get_function","","Gets a `FunctionValue` defined in this `Module` by its name.",17,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["functionvalue"],"name":"option"}}],[11,"get_type","","",17,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["basictypeenum"],"name":"option"}}],[11,"set_target","","",17,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"get_target","","",17,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"create_jit_execution_engine","","Creates a JIT `ExecutionEngine` from this `Module`.",17,{"inputs":[{"name":"self"},{"name":"optimizationlevel"}],"output":{"generics":["executionengine","string"],"name":"result"}}],[11,"add_global","","",17,{"inputs":[{"name":"self"},{"name":"basictype"},{"generics":["addressspace"],"name":"option"},{"name":"str"}],"output":{"name":"globalvalue"}}],[11,"write_bitcode_to_path","","",17,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"write_bitcode_to_file","","",17,{"inputs":[{"name":"self"},{"name":"file"},{"name":"bool"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"write_bitcode_to_memory","","",17,{"inputs":[{"name":"self"}],"output":{"name":"memorybuffer"}}],[11,"verify","","Ensures that the current `Module` is valid, and returns a `bool` that describes whether or not it is.",17,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"get_data_layout","","",17,{"inputs":[{"name":"self"}],"output":{"name":"datalayout"}}],[11,"set_data_layout","","",17,{"inputs":[{"name":"self"},{"name":"datalayout"}],"output":null}],[11,"print_to_stderr","","Prints the content of the `Module` to stderr.",17,{"inputs":[{"name":"self"}],"output":null}],[11,"print_to_string","","Prints the content of the `Module` to a string.",17,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"print_to_file","","Prints the content of the `Module` to a file.",17,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["string"],"name":"result"}}],[11,"set_inline_assembly","","",17,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"add_global_metadata","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"metadatavalue"}],"output":null}],[11,"get_global_metadata_size","","",17,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"u32"}}],[11,"get_global_metadata","","",17,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["metadatavalue"],"name":"vec"}}],[11,"get_first_global","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["globalvalue"],"name":"option"}}],[11,"get_last_global","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["globalvalue"],"name":"option"}}],[11,"get_global","","",17,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["globalvalue"],"name":"option"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drop","","",17,{"inputs":[{"name":"self"}],"output":null}],[0,"object_file","inkwell","",null,null],[3,"ObjectFile","inkwell::object_file","",null,null],[3,"SectionIterator","","",null,null],[3,"Section","","",null,null],[3,"RelocationIterator","","",null,null],[3,"Relocation","","",null,null],[3,"SymbolIterator","","",null,null],[3,"Symbol","","",null,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_sections","","",18,{"inputs":[{"name":"self"}],"output":{"name":"sectioniterator"}}],[11,"get_symbols","","",18,{"inputs":[{"name":"self"}],"output":{"name":"symboliterator"}}],[11,"drop","","",18,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_name","","",20,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"size","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"get_contents","","",20,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"get_address","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"get_relocations","","",20,{"inputs":[{"name":"self"}],"output":{"name":"relocationiterator"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",21,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_offset","","",22,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"get_symbols","","",22,{"inputs":[{"name":"self"}],"output":{"name":"symboliterator"}}],[11,"get_type","","",22,null],[11,"get_value","","",22,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",23,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_name","","",24,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"size","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"get_address","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[0,"passes","inkwell","",null,null],[3,"PassManagerBuilder","inkwell::passes","",null,null],[3,"PassManager","","",null,null],[3,"PassRegistry","","",null,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"create","","",25,{"inputs":[],"output":{"name":"self"}}],[11,"set_optimization_level","","",25,{"inputs":[{"name":"self"},{"name":"optimizationlevel"}],"output":null}],[11,"set_size_level","","",25,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"set_disable_unit_at_a_time","","",25,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"set_disable_unroll_loops","","",25,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"set_disable_simplify_lib_calls","","",25,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"set_inliner_with_threshold","","",25,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"populate_function_pass_manager","","",25,{"inputs":[{"name":"self"},{"name":"passmanager"}],"output":null}],[11,"populate_module_pass_manager","","",25,{"inputs":[{"name":"self"},{"name":"passmanager"}],"output":null}],[11,"populate_lto_pass_manager","","",25,{"inputs":[{"name":"self"},{"name":"passmanager"},{"name":"bool"},{"name":"bool"}],"output":null}],[11,"drop","","",25,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"create_for_module","","",26,{"inputs":[],"output":{"name":"self"}}],[11,"create_for_function","","",26,{"inputs":[{"name":"module"}],"output":{"name":"self"}}],[11,"initialize","","",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"finalize","","",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"run_on_function","","",26,{"inputs":[{"name":"self"},{"name":"functionvalue"}],"output":{"name":"bool"}}],[11,"run_on_module","","",26,{"inputs":[{"name":"self"},{"name":"module"}],"output":{"name":"bool"}}],[11,"add_target_data","","",26,{"inputs":[{"name":"self"},{"name":"targetdata"}],"output":null}],[11,"add_argument_promotion_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_constant_merge_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_dead_arg_elimination_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_function_attrs_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_function_inlining_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_always_inliner_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_global_dce_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_global_optimizer_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_ip_constant_propagation_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_prune_eh_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_ipsccp_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_interinalize_pass","","",26,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"add_strip_dead_prototypes_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_strip_symbol_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_bb_vectorize_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_loop_vectorize_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_slp_vectorize_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_aggressive_dce_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_bit_tracking_dce_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_alignment_from_assumptions_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_cfg_simplification_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_dead_store_elimination_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_scalarizer_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_merged_load_store_motion_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_gvn_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_ind_var_simplify_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_instruction_combining_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_jump_threading_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_licm_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_loop_deletion_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_loop_idiom_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_loop_rotate_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_loop_reroll_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_loop_unroll_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_loop_unswitch_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_memcpy_optimize_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_partially_inline_lib_calls_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_lower_switch_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_promote_memory_to_register_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_reassociate_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_sccp_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_scalar_repl_aggregates_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_scalar_repl_aggregates_pass_ssa","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_scalar_repl_aggregates_pass_with_threshold","","",26,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"add_simplify_lib_calls_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_tail_call_elimination_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_constant_propagation_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_demote_memory_to_register_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_verifier_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_correlated_value_propagation_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_early_cse_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_lower_expect_intrinsic_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_type_based_alias_analysis_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_scoped_no_alias_aa_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"add_basic_alias_analysis_pass","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",27,{"inputs":[{"name":"llvmpassregistryref"}],"output":{"name":"passregistry"}}],[11,"get_global","","",27,{"inputs":[],"output":{"name":"passregistry"}}],[11,"initialize_core","","",27,{"inputs":[{"name":"self"}],"output":null}],[11,"initialize_transform_utils","","",27,{"inputs":[{"name":"self"}],"output":null}],[11,"initialize_scalar_opts","","",27,{"inputs":[{"name":"self"}],"output":null}],[11,"initialize_obj_carc_opts","","",27,{"inputs":[{"name":"self"}],"output":null}],[11,"initialize_vectorization","","",27,{"inputs":[{"name":"self"}],"output":null}],[11,"initialize_inst_combine","","",27,{"inputs":[{"name":"self"}],"output":null}],[11,"initialize_ipo","","",27,{"inputs":[{"name":"self"}],"output":null}],[11,"initialize_instrumentation","","",27,{"inputs":[{"name":"self"}],"output":null}],[11,"initialize_analysis","","",27,{"inputs":[{"name":"self"}],"output":null}],[11,"initialize_ipa","","",27,{"inputs":[{"name":"self"}],"output":null}],[11,"initialize_codegen","","",27,{"inputs":[{"name":"self"}],"output":null}],[11,"initialize_target","","",27,{"inputs":[{"name":"self"}],"output":null}],[0,"targets","inkwell","",null,null],[3,"InitializationConfig","inkwell::targets","",null,null],[12,"asm_parser","","",28,null],[12,"asm_printer","","",28,null],[12,"base","","",28,null],[12,"disassembler","","",28,null],[12,"info","","",28,null],[12,"machine_code","","",28,null],[3,"Target","","",null,null],[3,"TargetMachine","","",null,null],[3,"TargetData","","",null,null],[4,"CodeModel","","",null,null],[13,"Default","","",29,null],[13,"JITDefault","","",29,null],[13,"Small","","",29,null],[13,"Kernel","","",29,null],[13,"Medium","","",29,null],[13,"Large","","",29,null],[4,"RelocMode","","",null,null],[13,"Default","","",30,null],[13,"Static","","",30,null],[13,"PIC","","",30,null],[13,"DynamicNoPic","","",30,null],[4,"FileType","","",null,null],[13,"Assembly","","",31,null],[13,"Object","","",31,null],[4,"ByteOrdering","","",null,null],[13,"BigEndian","","",32,null],[13,"LittleEndian","","",32,null],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"codemodel"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"relocmode"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"initializationconfig"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"initializationconfig"}],"output":{"name":"bool"}}],[11,"default","","",28,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"initialize_x86","","",33,{"inputs":[{"name":"initializationconfig"}],"output":null}],[11,"initialize_arm","","",33,{"inputs":[{"name":"initializationconfig"}],"output":null}],[11,"initialize_mips","","",33,{"inputs":[{"name":"initializationconfig"}],"output":null}],[11,"initialize_aarch64","","",33,{"inputs":[{"name":"initializationconfig"}],"output":null}],[11,"initialize_amd_gpu","","",33,{"inputs":[{"name":"initializationconfig"}],"output":null}],[11,"initialize_system_z","","",33,{"inputs":[{"name":"initializationconfig"}],"output":null}],[11,"initialize_hexagon","","",33,{"inputs":[{"name":"initializationconfig"}],"output":null}],[11,"initialize_nvptx","","",33,{"inputs":[{"name":"initializationconfig"}],"output":null}],[11,"initialize_cpp_backend","","",33,{"inputs":[{"name":"initializationconfig"}],"output":null}],[11,"initialize_msp430","","",33,{"inputs":[{"name":"initializationconfig"}],"output":null}],[11,"initialize_x_core","","",33,{"inputs":[{"name":"initializationconfig"}],"output":null}],[11,"initialize_power_pc","","",33,{"inputs":[{"name":"initializationconfig"}],"output":null}],[11,"initialize_sparc","","",33,{"inputs":[{"name":"initializationconfig"}],"output":null}],[11,"initialize_bpf","","",33,{"inputs":[{"name":"initializationconfig"}],"output":null}],[11,"initialize_native","","",33,{"inputs":[{"name":"initializationconfig"}],"output":{"generics":["string"],"name":"result"}}],[11,"initialize_all","","",33,{"inputs":[{"name":"initializationconfig"}],"output":null}],[11,"create_target_machine","","",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"optimizationlevel"},{"name":"relocmode"},{"name":"codemodel"}],"output":{"generics":["targetmachine"],"name":"option"}}],[11,"get_first","","",33,{"inputs":[],"output":{"name":"option"}}],[11,"get_next","","",33,{"inputs":[{"name":"self"}],"output":{"generics":["target"],"name":"option"}}],[11,"get_name","","",33,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"get_description","","",33,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"from_name","","",33,{"inputs":[{"name":"str"}],"output":{"name":"target"}}],[11,"from_triple","","",33,{"inputs":[{"name":"str"}],"output":{"generics":["target","string"],"name":"result"}}],[11,"has_jit","","",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_target_machine","","",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_asm_backend","","",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_target","","",34,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"get_triple","","",34,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"get_default_triple","","",34,{"inputs":[],"output":{"name":"cstr"}}],[11,"get_cpu","","",34,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"get_feature_string","","",34,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"set_asm_verbosity","","",34,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"add_analysis_passes","","",34,{"inputs":[{"name":"self"},{"name":"passmanager"}],"output":null}],[11,"write_to_memory_buffer","","",34,{"inputs":[{"name":"self"},{"name":"module"},{"name":"filetype"}],"output":{"generics":["memorybuffer","string"],"name":"result"}}],[11,"write_to_file","","",34,{"inputs":[{"name":"self"},{"name":"module"},{"name":"filetype"},{"name":"path"}],"output":{"generics":["string"],"name":"result"}}],[11,"drop","","",34,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"byteordering"}],"output":{"name":"bool"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"targetdata"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"targetdata"}],"output":{"name":"bool"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"int_ptr_type","","",35,{"inputs":[{"name":"self"}],"output":{"name":"pointertype"}}],[11,"int_ptr_type_for_as","","",35,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"pointertype"}}],[11,"int_ptr_type_in_context","","",35,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"pointertype"}}],[11,"int_ptr_type_for_as_in_context","","",35,{"inputs":[{"name":"self"},{"name":"context"},{"name":"u32"}],"output":{"name":"pointertype"}}],[11,"get_data_layout","","",35,{"inputs":[{"name":"self"}],"output":{"name":"datalayout"}}],[11,"get_bit_size","","",35,{"inputs":[{"name":"self"},{"name":"anytype"}],"output":{"name":"u64"}}],[11,"create","","",35,{"inputs":[{"name":"str"}],"output":{"name":"targetdata"}}],[11,"add_target_data","","",35,{"inputs":[{"name":"self"},{"name":"passmanager"}],"output":null}],[11,"get_byte_ordering","","",35,{"inputs":[{"name":"self"}],"output":{"name":"byteordering"}}],[11,"get_pointer_byte_size","","",35,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_pointer_byte_size_for_as","","",35,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"get_store_size","","",35,{"inputs":[{"name":"self"},{"name":"anytype"}],"output":{"name":"u64"}}],[11,"get_abi_size","","",35,{"inputs":[{"name":"self"},{"name":"anytype"}],"output":{"name":"u64"}}],[11,"get_abi_alignment","","",35,{"inputs":[{"name":"self"},{"name":"anytype"}],"output":{"name":"u32"}}],[11,"get_call_frame_alignment","","",35,{"inputs":[{"name":"self"},{"name":"anytype"}],"output":{"name":"u32"}}],[11,"get_preferred_alignment","","",35,{"inputs":[{"name":"self"},{"name":"anytype"}],"output":{"name":"u32"}}],[11,"get_preferred_alignment_of_global","","",35,{"inputs":[{"name":"self"},{"name":"globalvalue"}],"output":{"name":"u32"}}],[11,"element_at_offset","","",35,{"inputs":[{"name":"self"},{"name":"structtype"},{"name":"u64"}],"output":{"name":"u32"}}],[11,"offset_of_element","","",35,{"inputs":[{"name":"self"},{"name":"structtype"},{"name":"u32"}],"output":{"generics":["u64"],"name":"option"}}],[11,"drop","","",35,{"inputs":[{"name":"self"}],"output":null}],[0,"types","inkwell","",null,null],[3,"ArrayType","inkwell::types","",null,null],[3,"FloatType","","",null,null],[3,"FunctionType","","",null,null],[3,"IntType","","",null,null],[3,"PointerType","","",null,null],[3,"StructType","","",null,null],[3,"VectorType","","",null,null],[3,"VoidType","","",null,null],[4,"AnyTypeEnum","","",null,null],[13,"IntType","","",36,null],[13,"FunctionType","","",36,null],[13,"FloatType","","",36,null],[13,"PointerType","","",36,null],[13,"StructType","","",36,null],[13,"ArrayType","","",36,null],[13,"VoidType","","",36,null],[13,"VectorType","","",36,null],[4,"BasicTypeEnum","","",null,null],[13,"IntType","","",37,null],[13,"FloatType","","",37,null],[13,"PointerType","","",37,null],[13,"StructType","","",37,null],[13,"ArrayType","","",37,null],[13,"VectorType","","",37,null],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"arraytype"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"arraytype"}],"output":{"name":"bool"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"arraytype"}}],[11,"is_sized","","",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"size_of","","",38,{"inputs":[{"name":"self"}],"output":{"generics":["intvalue"],"name":"option"}}],[11,"ptr_type","","",38,{"inputs":[{"name":"self"},{"name":"addressspace"}],"output":{"name":"pointertype"}}],[11,"get_context","","",38,{"inputs":[{"name":"self"}],"output":{"name":"contextref"}}],[11,"fn_type","","",38,null],[11,"array_type","","",38,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"arraytype"}}],[11,"const_array","","",38,null],[11,"const_null_ptr","","",38,{"inputs":[{"name":"self"}],"output":{"name":"pointervalue"}}],[11,"const_null","","",38,{"inputs":[{"name":"self"}],"output":{"name":"arrayvalue"}}],[11,"len","","",38,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"print_to_string","","",38,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"print_to_stderr","","",38,{"inputs":[{"name":"self"}],"output":null}],[11,"get_undef","","",38,{"inputs":[{"name":"self"}],"output":{"name":"arrayvalue"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_int_type","","",36,{"inputs":[{"name":"self"}],"output":{"name":"inttype"}}],[11,"as_function_type","","",36,{"inputs":[{"name":"self"}],"output":{"name":"functiontype"}}],[11,"as_float_type","","",36,{"inputs":[{"name":"self"}],"output":{"name":"floattype"}}],[11,"as_pointer_type","","",36,{"inputs":[{"name":"self"}],"output":{"name":"pointertype"}}],[11,"as_struct_type","","",36,{"inputs":[{"name":"self"}],"output":{"name":"structtype"}}],[11,"as_array_type","","",36,{"inputs":[{"name":"self"}],"output":{"name":"arraytype"}}],[11,"as_void_type","","",36,{"inputs":[{"name":"self"}],"output":{"name":"voidtype"}}],[11,"as_vector_type","","",36,{"inputs":[{"name":"self"}],"output":{"name":"vectortype"}}],[11,"into_int_type","","",36,{"inputs":[{"name":"self"}],"output":{"name":"inttype"}}],[11,"into_function_type","","",36,{"inputs":[{"name":"self"}],"output":{"name":"functiontype"}}],[11,"into_float_type","","",36,{"inputs":[{"name":"self"}],"output":{"name":"floattype"}}],[11,"into_pointer_type","","",36,{"inputs":[{"name":"self"}],"output":{"name":"pointertype"}}],[11,"into_struct_type","","",36,{"inputs":[{"name":"self"}],"output":{"name":"structtype"}}],[11,"into_array_type","","",36,{"inputs":[{"name":"self"}],"output":{"name":"arraytype"}}],[11,"into_void_type","","",36,{"inputs":[{"name":"self"}],"output":{"name":"voidtype"}}],[11,"into_vector_type","","",36,{"inputs":[{"name":"self"}],"output":{"name":"vectortype"}}],[11,"is_int_type","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_function_type","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_float_type","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_pointer_type","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_struct_type","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_array_type","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_void_type","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_vector_type","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"anytypeenum"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"anytypeenum"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"anytypeenum"}}],[11,"from","","",36,{"inputs":[{"name":"inttype"}],"output":{"name":"anytypeenum"}}],[11,"from","","",36,{"inputs":[{"name":"functiontype"}],"output":{"name":"anytypeenum"}}],[11,"from","","",36,{"inputs":[{"name":"floattype"}],"output":{"name":"anytypeenum"}}],[11,"from","","",36,{"inputs":[{"name":"pointertype"}],"output":{"name":"anytypeenum"}}],[11,"from","","",36,{"inputs":[{"name":"structtype"}],"output":{"name":"anytypeenum"}}],[11,"from","","",36,{"inputs":[{"name":"arraytype"}],"output":{"name":"anytypeenum"}}],[11,"from","","",36,{"inputs":[{"name":"voidtype"}],"output":{"name":"anytypeenum"}}],[11,"from","","",36,{"inputs":[{"name":"vectortype"}],"output":{"name":"anytypeenum"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_int_type","","",37,{"inputs":[{"name":"self"}],"output":{"name":"inttype"}}],[11,"as_float_type","","",37,{"inputs":[{"name":"self"}],"output":{"name":"floattype"}}],[11,"as_pointer_type","","",37,{"inputs":[{"name":"self"}],"output":{"name":"pointertype"}}],[11,"as_struct_type","","",37,{"inputs":[{"name":"self"}],"output":{"name":"structtype"}}],[11,"as_array_type","","",37,{"inputs":[{"name":"self"}],"output":{"name":"arraytype"}}],[11,"as_vector_type","","",37,{"inputs":[{"name":"self"}],"output":{"name":"vectortype"}}],[11,"into_int_type","","",37,{"inputs":[{"name":"self"}],"output":{"name":"inttype"}}],[11,"into_float_type","","",37,{"inputs":[{"name":"self"}],"output":{"name":"floattype"}}],[11,"into_pointer_type","","",37,{"inputs":[{"name":"self"}],"output":{"name":"pointertype"}}],[11,"into_struct_type","","",37,{"inputs":[{"name":"self"}],"output":{"name":"structtype"}}],[11,"into_array_type","","",37,{"inputs":[{"name":"self"}],"output":{"name":"arraytype"}}],[11,"into_vector_type","","",37,{"inputs":[{"name":"self"}],"output":{"name":"vectortype"}}],[11,"is_int_type","","",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_float_type","","",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_pointer_type","","",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_struct_type","","",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_array_type","","",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_vector_type","","",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"basictypeenum"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"basictypeenum"}],"output":{"name":"bool"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"basictypeenum"}}],[11,"from","","",37,{"inputs":[{"name":"inttype"}],"output":{"name":"basictypeenum"}}],[11,"from","","",37,{"inputs":[{"name":"floattype"}],"output":{"name":"basictypeenum"}}],[11,"from","","",37,{"inputs":[{"name":"pointertype"}],"output":{"name":"basictypeenum"}}],[11,"from","","",37,{"inputs":[{"name":"structtype"}],"output":{"name":"basictypeenum"}}],[11,"from","","",37,{"inputs":[{"name":"arraytype"}],"output":{"name":"basictypeenum"}}],[11,"from","","",37,{"inputs":[{"name":"vectortype"}],"output":{"name":"basictypeenum"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"floattype"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"floattype"}],"output":{"name":"bool"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"floattype"}}],[11,"fn_type","","",39,null],[11,"array_type","","",39,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"arraytype"}}],[11,"vec_type","","",39,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"vectortype"}}],[11,"const_float","","",39,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"floatvalue"}}],[11,"const_float_from_string","","",39,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"floatvalue"}}],[11,"const_null_ptr","","",39,{"inputs":[{"name":"self"}],"output":{"name":"pointervalue"}}],[11,"const_null","","",39,{"inputs":[{"name":"self"}],"output":{"name":"floatvalue"}}],[11,"is_sized","","",39,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"size_of","","",39,{"inputs":[{"name":"self"}],"output":{"name":"intvalue"}}],[11,"get_context","","",39,{"inputs":[{"name":"self"}],"output":{"name":"contextref"}}],[11,"ptr_type","","",39,{"inputs":[{"name":"self"},{"name":"addressspace"}],"output":{"name":"pointertype"}}],[11,"f16_type","","",39,{"inputs":[],"output":{"name":"self"}}],[11,"f32_type","","",39,{"inputs":[],"output":{"name":"self"}}],[11,"f64_type","","",39,{"inputs":[],"output":{"name":"self"}}],[11,"f128_type","","",39,{"inputs":[],"output":{"name":"self"}}],[11,"ppc_f128_type","","",39,{"inputs":[],"output":{"name":"self"}}],[11,"print_to_string","","",39,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"print_to_stderr","","",39,{"inputs":[{"name":"self"}],"output":null}],[11,"get_undef","","",39,{"inputs":[{"name":"self"}],"output":{"name":"floatvalue"}}],[11,"create_generic_value","","",39,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"genericvalue"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"functiontype"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"functiontype"}],"output":{"name":"bool"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"functiontype"}}],[11,"is_var_arg","","",40,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_param_types","","",40,{"inputs":[{"name":"self"}],"output":{"generics":["basictypeenum"],"name":"vec"}}],[11,"count_param_types","","",40,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_sized","","",40,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_context","","",40,{"inputs":[{"name":"self"}],"output":{"name":"contextref"}}],[11,"print_to_string","","",40,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"print_to_stderr","","",40,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"inttype"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"inttype"}],"output":{"name":"bool"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"inttype"}}],[11,"bool_type","","Gets the `IntType` representing 1 bit width. It will be automatically assigned the global context.",41,{"inputs":[],"output":{"name":"self"}}],[11,"i8_type","","Gets the `IntType` representing 8 bit width. It will be automatically assigned the global context.",41,{"inputs":[],"output":{"name":"self"}}],[11,"i16_type","","Gets the `IntType` representing 16 bit width. It will be automatically assigned the global context.",41,{"inputs":[],"output":{"name":"self"}}],[11,"i32_type","","Gets the `IntType` representing 32 bit width. It will be automatically assigned the global context.",41,{"inputs":[],"output":{"name":"self"}}],[11,"i64_type","","Gets the `IntType` representing 64 bit width. It will be automatically assigned the global context.",41,{"inputs":[],"output":{"name":"self"}}],[11,"i128_type","","Gets the `IntType` representing 128 bit width. It will be automatically assigned the global context.",41,{"inputs":[],"output":{"name":"self"}}],[11,"custom_width_int_type","","Gets the `IntType` representing a custom bit width. It will be automatically assigned the global context.",41,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"const_int","","Creates an `IntValue` repesenting a constant value of this `IntType`. It will be automatically assigned this `IntType`'s `Context`.",41,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"bool"}],"output":{"name":"intvalue"}}],[11,"const_int_from_string","","",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u8"}],"output":{"name":"intvalue"}}],[11,"const_int_arbitrary_precision","","",41,null],[11,"const_all_ones","","Creates an `IntValue` representing a constant value of all one bits of this `IntType`. It will be automatically assigned this `IntType`'s `Context`.",41,{"inputs":[{"name":"self"}],"output":{"name":"intvalue"}}],[11,"const_null_ptr","","Creates a `PointerValue` representing a constant value of zero (null pointer) pointing to this `IntType`. It will be automatically assigned this `IntType`'s `Context`.",41,{"inputs":[{"name":"self"}],"output":{"name":"pointervalue"}}],[11,"const_null","","",41,{"inputs":[{"name":"self"}],"output":{"name":"intvalue"}}],[11,"fn_type","","",41,null],[11,"array_type","","",41,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"arraytype"}}],[11,"vec_type","","",41,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"vectortype"}}],[11,"get_context","","",41,{"inputs":[{"name":"self"}],"output":{"name":"contextref"}}],[11,"is_sized","","",41,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"size_of","","",41,{"inputs":[{"name":"self"}],"output":{"name":"intvalue"}}],[11,"ptr_type","","",41,{"inputs":[{"name":"self"},{"name":"addressspace"}],"output":{"name":"pointertype"}}],[11,"get_bit_width","","",41,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"print_to_string","","",41,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"print_to_stderr","","",41,{"inputs":[{"name":"self"}],"output":null}],[11,"get_undef","","",41,{"inputs":[{"name":"self"}],"output":{"name":"intvalue"}}],[11,"create_generic_value","","",41,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"bool"}],"output":{"name":"genericvalue"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"pointertype"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"pointertype"}],"output":{"name":"bool"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"pointertype"}}],[11,"is_sized","","",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"size_of","","",42,{"inputs":[{"name":"self"}],"output":{"name":"intvalue"}}],[11,"ptr_type","","",42,{"inputs":[{"name":"self"},{"name":"addressspace"}],"output":{"name":"pointertype"}}],[11,"get_context","","",42,{"inputs":[{"name":"self"}],"output":{"name":"contextref"}}],[11,"fn_type","","",42,null],[11,"array_type","","",42,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"arraytype"}}],[11,"get_address_space","","",42,{"inputs":[{"name":"self"}],"output":{"name":"addressspace"}}],[11,"print_to_string","","",42,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"print_to_stderr","","",42,{"inputs":[{"name":"self"}],"output":null}],[11,"const_null_ptr","","",42,{"inputs":[{"name":"self"}],"output":{"name":"pointervalue"}}],[11,"const_null","","",42,{"inputs":[{"name":"self"}],"output":{"name":"pointervalue"}}],[11,"get_undef","","",42,{"inputs":[{"name":"self"}],"output":{"name":"pointervalue"}}],[11,"vec_type","","",42,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"vectortype"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"structtype"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"structtype"}],"output":{"name":"bool"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"structtype"}}],[11,"get_field_type_at_index","","",43,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["basictypeenum"],"name":"option"}}],[11,"const_named_struct","","",43,null],[11,"const_struct","","",43,null],[11,"const_null_ptr","","",43,{"inputs":[{"name":"self"}],"output":{"name":"pointervalue"}}],[11,"const_null","","",43,{"inputs":[{"name":"self"}],"output":{"name":"structvalue"}}],[11,"is_sized","","",43,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"size_of","","",43,{"inputs":[{"name":"self"}],"output":{"generics":["intvalue"],"name":"option"}}],[11,"get_context","","",43,{"inputs":[{"name":"self"}],"output":{"name":"contextref"}}],[11,"get_name","","",43,{"inputs":[{"name":"self"}],"output":{"generics":["cstr"],"name":"option"}}],[11,"ptr_type","","",43,{"inputs":[{"name":"self"},{"name":"addressspace"}],"output":{"name":"pointertype"}}],[11,"fn_type","","",43,null],[11,"array_type","","",43,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"arraytype"}}],[11,"is_packed","","",43,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_opaque","","",43,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"struct_type","","",43,null],[11,"count_fields","","",43,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_field_types","","",43,{"inputs":[{"name":"self"}],"output":{"generics":["basictypeenum"],"name":"vec"}}],[11,"print_to_string","","",43,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"print_to_stderr","","",43,{"inputs":[{"name":"self"}],"output":null}],[11,"get_undef","","",43,{"inputs":[{"name":"self"}],"output":{"name":"structvalue"}}],[11,"set_body","","",43,null],[11,"vec_type","","",43,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"vectortype"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"vectortype"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"vectortype"}],"output":{"name":"bool"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"vectortype"}}],[11,"is_sized","","",44,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"size_of","","",44,{"inputs":[{"name":"self"}],"output":{"generics":["intvalue"],"name":"option"}}],[11,"get_size","","",44,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"const_vector","","",44,null],[11,"const_null_ptr","","",44,{"inputs":[{"name":"self"}],"output":{"name":"pointervalue"}}],[11,"const_null","","",44,{"inputs":[{"name":"self"}],"output":{"name":"vectorvalue"}}],[11,"print_to_string","","",44,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"print_to_stderr","","",44,{"inputs":[{"name":"self"}],"output":null}],[11,"get_undef","","",44,{"inputs":[{"name":"self"}],"output":{"name":"vectorvalue"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"voidtype"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"voidtype"}],"output":{"name":"bool"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"voidtype"}}],[11,"is_sized","","",45,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_context","","",45,{"inputs":[{"name":"self"}],"output":{"name":"contextref"}}],[11,"ptr_type","","",45,{"inputs":[{"name":"self"},{"name":"addressspace"}],"output":{"name":"pointertype"}}],[11,"fn_type","","",45,null],[11,"void_type","","",45,{"inputs":[],"output":{"name":"self"}}],[11,"print_to_string","","",45,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"print_to_stderr","","",45,{"inputs":[{"name":"self"}],"output":null}],[11,"const_null_ptr","","",45,{"inputs":[{"name":"self"}],"output":{"name":"pointervalue"}}],[8,"AnyType","","Represents any LLVM type.",null,null],[11,"as_any_type_enum","","Returns an `AnyTypeEnum` that represents the current type.",46,{"inputs":[{"name":"self"}],"output":{"name":"anytypeenum"}}],[8,"BasicType","","Represents a basic LLVM type, that may be used in functions and struct declarations.",null,null],[11,"as_basic_type_enum","","Returns a `BasicTypeEnum` that represents the current type.",47,{"inputs":[{"name":"self"}],"output":{"name":"basictypeenum"}}],[0,"values","inkwell","",null,null],[3,"ArrayValue","inkwell::values","",null,null],[3,"FloatValue","","",null,null],[3,"FunctionValue","","",null,null],[3,"GenericValue","","",null,null],[3,"GlobalValue","","",null,null],[3,"InstructionValue","","",null,null],[3,"IntValue","","",null,null],[3,"MetadataValue","","",null,null],[3,"PhiValue","","",null,null],[3,"PointerValue","","",null,null],[3,"StructValue","","",null,null],[3,"VectorValue","","",null,null],[4,"AnyValueEnum","","",null,null],[13,"ArrayValue","","",48,null],[13,"IntValue","","",48,null],[13,"FloatValue","","",48,null],[13,"PhiValue","","",48,null],[13,"FunctionValue","","",48,null],[13,"PointerValue","","",48,null],[13,"StructValue","","",48,null],[13,"VectorValue","","",48,null],[13,"InstructionValue","","",48,null],[4,"AggregateValueEnum","","",null,null],[13,"ArrayValue","","",49,null],[13,"StructValue","","",49,null],[4,"BasicValueEnum","","",null,null],[13,"ArrayValue","","",50,null],[13,"IntValue","","",50,null],[13,"FloatValue","","",50,null],[13,"PointerValue","","",50,null],[13,"StructValue","","",50,null],[13,"VectorValue","","",50,null],[4,"BasicMetadataValueEnum","","",null,null],[13,"ArrayValue","","",51,null],[13,"IntValue","","",51,null],[13,"FloatValue","","",51,null],[13,"PointerValue","","",51,null],[13,"StructValue","","",51,null],[13,"VectorValue","","",51,null],[13,"MetadataValue","","",51,null],[4,"InstructionOpcode","","",null,null],[13,"Add","","",52,null],[13,"AddrSpaceCast","","",52,null],[13,"Alloca","","",52,null],[13,"And","","",52,null],[13,"AShr","","",52,null],[13,"AtomicCmpXchg","","",52,null],[13,"AtomicRMW","","",52,null],[13,"BitCast","","",52,null],[13,"Br","","",52,null],[13,"Call","","",52,null],[13,"CatchPad","","",52,null],[13,"CatchRet","","",52,null],[13,"CatchSwitch","","",52,null],[13,"CleanupPad","","",52,null],[13,"CleanupRet","","",52,null],[13,"ExtractElement","","",52,null],[13,"ExtractValue","","",52,null],[13,"FAdd","","",52,null],[13,"FCmp","","",52,null],[13,"FDiv","","",52,null],[13,"Fence","","",52,null],[13,"FMul","","",52,null],[13,"FPExt","","",52,null],[13,"FPToSI","","",52,null],[13,"FPToUI","","",52,null],[13,"FPTrunc","","",52,null],[13,"FRem","","",52,null],[13,"FSub","","",52,null],[13,"GetElementPtr","","",52,null],[13,"ICmp","","",52,null],[13,"IndirectBr","","",52,null],[13,"InsertElement","","",52,null],[13,"InsertValue","","",52,null],[13,"IntToPtr","","",52,null],[13,"Invoke","","",52,null],[13,"LandingPad","","",52,null],[13,"Load","","",52,null],[13,"LShr","","",52,null],[13,"Mul","","",52,null],[13,"Or","","",52,null],[13,"Phi","","",52,null],[13,"PtrToInt","","",52,null],[13,"Resume","","",52,null],[13,"Return","","",52,null],[13,"SDiv","","",52,null],[13,"Select","","",52,null],[13,"SExt","","",52,null],[13,"Shl","","",52,null],[13,"ShuffleVector","","",52,null],[13,"SIToFP","","",52,null],[13,"SRem","","",52,null],[13,"Store","","",52,null],[13,"Sub","","",52,null],[13,"Switch","","",52,null],[13,"Trunc","","",52,null],[13,"UDiv","","",52,null],[13,"UIToFP","","",52,null],[13,"Unreachable","","",52,null],[13,"URem","","",52,null],[13,"UserOp1","","",52,null],[13,"UserOp2","","",52,null],[13,"VAArg","","",52,null],[13,"Xor","","",52,null],[13,"ZExt","","",52,null],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"arrayvalue"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"arrayvalue"}],"output":{"name":"bool"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"arrayvalue"}}],[11,"get_name","","",53,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"set_name","","",53,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"get_type","","",53,{"inputs":[{"name":"self"}],"output":{"name":"arraytype"}}],[11,"is_null","","",53,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_undef","","",53,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"print_to_string","","",53,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"print_to_stderr","","",53,{"inputs":[{"name":"self"}],"output":null}],[11,"as_instruction","","",53,{"inputs":[{"name":"self"}],"output":{"generics":["instructionvalue"],"name":"option"}}],[11,"has_metadata","","",53,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_metadata","","",53,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["metadatavalue"],"name":"option"}}],[11,"set_metadata","","",53,{"inputs":[{"name":"self"},{"name":"metadatavalue"},{"name":"u32"}],"output":null}],[11,"replace_all_uses_with","","",53,{"inputs":[{"name":"self"},{"name":"arrayvalue"}],"output":null}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_array_value","","",49,{"inputs":[{"name":"self"}],"output":{"name":"arrayvalue"}}],[11,"as_struct_value","","",49,{"inputs":[{"name":"self"}],"output":{"name":"structvalue"}}],[11,"into_array_value","","",49,{"inputs":[{"name":"self"}],"output":{"name":"arrayvalue"}}],[11,"into_struct_value","","",49,{"inputs":[{"name":"self"}],"output":{"name":"structvalue"}}],[11,"is_array_value","","",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_struct_value","","",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"aggregatevalueenum"}}],[11,"from","","",49,{"inputs":[{"name":"arrayvalue"}],"output":{"name":"aggregatevalueenum"}}],[11,"from","","",49,{"inputs":[{"name":"structvalue"}],"output":{"name":"aggregatevalueenum"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_array_value","","",48,{"inputs":[{"name":"self"}],"output":{"name":"arrayvalue"}}],[11,"as_int_value","","",48,{"inputs":[{"name":"self"}],"output":{"name":"intvalue"}}],[11,"as_float_value","","",48,{"inputs":[{"name":"self"}],"output":{"name":"floatvalue"}}],[11,"as_phi_value","","",48,{"inputs":[{"name":"self"}],"output":{"name":"phivalue"}}],[11,"as_function_value","","",48,{"inputs":[{"name":"self"}],"output":{"name":"functionvalue"}}],[11,"as_pointer_value","","",48,{"inputs":[{"name":"self"}],"output":{"name":"pointervalue"}}],[11,"as_struct_value","","",48,{"inputs":[{"name":"self"}],"output":{"name":"structvalue"}}],[11,"as_vector_value","","",48,{"inputs":[{"name":"self"}],"output":{"name":"vectorvalue"}}],[11,"as_instruction_value","","",48,{"inputs":[{"name":"self"}],"output":{"name":"instructionvalue"}}],[11,"into_array_value","","",48,{"inputs":[{"name":"self"}],"output":{"name":"arrayvalue"}}],[11,"into_int_value","","",48,{"inputs":[{"name":"self"}],"output":{"name":"intvalue"}}],[11,"into_float_value","","",48,{"inputs":[{"name":"self"}],"output":{"name":"floatvalue"}}],[11,"into_phi_value","","",48,{"inputs":[{"name":"self"}],"output":{"name":"phivalue"}}],[11,"into_function_value","","",48,{"inputs":[{"name":"self"}],"output":{"name":"functionvalue"}}],[11,"into_pointer_value","","",48,{"inputs":[{"name":"self"}],"output":{"name":"pointervalue"}}],[11,"into_struct_value","","",48,{"inputs":[{"name":"self"}],"output":{"name":"structvalue"}}],[11,"into_vector_value","","",48,{"inputs":[{"name":"self"}],"output":{"name":"vectorvalue"}}],[11,"into_instruction_value","","",48,{"inputs":[{"name":"self"}],"output":{"name":"instructionvalue"}}],[11,"is_array_value","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_int_value","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_float_value","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_phi_value","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_function_value","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_pointer_value","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_struct_value","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_vector_value","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_instruction_value","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"anyvalueenum"}}],[11,"from","","",48,{"inputs":[{"name":"arrayvalue"}],"output":{"name":"anyvalueenum"}}],[11,"from","","",48,{"inputs":[{"name":"intvalue"}],"output":{"name":"anyvalueenum"}}],[11,"from","","",48,{"inputs":[{"name":"floatvalue"}],"output":{"name":"anyvalueenum"}}],[11,"from","","",48,{"inputs":[{"name":"phivalue"}],"output":{"name":"anyvalueenum"}}],[11,"from","","",48,{"inputs":[{"name":"functionvalue"}],"output":{"name":"anyvalueenum"}}],[11,"from","","",48,{"inputs":[{"name":"pointervalue"}],"output":{"name":"anyvalueenum"}}],[11,"from","","",48,{"inputs":[{"name":"structvalue"}],"output":{"name":"anyvalueenum"}}],[11,"from","","",48,{"inputs":[{"name":"vectorvalue"}],"output":{"name":"anyvalueenum"}}],[11,"from","","",48,{"inputs":[{"name":"instructionvalue"}],"output":{"name":"anyvalueenum"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_array_value","","",50,{"inputs":[{"name":"self"}],"output":{"name":"arrayvalue"}}],[11,"as_int_value","","",50,{"inputs":[{"name":"self"}],"output":{"name":"intvalue"}}],[11,"as_float_value","","",50,{"inputs":[{"name":"self"}],"output":{"name":"floatvalue"}}],[11,"as_pointer_value","","",50,{"inputs":[{"name":"self"}],"output":{"name":"pointervalue"}}],[11,"as_struct_value","","",50,{"inputs":[{"name":"self"}],"output":{"name":"structvalue"}}],[11,"as_vector_value","","",50,{"inputs":[{"name":"self"}],"output":{"name":"vectorvalue"}}],[11,"into_array_value","","",50,{"inputs":[{"name":"self"}],"output":{"name":"arrayvalue"}}],[11,"into_int_value","","",50,{"inputs":[{"name":"self"}],"output":{"name":"intvalue"}}],[11,"into_float_value","","",50,{"inputs":[{"name":"self"}],"output":{"name":"floatvalue"}}],[11,"into_pointer_value","","",50,{"inputs":[{"name":"self"}],"output":{"name":"pointervalue"}}],[11,"into_struct_value","","",50,{"inputs":[{"name":"self"}],"output":{"name":"structvalue"}}],[11,"into_vector_value","","",50,{"inputs":[{"name":"self"}],"output":{"name":"vectorvalue"}}],[11,"is_array_value","","",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_int_value","","",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_float_value","","",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_pointer_value","","",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_struct_value","","",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_vector_value","","",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"basicvalueenum"}}],[11,"from","","",50,{"inputs":[{"name":"arrayvalue"}],"output":{"name":"basicvalueenum"}}],[11,"from","","",50,{"inputs":[{"name":"intvalue"}],"output":{"name":"basicvalueenum"}}],[11,"from","","",50,{"inputs":[{"name":"floatvalue"}],"output":{"name":"basicvalueenum"}}],[11,"from","","",50,{"inputs":[{"name":"pointervalue"}],"output":{"name":"basicvalueenum"}}],[11,"from","","",50,{"inputs":[{"name":"structvalue"}],"output":{"name":"basicvalueenum"}}],[11,"from","","",50,{"inputs":[{"name":"vectorvalue"}],"output":{"name":"basicvalueenum"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_array_value","","",51,{"inputs":[{"name":"self"}],"output":{"name":"arrayvalue"}}],[11,"as_int_value","","",51,{"inputs":[{"name":"self"}],"output":{"name":"intvalue"}}],[11,"as_float_value","","",51,{"inputs":[{"name":"self"}],"output":{"name":"floatvalue"}}],[11,"as_pointer_value","","",51,{"inputs":[{"name":"self"}],"output":{"name":"pointervalue"}}],[11,"as_struct_value","","",51,{"inputs":[{"name":"self"}],"output":{"name":"structvalue"}}],[11,"as_vector_value","","",51,{"inputs":[{"name":"self"}],"output":{"name":"vectorvalue"}}],[11,"as_metadata_value","","",51,{"inputs":[{"name":"self"}],"output":{"name":"metadatavalue"}}],[11,"into_array_value","","",51,{"inputs":[{"name":"self"}],"output":{"name":"arrayvalue"}}],[11,"into_int_value","","",51,{"inputs":[{"name":"self"}],"output":{"name":"intvalue"}}],[11,"into_float_value","","",51,{"inputs":[{"name":"self"}],"output":{"name":"floatvalue"}}],[11,"into_pointer_value","","",51,{"inputs":[{"name":"self"}],"output":{"name":"pointervalue"}}],[11,"into_struct_value","","",51,{"inputs":[{"name":"self"}],"output":{"name":"structvalue"}}],[11,"into_vector_value","","",51,{"inputs":[{"name":"self"}],"output":{"name":"vectorvalue"}}],[11,"into_metadata_value","","",51,{"inputs":[{"name":"self"}],"output":{"name":"metadatavalue"}}],[11,"is_array_value","","",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_int_value","","",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_float_value","","",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_pointer_value","","",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_struct_value","","",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_vector_value","","",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_metadata_value","","",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"basicmetadatavalueenum"}}],[11,"from","","",51,{"inputs":[{"name":"arrayvalue"}],"output":{"name":"basicmetadatavalueenum"}}],[11,"from","","",51,{"inputs":[{"name":"intvalue"}],"output":{"name":"basicmetadatavalueenum"}}],[11,"from","","",51,{"inputs":[{"name":"floatvalue"}],"output":{"name":"basicmetadatavalueenum"}}],[11,"from","","",51,{"inputs":[{"name":"pointervalue"}],"output":{"name":"basicmetadatavalueenum"}}],[11,"from","","",51,{"inputs":[{"name":"structvalue"}],"output":{"name":"basicmetadatavalueenum"}}],[11,"from","","",51,{"inputs":[{"name":"vectorvalue"}],"output":{"name":"basicmetadatavalueenum"}}],[11,"from","","",51,{"inputs":[{"name":"metadatavalue"}],"output":{"name":"basicmetadatavalueenum"}}],[11,"get_type","","",48,{"inputs":[{"name":"self"}],"output":{"name":"anytypeenum"}}],[11,"get_type","","",50,{"inputs":[{"name":"self"}],"output":{"name":"basictypeenum"}}],[11,"as_instruction","","",50,{"inputs":[{"name":"self"}],"output":{"generics":["instructionvalue"],"name":"option"}}],[11,"from","","",48,{"inputs":[{"name":"basicvalueenum"}],"output":{"name":"anyvalueenum"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"floatvalue"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"floatvalue"}],"output":{"name":"bool"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"floatvalue"}}],[11,"get_name","","",54,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"set_name","","",54,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"get_type","","",54,{"inputs":[{"name":"self"}],"output":{"name":"floattype"}}],[11,"is_null","","",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_undef","","",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"print_to_string","","",54,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"print_to_stderr","","",54,{"inputs":[{"name":"self"}],"output":null}],[11,"as_instruction","","",54,{"inputs":[{"name":"self"}],"output":{"generics":["instructionvalue"],"name":"option"}}],[11,"const_neg","","",54,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"const_add","","",54,{"inputs":[{"name":"self"},{"name":"floatvalue"}],"output":{"name":"self"}}],[11,"const_sub","","",54,{"inputs":[{"name":"self"},{"name":"floatvalue"}],"output":{"name":"self"}}],[11,"const_mul","","",54,{"inputs":[{"name":"self"},{"name":"floatvalue"}],"output":{"name":"self"}}],[11,"const_div","","",54,{"inputs":[{"name":"self"},{"name":"floatvalue"}],"output":{"name":"self"}}],[11,"const_remainder","","",54,{"inputs":[{"name":"self"},{"name":"floatvalue"}],"output":{"name":"self"}}],[11,"const_cast","","",54,{"inputs":[{"name":"self"},{"name":"floattype"}],"output":{"name":"self"}}],[11,"const_to_unsigned_int","","",54,{"inputs":[{"name":"self"},{"name":"inttype"}],"output":{"name":"intvalue"}}],[11,"const_to_signed_int","","",54,{"inputs":[{"name":"self"},{"name":"inttype"}],"output":{"name":"intvalue"}}],[11,"const_truncate","","",54,{"inputs":[{"name":"self"},{"name":"floattype"}],"output":{"name":"floatvalue"}}],[11,"const_extend","","",54,{"inputs":[{"name":"self"},{"name":"floattype"}],"output":{"name":"floatvalue"}}],[11,"has_metadata","","",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_metadata","","",54,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["metadatavalue"],"name":"option"}}],[11,"set_metadata","","",54,{"inputs":[{"name":"self"},{"name":"metadatavalue"},{"name":"u32"}],"output":null}],[11,"const_compare","","",54,{"inputs":[{"name":"self"},{"name":"floatpredicate"},{"name":"floatvalue"}],"output":{"name":"intvalue"}}],[11,"replace_all_uses_with","","",54,{"inputs":[{"name":"self"},{"name":"floatvalue"}],"output":null}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"functionvalue"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"functionvalue"}],"output":{"name":"bool"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"functionvalue"}}],[11,"get_linkage","","",55,{"inputs":[{"name":"self"}],"output":{"name":"linkage"}}],[11,"is_null","","",55,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_undef","","",55,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"print_to_string","","",55,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"print_to_stderr","","",55,{"inputs":[{"name":"self"}],"output":null}],[11,"verify","","",55,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"get_next_function","","",55,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_previous_function","","",55,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_first_param","","",55,{"inputs":[{"name":"self"}],"output":{"generics":["basicvalueenum"],"name":"option"}}],[11,"get_last_param","","",55,{"inputs":[{"name":"self"}],"output":{"generics":["basicvalueenum"],"name":"option"}}],[11,"get_entry_basic_block","","",55,{"inputs":[{"name":"self"}],"output":{"generics":["basicblock"],"name":"option"}}],[11,"get_first_basic_block","","",55,{"inputs":[{"name":"self"}],"output":{"generics":["basicblock"],"name":"option"}}],[11,"append_basic_block","","",55,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"basicblock"}}],[11,"get_nth_param","","",55,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["basicvalueenum"],"name":"option"}}],[11,"count_params","","",55,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"count_basic_blocks","","",55,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_basic_blocks","","",55,{"inputs":[{"name":"self"}],"output":{"generics":["basicblock"],"name":"vec"}}],[11,"get_return_type","","",55,{"inputs":[{"name":"self"}],"output":{"name":"basictypeenum"}}],[11,"params","","",55,{"inputs":[{"name":"self"}],"output":{"name":"paramvalueiter"}}],[11,"get_last_basic_block","","",55,{"inputs":[{"name":"self"}],"output":{"generics":["basicblock"],"name":"option"}}],[11,"get_name","","",55,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"view_function_config","","",55,{"inputs":[{"name":"self"}],"output":null}],[11,"view_function_config_only","","",55,{"inputs":[{"name":"self"}],"output":null}],[11,"delete","","",55,{"inputs":[{"name":"self"}],"output":null}],[11,"get_type","","",55,{"inputs":[{"name":"self"}],"output":{"name":"functiontype"}}],[11,"has_metadata","","",55,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_metadata","","",55,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["metadatavalue"],"name":"option"}}],[11,"set_metadata","","",55,{"inputs":[{"name":"self"},{"name":"metadatavalue"},{"name":"u32"}],"output":null}],[11,"get_personality_function","","",55,{"inputs":[{"name":"self"}],"output":{"generics":["functionvalue"],"name":"option"}}],[11,"set_personality_function","","",55,{"inputs":[{"name":"self"},{"name":"functionvalue"}],"output":null}],[11,"get_intrinsic_id","","",55,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_call_conventions","","",55,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"set_call_conventions","","",55,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_gc","","",55,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"set_gc","","",55,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"replace_all_uses_with","","",55,{"inputs":[{"name":"self"},{"name":"functionvalue"}],"output":null}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"int_width","","",56,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"create_generic_value_of_pointer","","",56,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"as_int","","",56,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"u64"}}],[11,"as_float","","",56,{"inputs":[{"name":"self"},{"name":"floattype"}],"output":{"name":"f64"}}],[11,"into_pointer","","",56,null],[11,"drop","","",56,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"globalvalue"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"globalvalue"}],"output":{"name":"bool"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"globalvalue"}}],[11,"get_previous_global","","",57,{"inputs":[{"name":"self"}],"output":{"generics":["globalvalue"],"name":"option"}}],[11,"get_next_global","","",57,{"inputs":[{"name":"self"}],"output":{"generics":["globalvalue"],"name":"option"}}],[11,"get_dll_storage_class","","",57,{"inputs":[{"name":"self"}],"output":{"name":"dllstorageclass"}}],[11,"set_dll_storage_class","","",57,{"inputs":[{"name":"self"},{"name":"dllstorageclass"}],"output":null}],[11,"get_initializer","","",57,{"inputs":[{"name":"self"}],"output":{"generics":["basicvalueenum"],"name":"option"}}],[11,"set_initializer","","",57,{"inputs":[{"name":"self"},{"name":"basicvalue"}],"output":null}],[11,"is_thread_local","","",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_thread_local","","",57,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_thread_local_mode","","",57,{"inputs":[{"name":"self"}],"output":{"generics":["threadlocalmode"],"name":"option"}}],[11,"set_thread_local_mode","","",57,{"inputs":[{"name":"self"},{"generics":["threadlocalmode"],"name":"option"}],"output":null}],[11,"is_declaration","","",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_unnamed_addr","","",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_unnamed_addr","","",57,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"is_constant","","",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_constant","","",57,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"is_externally_initialized","","",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_externally_initialized","","",57,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"set_visibility","","",57,{"inputs":[{"name":"self"},{"name":"globalvisibility"}],"output":null}],[11,"get_visibility","","",57,{"inputs":[{"name":"self"}],"output":{"name":"globalvisibility"}}],[11,"get_section","","",57,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"set_section","","",57,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"delete","","",57,{"inputs":[{"name":"self"}],"output":null}],[11,"as_pointer_value","","",57,{"inputs":[{"name":"self"}],"output":{"name":"pointervalue"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"instructionopcode"}],"output":{"name":"bool"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"instructionvalue"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"instructionvalue"}],"output":{"name":"bool"}}],[11,"get_opcode","","",58,{"inputs":[{"name":"self"}],"output":{"name":"instructionopcode"}}],[11,"get_previous_instruction","","",58,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_next_instruction","","",58,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"remove_from_basic_block","","",58,{"inputs":[{"name":"self"}],"output":null}],[11,"get_parent","","",58,{"inputs":[{"name":"self"}],"output":{"generics":["basicblock"],"name":"option"}}],[11,"is_tail_call","","",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"replace_all_uses_with","","",58,{"inputs":[{"name":"self"},{"name":"instructionvalue"}],"output":null}],[11,"get_volatile","","Returns whether or not a memory access instruction is volatile.",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_volatile","","Sets whether or not a memory access instruction is volatile.",58,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"clone","","Creates a clone of this `InstructionValue`, and returns it. The clone will have no parent, and no name.",58,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"intvalue"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"intvalue"}],"output":{"name":"bool"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"intvalue"}}],[11,"get_name","","",59,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"set_name","","",59,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"get_type","","",59,{"inputs":[{"name":"self"}],"output":{"name":"inttype"}}],[11,"is_null","","",59,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_undef","","",59,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"print_to_string","","",59,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"print_to_stderr","","",59,{"inputs":[{"name":"self"}],"output":null}],[11,"as_instruction","","",59,{"inputs":[{"name":"self"}],"output":{"generics":["instructionvalue"],"name":"option"}}],[11,"const_not","","",59,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"const_neg","","",59,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"const_nsw_neg","","",59,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"const_nuw_neg","","",59,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"const_add","","",59,{"inputs":[{"name":"self"},{"name":"intvalue"}],"output":{"name":"self"}}],[11,"const_nsw_add","","",59,{"inputs":[{"name":"self"},{"name":"intvalue"}],"output":{"name":"self"}}],[11,"const_nuw_add","","",59,{"inputs":[{"name":"self"},{"name":"intvalue"}],"output":{"name":"self"}}],[11,"const_sub","","",59,{"inputs":[{"name":"self"},{"name":"intvalue"}],"output":{"name":"self"}}],[11,"const_nsw_sub","","",59,{"inputs":[{"name":"self"},{"name":"intvalue"}],"output":{"name":"self"}}],[11,"const_nuw_sub","","",59,{"inputs":[{"name":"self"},{"name":"intvalue"}],"output":{"name":"self"}}],[11,"const_mul","","",59,{"inputs":[{"name":"self"},{"name":"intvalue"}],"output":{"name":"self"}}],[11,"const_nsw_mul","","",59,{"inputs":[{"name":"self"},{"name":"intvalue"}],"output":{"name":"self"}}],[11,"const_nuw_mul","","",59,{"inputs":[{"name":"self"},{"name":"intvalue"}],"output":{"name":"self"}}],[11,"const_unsigned_div","","",59,{"inputs":[{"name":"self"},{"name":"intvalue"}],"output":{"name":"self"}}],[11,"const_signed_div","","",59,{"inputs":[{"name":"self"},{"name":"intvalue"}],"output":{"name":"self"}}],[11,"const_exact_signed_div","","",59,{"inputs":[{"name":"self"},{"name":"intvalue"}],"output":{"name":"self"}}],[11,"const_unsigned_remainder","","",59,{"inputs":[{"name":"self"},{"name":"intvalue"}],"output":{"name":"self"}}],[11,"const_signed_remainder","","",59,{"inputs":[{"name":"self"},{"name":"intvalue"}],"output":{"name":"self"}}],[11,"const_and","","",59,{"inputs":[{"name":"self"},{"name":"intvalue"}],"output":{"name":"self"}}],[11,"const_or","","",59,{"inputs":[{"name":"self"},{"name":"intvalue"}],"output":{"name":"self"}}],[11,"const_xor","","",59,{"inputs":[{"name":"self"},{"name":"intvalue"}],"output":{"name":"self"}}],[11,"const_cast","","",59,{"inputs":[{"name":"self"},{"name":"inttype"},{"name":"bool"}],"output":{"name":"self"}}],[11,"const_shl","","",59,{"inputs":[{"name":"self"},{"name":"intvalue"}],"output":{"name":"self"}}],[11,"const_rshr","","",59,{"inputs":[{"name":"self"},{"name":"intvalue"}],"output":{"name":"self"}}],[11,"const_ashr","","",59,{"inputs":[{"name":"self"},{"name":"intvalue"}],"output":{"name":"self"}}],[11,"const_unsigned_to_float","","",59,{"inputs":[{"name":"self"},{"name":"floattype"}],"output":{"name":"floatvalue"}}],[11,"const_signed_to_float","","",59,{"inputs":[{"name":"self"},{"name":"floattype"}],"output":{"name":"floatvalue"}}],[11,"const_to_pointer","","",59,{"inputs":[{"name":"self"},{"name":"pointertype"}],"output":{"name":"pointervalue"}}],[11,"const_truncate","","",59,{"inputs":[{"name":"self"},{"name":"inttype"}],"output":{"name":"intvalue"}}],[11,"const_s_extend","","",59,{"inputs":[{"name":"self"},{"name":"inttype"}],"output":{"name":"intvalue"}}],[11,"const_z_ext","","",59,{"inputs":[{"name":"self"},{"name":"inttype"}],"output":{"name":"intvalue"}}],[11,"const_truncate_or_bit_cast","","",59,{"inputs":[{"name":"self"},{"name":"inttype"}],"output":{"name":"intvalue"}}],[11,"const_s_extend_or_bit_cast","","",59,{"inputs":[{"name":"self"},{"name":"inttype"}],"output":{"name":"intvalue"}}],[11,"const_z_ext_or_bit_cast","","",59,{"inputs":[{"name":"self"},{"name":"inttype"}],"output":{"name":"intvalue"}}],[11,"const_bit_cast","","",59,{"inputs":[{"name":"self"},{"name":"inttype"}],"output":{"name":"intvalue"}}],[11,"has_metadata","","",59,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_metadata","","",59,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["metadatavalue"],"name":"option"}}],[11,"set_metadata","","",59,{"inputs":[{"name":"self"},{"name":"metadatavalue"},{"name":"u32"}],"output":null}],[11,"const_int_compare","","",59,{"inputs":[{"name":"self"},{"name":"intpredicate"},{"name":"intvalue"}],"output":{"name":"intvalue"}}],[11,"replace_all_uses_with","","",59,{"inputs":[{"name":"self"},{"name":"intvalue"}],"output":null}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"metadatavalue"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"self"},{"name":"metadatavalue"}],"output":{"name":"bool"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"metadatavalue"}}],[11,"is_node","","",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_string","","",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"create_node","","",60,null],[11,"create_string","","",60,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"get_string_value","","",60,{"inputs":[{"name":"self"}],"output":{"generics":["cstr"],"name":"option"}}],[11,"get_node_size","","",60,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_node_values","","",60,{"inputs":[{"name":"self"}],"output":{"generics":["basicmetadatavalueenum"],"name":"vec"}}],[11,"get_kind_id","","",60,{"inputs":[{"name":"str"}],"output":{"name":"u32"}}],[11,"print_to_string","","",60,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"print_to_stderr","","",60,{"inputs":[{"name":"self"}],"output":null}],[11,"replace_all_uses_with","","",60,{"inputs":[{"name":"self"},{"name":"metadatavalue"}],"output":null}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"phivalue"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"phivalue"}],"output":{"name":"bool"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"phivalue"}}],[11,"add_incoming","","",61,null],[11,"count_incoming","","",61,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_incoming","","",61,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_name","","",61,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"set_name","","",61,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"is_null","","",61,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_undef","","",61,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"print_to_string","","",61,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"print_to_stderr","","",61,{"inputs":[{"name":"self"}],"output":null}],[11,"as_instruction","","",61,{"inputs":[{"name":"self"}],"output":{"name":"instructionvalue"}}],[11,"replace_all_uses_with","","",61,{"inputs":[{"name":"self"},{"name":"phivalue"}],"output":null}],[11,"as_basic_value","","",61,{"inputs":[{"name":"self"}],"output":{"name":"basicvalueenum"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"pointervalue"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"pointervalue"}],"output":{"name":"bool"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"pointervalue"}}],[11,"get_name","","",62,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"set_name","","",62,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"get_type","","",62,{"inputs":[{"name":"self"}],"output":{"name":"pointertype"}}],[11,"is_null","","",62,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_undef","","",62,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"print_to_string","","",62,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"print_to_stderr","","",62,{"inputs":[{"name":"self"}],"output":null}],[11,"as_instruction","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["instructionvalue"],"name":"option"}}],[11,"has_metadata","","",62,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_metadata","","",62,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["metadatavalue"],"name":"option"}}],[11,"set_metadata","","",62,{"inputs":[{"name":"self"},{"name":"metadatavalue"},{"name":"u32"}],"output":null}],[11,"const_gep","","",62,null],[11,"const_in_bounds_gep","","",62,null],[11,"const_to_int","","",62,{"inputs":[{"name":"self"},{"name":"inttype"}],"output":{"name":"intvalue"}}],[11,"const_cast","","",62,{"inputs":[{"name":"self"},{"name":"pointertype"}],"output":{"name":"pointervalue"}}],[11,"const_address_space_cast","","",62,{"inputs":[{"name":"self"},{"name":"pointertype"}],"output":{"name":"pointervalue"}}],[11,"replace_all_uses_with","","",62,{"inputs":[{"name":"self"},{"name":"pointervalue"}],"output":null}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"structvalue"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"self"},{"name":"structvalue"}],"output":{"name":"bool"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"structvalue"}}],[11,"get_name","","",63,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"set_name","","",63,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"get_type","","",63,{"inputs":[{"name":"self"}],"output":{"name":"structtype"}}],[11,"is_null","","",63,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_undef","","",63,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"print_to_string","","",63,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"print_to_stderr","","",63,{"inputs":[{"name":"self"}],"output":null}],[11,"as_instruction","","",63,{"inputs":[{"name":"self"}],"output":{"generics":["instructionvalue"],"name":"option"}}],[11,"has_metadata","","",63,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_metadata","","",63,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["metadatavalue"],"name":"option"}}],[11,"set_metadata","","",63,{"inputs":[{"name":"self"},{"name":"metadatavalue"},{"name":"u32"}],"output":null}],[11,"replace_all_uses_with","","",63,{"inputs":[{"name":"self"},{"name":"structvalue"}],"output":null}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"vectorvalue"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"self"},{"name":"vectorvalue"}],"output":{"name":"bool"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"vectorvalue"}}],[11,"is_constant_vector","","",64,{"inputs":[{"name":"self"}],"output":{"name":"intvalue"}}],[11,"is_constant_data_vector","","",64,{"inputs":[{"name":"self"}],"output":{"name":"intvalue"}}],[11,"print_to_string","","",64,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"print_to_stderr","","",64,{"inputs":[{"name":"self"}],"output":null}],[11,"get_name","","",64,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"set_name","","",64,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"get_type","","",64,{"inputs":[{"name":"self"}],"output":{"name":"vectortype"}}],[11,"is_null","","",64,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_undef","","",64,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_instruction","","",64,{"inputs":[{"name":"self"}],"output":{"generics":["instructionvalue"],"name":"option"}}],[11,"const_extract_element","","",64,{"inputs":[{"name":"self"},{"name":"intvalue"}],"output":{"name":"basicvalueenum"}}],[11,"const_insert_element","","",64,{"inputs":[{"name":"self"},{"name":"intvalue"},{"name":"basicvalue"}],"output":{"name":"basicvalueenum"}}],[11,"has_metadata","","",64,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_metadata","","",64,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["metadatavalue"],"name":"option"}}],[11,"set_metadata","","",64,{"inputs":[{"name":"self"},{"name":"metadatavalue"},{"name":"u32"}],"output":null}],[11,"replace_all_uses_with","","",64,{"inputs":[{"name":"self"},{"name":"vectorvalue"}],"output":null}],[17,"FIRST_CUSTOM_METADATA_KIND_ID","","",null,null],[8,"AnyValue","","Defines any struct wrapping an LLVM value.",null,null],[11,"as_any_value_enum","","Returns an enum containing a typed version of `AnyValue`.",65,{"inputs":[{"name":"self"}],"output":{"name":"anyvalueenum"}}],[8,"AggregateValue","","Represents an aggregate value, built on top of other values.",null,null],[11,"as_aggregate_value_enum","","Returns an enum containing a typed version of the `AggregateValue`.",66,{"inputs":[{"name":"self"}],"output":{"name":"aggregatevalueenum"}}],[8,"BasicValue","","Represents a basic value, which can be used both by itself, or in an `AggregateValue`.",null,null],[11,"as_basic_value_enum","","Returns an enum containing a typed version of the `BasicValue`.",67,{"inputs":[{"name":"self"}],"output":{"name":"basicvalueenum"}}],[11,"fmt","inkwell","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"addressspace"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"addressspace"}}],[11,"from","","",0,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"intpredicate"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"intpredicate"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"floatpredicate"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"floatpredicate"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"optimizationlevel"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"optimizationlevel"}}],[11,"default","","Returns the default value for `OptimizationLevel`, namely `OptimizationLevel::Default`.",3,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"globalvisibility"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"globalvisibility"}],"output":{"name":"bool"}}],[11,"default","","Returns the default value for `GlobalVisibility`, namely `GlobalVisibility::Default`.",4,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"threadlocalmode"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"threadlocalmode"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"dllstorageclass"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"dllstorageclass"}],"output":{"name":"bool"}}],[11,"default","","Returns the default value for `DLLStorageClass`, namely `DLLStorageClass::Default`.",6,{"inputs":[],"output":{"name":"self"}}],[11,"as_any_type_enum","inkwell::types","Returns an `AnyTypeEnum` that represents the current type.",46,{"inputs":[{"name":"self"}],"output":{"name":"anytypeenum"}}],[11,"as_basic_type_enum","","Returns a `BasicTypeEnum` that represents the current type.",47,{"inputs":[{"name":"self"}],"output":{"name":"basictypeenum"}}],[11,"as_aggregate_value_enum","inkwell::values","Returns an enum containing a typed version of the `AggregateValue`.",66,{"inputs":[{"name":"self"}],"output":{"name":"aggregatevalueenum"}}],[11,"as_basic_value_enum","","Returns an enum containing a typed version of the `BasicValue`.",67,{"inputs":[{"name":"self"}],"output":{"name":"basicvalueenum"}}],[11,"as_any_value_enum","","Returns an enum containing a typed version of `AnyValue`.",65,{"inputs":[{"name":"self"}],"output":{"name":"anyvalueenum"}}]],"paths":[[4,"AddressSpace"],[4,"IntPredicate"],[4,"FloatPredicate"],[4,"OptimizationLevel"],[4,"GlobalVisibility"],[4,"ThreadLocalMode"],[4,"DLLStorageClass"],[3,"BasicBlock"],[3,"Builder"],[3,"Context"],[3,"ContextRef"],[3,"DataLayout"],[4,"FunctionLookupError"],[3,"ExecutionEngine"],[3,"Symbol"],[3,"MemoryBuffer"],[4,"Linkage"],[3,"Module"],[3,"ObjectFile"],[3,"SectionIterator"],[3,"Section"],[3,"RelocationIterator"],[3,"Relocation"],[3,"SymbolIterator"],[3,"Symbol"],[3,"PassManagerBuilder"],[3,"PassManager"],[3,"PassRegistry"],[3,"InitializationConfig"],[4,"CodeModel"],[4,"RelocMode"],[4,"FileType"],[4,"ByteOrdering"],[3,"Target"],[3,"TargetMachine"],[3,"TargetData"],[4,"AnyTypeEnum"],[4,"BasicTypeEnum"],[3,"ArrayType"],[3,"FloatType"],[3,"FunctionType"],[3,"IntType"],[3,"PointerType"],[3,"StructType"],[3,"VectorType"],[3,"VoidType"],[8,"AnyType"],[8,"BasicType"],[4,"AnyValueEnum"],[4,"AggregateValueEnum"],[4,"BasicValueEnum"],[4,"BasicMetadataValueEnum"],[4,"InstructionOpcode"],[3,"ArrayValue"],[3,"FloatValue"],[3,"FunctionValue"],[3,"GenericValue"],[3,"GlobalValue"],[3,"InstructionValue"],[3,"IntValue"],[3,"MetadataValue"],[3,"PhiValue"],[3,"PointerValue"],[3,"StructValue"],[3,"VectorValue"],[8,"AnyValue"],[8,"AggregateValue"],[8,"BasicValue"]]};
searchIndex["lalrpop_util"] = {"doc":"","items":[[3,"ErrorRecovery","lalrpop_util","",null,null],[12,"error","","",0,null],[12,"dropped_tokens","","",0,null],[4,"ParseError","","",null,null],[13,"InvalidToken","","Generated by the parser when it encounters a token (or EOF) it did not expect.",1,null],[12,"location","lalrpop_util::ParseError","",1,null],[13,"UnrecognizedToken","lalrpop_util","Generated by the parser when it encounters a token (or EOF) it did not expect.",1,null],[12,"token","lalrpop_util::ParseError","If this is `Some`, then an unexpected token of type `T` was observed, with a span given by the two `L` values. If this is `None`, then EOF was observed when it was not expected.",1,null],[12,"expected","","The set of expected tokens: these names are taken from the grammar and hence may not necessarily be suitable for presenting to the user.",1,null],[13,"ExtraToken","lalrpop_util","Generated by the parser when it encounters additional, unexpected tokens.",1,null],[12,"token","lalrpop_util::ParseError","",1,null],[13,"User","lalrpop_util","Custom error type.",1,null],[12,"error","lalrpop_util::ParseError","",1,null],[11,"clone","lalrpop_util","",1,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"ordering"}}],[11,"map_location","","",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"parseerror"}}],[11,"map_token","","",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"parseerror"}}],[11,"map_error","","",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"parseerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"errorrecovery"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"errorrecovery"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"errorrecovery"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"errorrecovery"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"errorrecovery"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"errorrecovery"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"errorrecovery"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"errorrecovery"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"errorrecovery"}],"output":{"name":"ordering"}}]],"paths":[[3,"ErrorRecovery"],[4,"ParseError"]]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[5,"initialize","lazy_static","Takes a shared reference to a lazy static and initializes it if it has not been already.",null,{"inputs":[{"name":"t"}],"output":null}],[8,"LazyStatic","","Support trait for enabling a few common operation on lazy static values.",null,null],[14,"lazy_static","","",null,null]],"paths":[]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",15,null],[3,"itimerval","","",null,null],[12,"it_interval","","",16,null],[12,"it_value","","",16,null],[3,"tms","","",null,null],[12,"tms_utime","","",17,null],[12,"tms_stime","","",17,null],[12,"tms_cutime","","",17,null],[12,"tms_cstime","","",17,null],[3,"servent","","",null,null],[12,"s_name","","",18,null],[12,"s_aliases","","",18,null],[12,"s_port","","",18,null],[12,"s_proto","","",18,null],[3,"protoent","","",null,null],[12,"p_name","","",19,null],[12,"p_aliases","","",19,null],[12,"p_proto","","",19,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",20,null],[12,"sa_data","","",20,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",21,null],[12,"sin_port","","",21,null],[12,"sin_addr","","",21,null],[12,"sin_zero","","",21,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",22,null],[12,"sin6_port","","",22,null],[12,"sin6_flowinfo","","",22,null],[12,"sin6_addr","","",22,null],[12,"sin6_scope_id","","",22,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",23,null],[12,"sun_path","","",23,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",24,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",25,null],[12,"ai_family","","",25,null],[12,"ai_socktype","","",25,null],[12,"ai_protocol","","",25,null],[12,"ai_addrlen","","",25,null],[12,"ai_addr","","",25,null],[12,"ai_canonname","","",25,null],[12,"ai_next","","",25,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",26,null],[12,"nl_pid","","",26,null],[12,"nl_groups","","",26,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",27,null],[12,"sll_protocol","","",27,null],[12,"sll_ifindex","","",27,null],[12,"sll_hatype","","",27,null],[12,"sll_pkttype","","",27,null],[12,"sll_halen","","",27,null],[12,"sll_addr","","",27,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",28,null],[12,"tm_min","","",28,null],[12,"tm_hour","","",28,null],[12,"tm_mday","","",28,null],[12,"tm_mon","","",28,null],[12,"tm_year","","",28,null],[12,"tm_wday","","",28,null],[12,"tm_yday","","",28,null],[12,"tm_isdst","","",28,null],[12,"tm_gmtoff","","",28,null],[12,"tm_zone","","",28,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",29,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",30,null],[12,"dli_fbase","","",30,null],[12,"dli_sname","","",30,null],[12,"dli_saddr","","",30,null],[3,"epoll_event","","",null,null],[12,"events","","",31,null],[12,"u64","","",31,null],[3,"utsname","","",null,null],[12,"sysname","","",32,null],[12,"nodename","","",32,null],[12,"release","","",32,null],[12,"version","","",32,null],[12,"machine","","",32,null],[12,"domainname","","",32,null],[3,"lconv","","",null,null],[12,"decimal_point","","",33,null],[12,"thousands_sep","","",33,null],[12,"grouping","","",33,null],[12,"int_curr_symbol","","",33,null],[12,"currency_symbol","","",33,null],[12,"mon_decimal_point","","",33,null],[12,"mon_thousands_sep","","",33,null],[12,"mon_grouping","","",33,null],[12,"positive_sign","","",33,null],[12,"negative_sign","","",33,null],[12,"int_frac_digits","","",33,null],[12,"frac_digits","","",33,null],[12,"p_cs_precedes","","",33,null],[12,"p_sep_by_space","","",33,null],[12,"n_cs_precedes","","",33,null],[12,"n_sep_by_space","","",33,null],[12,"p_sign_posn","","",33,null],[12,"n_sign_posn","","",33,null],[12,"int_p_cs_precedes","","",33,null],[12,"int_p_sep_by_space","","",33,null],[12,"int_n_cs_precedes","","",33,null],[12,"int_n_sep_by_space","","",33,null],[12,"int_p_sign_posn","","",33,null],[12,"int_n_sign_posn","","",33,null],[3,"sigevent","","",null,null],[12,"sigev_value","","",34,null],[12,"sigev_signo","","",34,null],[12,"sigev_notify","","",34,null],[12,"sigev_notify_thread_id","","",34,null],[3,"dirent","","",null,null],[12,"d_ino","","",35,null],[12,"d_off","","",35,null],[12,"d_reclen","","",35,null],[12,"d_type","","",35,null],[12,"d_name","","",35,null],[3,"dirent64","","",null,null],[12,"d_ino","","",36,null],[12,"d_off","","",36,null],[12,"d_reclen","","",36,null],[12,"d_type","","",36,null],[12,"d_name","","",36,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",37,null],[12,"rlim_max","","",37,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",38,null],[12,"gl_pathv","","",38,null],[12,"gl_offs","","",38,null],[12,"gl_flags","","",38,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",39,null],[12,"ifa_name","","",39,null],[12,"ifa_flags","","",39,null],[12,"ifa_addr","","",39,null],[12,"ifa_netmask","","",39,null],[12,"ifa_ifu","","",39,null],[12,"ifa_data","","",39,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_rwlockattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",40,null],[12,"pw_passwd","","",40,null],[12,"pw_uid","","",40,null],[12,"pw_gid","","",40,null],[12,"pw_gecos","","",40,null],[12,"pw_dir","","",40,null],[12,"pw_shell","","",40,null],[3,"spwd","","",null,null],[12,"sp_namp","","",41,null],[12,"sp_pwdp","","",41,null],[12,"sp_lstchg","","",41,null],[12,"sp_min","","",41,null],[12,"sp_max","","",41,null],[12,"sp_warn","","",41,null],[12,"sp_inact","","",41,null],[12,"sp_expire","","",41,null],[12,"sp_flag","","",41,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",42,null],[12,"f_frsize","","",42,null],[12,"f_blocks","","",42,null],[12,"f_bfree","","",42,null],[12,"f_bavail","","",42,null],[12,"f_files","","",42,null],[12,"f_ffree","","",42,null],[12,"f_favail","","",42,null],[12,"f_fsid","","",42,null],[12,"f_flag","","",42,null],[12,"f_namemax","","",42,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",43,null],[12,"dqb_bsoftlimit","","",43,null],[12,"dqb_curspace","","",43,null],[12,"dqb_ihardlimit","","",43,null],[12,"dqb_isoftlimit","","",43,null],[12,"dqb_curinodes","","",43,null],[12,"dqb_btime","","",43,null],[12,"dqb_itime","","",43,null],[12,"dqb_valid","","",43,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",44,null],[12,"ssi_errno","","",44,null],[12,"ssi_code","","",44,null],[12,"ssi_pid","","",44,null],[12,"ssi_uid","","",44,null],[12,"ssi_fd","","",44,null],[12,"ssi_tid","","",44,null],[12,"ssi_band","","",44,null],[12,"ssi_overrun","","",44,null],[12,"ssi_trapno","","",44,null],[12,"ssi_status","","",44,null],[12,"ssi_int","","",44,null],[12,"ssi_ptr","","",44,null],[12,"ssi_utime","","",44,null],[12,"ssi_stime","","",44,null],[12,"ssi_addr","","",44,null],[3,"itimerspec","","",null,null],[12,"it_interval","","",45,null],[12,"it_value","","",45,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",46,null],[12,"mq_maxmsg","","",46,null],[12,"mq_msgsize","","",46,null],[12,"mq_curmsgs","","",46,null],[3,"cpu_set_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",47,null],[12,"if_name","","",47,null],[3,"msginfo","","",null,null],[12,"msgpool","","",48,null],[12,"msgmap","","",48,null],[12,"msgmax","","",48,null],[12,"msgmnb","","",48,null],[12,"msgmni","","",48,null],[12,"msgssz","","",48,null],[12,"msgtql","","",48,null],[12,"msgseg","","",48,null],[3,"mmsghdr","","",null,null],[12,"msg_hdr","","",49,null],[12,"msg_len","","",49,null],[3,"sembuf","","",null,null],[12,"sem_num","","",50,null],[12,"sem_op","","",50,null],[12,"sem_flg","","",50,null],[3,"input_event","","",null,null],[12,"time","","",51,null],[12,"type_","","",51,null],[12,"code","","",51,null],[12,"value","","",51,null],[3,"input_id","","",null,null],[12,"bustype","","",52,null],[12,"vendor","","",52,null],[12,"product","","",52,null],[12,"version","","",52,null],[3,"input_absinfo","","",null,null],[12,"value","","",53,null],[12,"minimum","","",53,null],[12,"maximum","","",53,null],[12,"fuzz","","",53,null],[12,"flat","","",53,null],[12,"resolution","","",53,null],[3,"input_keymap_entry","","",null,null],[12,"flags","","",54,null],[12,"len","","",54,null],[12,"index","","",54,null],[12,"keycode","","",54,null],[12,"scancode","","",54,null],[3,"input_mask","","",null,null],[12,"type_","","",55,null],[12,"codes_size","","",55,null],[12,"codes_ptr","","",55,null],[3,"ff_replay","","",null,null],[12,"length","","",56,null],[12,"delay","","",56,null],[3,"ff_trigger","","",null,null],[12,"button","","",57,null],[12,"interval","","",57,null],[3,"ff_envelope","","",null,null],[12,"attack_length","","",58,null],[12,"attack_level","","",58,null],[12,"fade_length","","",58,null],[12,"fade_level","","",58,null],[3,"ff_constant_effect","","",null,null],[12,"level","","",59,null],[12,"envelope","","",59,null],[3,"ff_ramp_effect","","",null,null],[12,"start_level","","",60,null],[12,"end_level","","",60,null],[12,"envelope","","",60,null],[3,"ff_condition_effect","","",null,null],[12,"right_saturation","","",61,null],[12,"left_saturation","","",61,null],[12,"right_coeff","","",61,null],[12,"left_coeff","","",61,null],[12,"deadband","","",61,null],[12,"center","","",61,null],[3,"ff_periodic_effect","","",null,null],[12,"waveform","","",62,null],[12,"period","","",62,null],[12,"magnitude","","",62,null],[12,"offset","","",62,null],[12,"phase","","",62,null],[12,"envelope","","",62,null],[12,"custom_len","","",62,null],[12,"custom_data","","",62,null],[3,"ff_rumble_effect","","",null,null],[12,"strong_magnitude","","",63,null],[12,"weak_magnitude","","",63,null],[3,"ff_effect","","",null,null],[12,"type_","","",64,null],[12,"id","","",64,null],[12,"direction","","",64,null],[12,"trigger","","",64,null],[12,"replay","","",64,null],[12,"u","","",64,null],[3,"dl_phdr_info","","",null,null],[12,"dlpi_addr","","",65,null],[12,"dlpi_name","","",65,null],[12,"dlpi_phdr","","",65,null],[12,"dlpi_phnum","","",65,null],[12,"dlpi_adds","","",65,null],[12,"dlpi_subs","","",65,null],[12,"dlpi_tls_modid","","",65,null],[12,"dlpi_tls_data","","",65,null],[3,"Elf32_Phdr","","",null,null],[12,"p_type","","",66,null],[12,"p_offset","","",66,null],[12,"p_vaddr","","",66,null],[12,"p_paddr","","",66,null],[12,"p_filesz","","",66,null],[12,"p_memsz","","",66,null],[12,"p_flags","","",66,null],[12,"p_align","","",66,null],[3,"Elf64_Phdr","","",null,null],[12,"p_type","","",67,null],[12,"p_flags","","",67,null],[12,"p_offset","","",67,null],[12,"p_vaddr","","",67,null],[12,"p_paddr","","",67,null],[12,"p_filesz","","",67,null],[12,"p_memsz","","",67,null],[12,"p_align","","",67,null],[3,"ucred","","",null,null],[12,"pid","","",68,null],[12,"uid","","",68,null],[12,"gid","","",68,null],[3,"mntent","","",null,null],[12,"mnt_fsname","","",69,null],[12,"mnt_dir","","",69,null],[12,"mnt_type","","",69,null],[12,"mnt_opts","","",69,null],[12,"mnt_freq","","",69,null],[12,"mnt_passno","","",69,null],[3,"posix_spawn_file_actions_t","","",null,null],[3,"posix_spawnattr_t","","",null,null],[3,"genlmsghdr","","",null,null],[3,"aiocb","","",null,null],[12,"aio_fildes","","",70,null],[12,"aio_lio_opcode","","",70,null],[12,"aio_reqprio","","",70,null],[12,"aio_buf","","",70,null],[12,"aio_nbytes","","",70,null],[12,"aio_sigevent","","",70,null],[12,"aio_offset","","",70,null],[3,"__exit_status","","",null,null],[12,"e_termination","","",71,null],[12,"e_exit","","",71,null],[3,"__timeval","","",null,null],[12,"tv_sec","","",72,null],[12,"tv_usec","","",72,null],[3,"utmpx","","",null,null],[12,"ut_type","","",73,null],[12,"ut_pid","","",73,null],[12,"ut_line","","",73,null],[12,"ut_id","","",73,null],[12,"ut_user","","",73,null],[12,"ut_host","","",73,null],[12,"ut_exit","","",73,null],[12,"ut_session","","",73,null],[12,"ut_tv","","",73,null],[12,"ut_addr_v6","","",73,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",74,null],[12,"sa_mask","","",74,null],[12,"sa_flags","","",74,null],[12,"sa_restorer","","",74,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",75,null],[12,"ss_flags","","",75,null],[12,"ss_size","","",75,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",76,null],[12,"si_errno","","",76,null],[12,"si_code","","",76,null],[12,"_pad","","",76,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",77,null],[12,"gl_pathv","","",77,null],[12,"gl_offs","","",77,null],[12,"gl_flags","","",77,null],[3,"statfs","","",null,null],[12,"f_type","","",78,null],[12,"f_bsize","","",78,null],[12,"f_blocks","","",78,null],[12,"f_bfree","","",78,null],[12,"f_bavail","","",78,null],[12,"f_files","","",78,null],[12,"f_ffree","","",78,null],[12,"f_fsid","","",78,null],[12,"f_namelen","","",78,null],[12,"f_frsize","","",78,null],[3,"msghdr","","",null,null],[12,"msg_name","","",79,null],[12,"msg_namelen","","",79,null],[12,"msg_iov","","",79,null],[12,"msg_iovlen","","",79,null],[12,"msg_control","","",79,null],[12,"msg_controllen","","",79,null],[12,"msg_flags","","",79,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",80,null],[12,"cmsg_level","","",80,null],[12,"cmsg_type","","",80,null],[3,"termios","","",null,null],[12,"c_iflag","","",81,null],[12,"c_oflag","","",81,null],[12,"c_cflag","","",81,null],[12,"c_lflag","","",81,null],[12,"c_line","","",81,null],[12,"c_cc","","",81,null],[12,"c_ispeed","","",81,null],[12,"c_ospeed","","",81,null],[3,"flock","","",null,null],[12,"l_type","","",82,null],[12,"l_whence","","",82,null],[12,"l_start","","",82,null],[12,"l_len","","",82,null],[12,"l_pid","","",82,null],[3,"sem_t","","",null,null],[3,"mallinfo","","",null,null],[12,"arena","","",83,null],[12,"ordblks","","",83,null],[12,"smblks","","",83,null],[12,"hblks","","",83,null],[12,"hblkhd","","",83,null],[12,"usmblks","","",83,null],[12,"fsmblks","","",83,null],[12,"uordblks","","",83,null],[12,"fordblks","","",83,null],[12,"keepcost","","",83,null],[3,"nlmsghdr","","",null,null],[3,"nlmsgerr","","",null,null],[3,"nl_pktinfo","","",null,null],[3,"nl_mmap_req","","",null,null],[3,"nl_mmap_hdr","","",null,null],[3,"nlattr","","",null,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",84,null],[12,"loads","","",84,null],[12,"totalram","","",84,null],[12,"freeram","","",84,null],[12,"sharedram","","",84,null],[12,"bufferram","","",84,null],[12,"totalswap","","",84,null],[12,"freeswap","","",84,null],[12,"procs","","",84,null],[12,"pad","","",84,null],[12,"totalhigh","","",84,null],[12,"freehigh","","",84,null],[12,"mem_unit","","",84,null],[12,"_f","","",84,null],[3,"msqid_ds","","",null,null],[12,"msg_perm","","",85,null],[12,"msg_stime","","",85,null],[12,"msg_rtime","","",85,null],[12,"msg_ctime","","",85,null],[12,"msg_qnum","","",85,null],[12,"msg_qbytes","","",85,null],[12,"msg_lspid","","",85,null],[12,"msg_lrpid","","",85,null],[3,"stat","","",null,null],[12,"st_dev","","",86,null],[12,"st_ino","","",86,null],[12,"st_nlink","","",86,null],[12,"st_mode","","",86,null],[12,"st_uid","","",86,null],[12,"st_gid","","",86,null],[12,"st_rdev","","",86,null],[12,"st_size","","",86,null],[12,"st_blksize","","",86,null],[12,"st_blocks","","",86,null],[12,"st_atime","","",86,null],[12,"st_atime_nsec","","",86,null],[12,"st_mtime","","",86,null],[12,"st_mtime_nsec","","",86,null],[12,"st_ctime","","",86,null],[12,"st_ctime_nsec","","",86,null],[3,"stat64","","",null,null],[12,"st_dev","","",87,null],[12,"st_ino","","",87,null],[12,"st_nlink","","",87,null],[12,"st_mode","","",87,null],[12,"st_uid","","",87,null],[12,"st_gid","","",87,null],[12,"st_rdev","","",87,null],[12,"st_size","","",87,null],[12,"st_blksize","","",87,null],[12,"st_blocks","","",87,null],[12,"st_atime","","",87,null],[12,"st_atime_nsec","","",87,null],[12,"st_mtime","","",87,null],[12,"st_mtime_nsec","","",87,null],[12,"st_ctime","","",87,null],[12,"st_ctime_nsec","","",87,null],[3,"statfs64","","",null,null],[12,"f_type","","",88,null],[12,"f_bsize","","",88,null],[12,"f_blocks","","",88,null],[12,"f_bfree","","",88,null],[12,"f_bavail","","",88,null],[12,"f_files","","",88,null],[12,"f_ffree","","",88,null],[12,"f_fsid","","",88,null],[12,"f_namelen","","",88,null],[12,"f_frsize","","",88,null],[12,"f_flags","","",88,null],[12,"f_spare","","",88,null],[3,"statvfs64","","",null,null],[12,"f_bsize","","",89,null],[12,"f_frsize","","",89,null],[12,"f_blocks","","",89,null],[12,"f_bfree","","",89,null],[12,"f_bavail","","",89,null],[12,"f_files","","",89,null],[12,"f_ffree","","",89,null],[12,"f_favail","","",89,null],[12,"f_fsid","","",89,null],[12,"f_flag","","",89,null],[12,"f_namemax","","",89,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",90,null],[12,"exponent","","",90,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",91,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",92,null],[12,"swd","","",92,null],[12,"ftw","","",92,null],[12,"fop","","",92,null],[12,"rip","","",92,null],[12,"rdp","","",92,null],[12,"mxcsr","","",92,null],[12,"mxcr_mask","","",92,null],[12,"_st","","",92,null],[12,"_xmm","","",92,null],[3,"user_fpregs_struct","","",null,null],[12,"cwd","","",93,null],[12,"swd","","",93,null],[12,"ftw","","",93,null],[12,"fop","","",93,null],[12,"rip","","",93,null],[12,"rdp","","",93,null],[12,"mxcsr","","",93,null],[12,"mxcr_mask","","",93,null],[12,"st_space","","",93,null],[12,"xmm_space","","",93,null],[3,"user_regs_struct","","",null,null],[12,"r15","","",94,null],[12,"r14","","",94,null],[12,"r13","","",94,null],[12,"r12","","",94,null],[12,"rbp","","",94,null],[12,"rbx","","",94,null],[12,"r11","","",94,null],[12,"r10","","",94,null],[12,"r9","","",94,null],[12,"r8","","",94,null],[12,"rax","","",94,null],[12,"rcx","","",94,null],[12,"rdx","","",94,null],[12,"rsi","","",94,null],[12,"rdi","","",94,null],[12,"orig_rax","","",94,null],[12,"rip","","",94,null],[12,"cs","","",94,null],[12,"eflags","","",94,null],[12,"rsp","","",94,null],[12,"ss","","",94,null],[12,"fs_base","","",94,null],[12,"gs_base","","",94,null],[12,"ds","","",94,null],[12,"es","","",94,null],[12,"fs","","",94,null],[12,"gs","","",94,null],[3,"user","","",null,null],[12,"regs","","",95,null],[12,"u_fpvalid","","",95,null],[12,"i387","","",95,null],[12,"u_tsize","","",95,null],[12,"u_dsize","","",95,null],[12,"u_ssize","","",95,null],[12,"start_code","","",95,null],[12,"start_stack","","",95,null],[12,"signal","","",95,null],[12,"u_ar0","","",95,null],[12,"u_fpstate","","",95,null],[12,"magic","","",95,null],[12,"u_comm","","",95,null],[12,"u_debugreg","","",95,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",96,null],[12,"fpregs","","",96,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",97,null],[12,"uc_link","","",97,null],[12,"uc_stack","","",97,null],[12,"uc_mcontext","","",97,null],[12,"uc_sigmask","","",97,null],[3,"ipc_perm","","",null,null],[12,"__key","","",98,null],[12,"uid","","",98,null],[12,"gid","","",98,null],[12,"cuid","","",98,null],[12,"cgid","","",98,null],[12,"mode","","",98,null],[12,"__seq","","",98,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",99,null],[12,"shm_segsz","","",99,null],[12,"shm_atime","","",99,null],[12,"shm_dtime","","",99,null],[12,"shm_ctime","","",99,null],[12,"shm_cpid","","",99,null],[12,"shm_lpid","","",99,null],[12,"shm_nattch","","",99,null],[3,"termios2","","",null,null],[12,"c_iflag","","",100,null],[12,"c_oflag","","",100,null],[12,"c_cflag","","",100,null],[12,"c_lflag","","",100,null],[12,"c_line","","",100,null],[12,"c_cc","","",100,null],[12,"c_ispeed","","",100,null],[12,"c_ospeed","","",100,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFCONTINUED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"QCMD","","",null,{"inputs":[{"name":"c_int"},{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_CLR","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"major","","",null,{"inputs":[{"name":"dev_t"}],"output":{"name":"c_uint"}}],[5,"minor","","",null,{"inputs":[{"name":"dev_t"}],"output":{"name":"c_uint"}}],[5,"makedev","","",null,{"inputs":[{"name":"c_uint"},{"name":"c_uint"}],"output":{"name":"dev_t"}}],[5,"NLA_ALIGN","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"wcstombs","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"openat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchown","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"seteuid","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"killpg","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"times","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_exit","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_init","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_rwlockattr_init","","",null,null],[5,"pthread_rwlockattr_destroy","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"res_init","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"gmtime","","",null,null],[5,"localtime","","",null,null],[5,"difftime","","",null,null],[5,"mknod","","",null,null],[5,"uname","","",null,null],[5,"gethostname","","",null,null],[5,"getservbyname","","",null,null],[5,"getprotobyname","","",null,null],[5,"getprotobynumber","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"readlink","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"sigprocmask","","",null,null],[5,"sigpending","","",null,null],[5,"timegm","","",null,null],[5,"getsid","","",null,null],[5,"sysconf","","",null,null],[5,"mkfifo","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfmakeraw","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"cfsetspeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcgetsid","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkdtemp","","",null,null],[5,"tmpnam","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"clock_settime","","",null,null],[5,"dirfd","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"pipe2","","",null,null],[5,"statfs","","",null,null],[5,"statfs64","","",null,null],[5,"fstatfs","","",null,null],[5,"fstatfs64","","",null,null],[5,"statvfs64","","",null,null],[5,"fstatvfs64","","",null,null],[5,"memrchr","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"fstatat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"openat64","","",null,null],[5,"pread64","","",null,null],[5,"preadv64","","",null,null],[5,"pwrite64","","",null,null],[5,"pwritev64","","",null,null],[5,"readdir64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"truncate64","","",null,null],[5,"fdopendir","","",null,null],[5,"mknodat","","",null,null],[5,"pthread_condattr_getclock","","",null,null],[5,"pthread_condattr_setclock","","",null,null],[5,"pthread_condattr_setpshared","","",null,null],[5,"accept4","","",null,null],[5,"pthread_mutexattr_setpshared","","",null,null],[5,"pthread_rwlockattr_getpshared","","",null,null],[5,"pthread_rwlockattr_setpshared","","",null,null],[5,"ptsname_r","","",null,null],[5,"clearenv","","",null,null],[5,"waitid","","",null,null],[5,"setreuid","","",null,null],[5,"setregid","","",null,null],[5,"getresuid","","",null,null],[5,"getresgid","","",null,null],[5,"acct","","",null,null],[5,"brk","","",null,null],[5,"sbrk","","",null,null],[5,"vfork","","",null,null],[5,"setresgid","","",null,null],[5,"setresuid","","",null,null],[5,"wait4","","",null,null],[5,"openpty","","",null,null],[5,"execvpe","","",null,null],[5,"fexecve","","",null,null],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"lio_listio","","",null,null],[5,"lutimes","","",null,null],[5,"setpwent","","",null,null],[5,"endpwent","","",null,null],[5,"getpwent","","",null,null],[5,"setgrent","","",null,null],[5,"endgrent","","",null,null],[5,"getgrent","","",null,null],[5,"setspent","","",null,null],[5,"endspent","","",null,null],[5,"getspent","","",null,null],[5,"getspnam","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"ftok","","",null,null],[5,"semget","","",null,null],[5,"semop","","",null,null],[5,"semctl","","",null,null],[5,"msgctl","","",null,null],[5,"msgget","","",null,null],[5,"msgrcv","","",null,null],[5,"msgsnd","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"timerfd_create","","",null,null],[5,"timerfd_gettime","","",null,null],[5,"timerfd_settime","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"pthread_setschedprio","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"reboot","","",null,null],[5,"setfsgid","","",null,null],[5,"setfsuid","","",null,null],[5,"mkfifoat","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"sync_file_range","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"mremap","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"remap_file_pages","","",null,null],[5,"recvfrom","","",null,null],[5,"mkstemps","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"bind","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"getdomainname","","",null,null],[5,"setdomainname","","",null,null],[5,"vhangup","","",null,null],[5,"sendmmsg","","",null,null],[5,"recvmmsg","","",null,null],[5,"sync","","",null,null],[5,"syscall","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_wait","","",null,null],[5,"epoll_ctl","","",null,null],[5,"pthread_getschedparam","","",null,null],[5,"unshare","","",null,null],[5,"umount","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"tee","","",null,null],[5,"settimeofday","","",null,null],[5,"splice","","",null,null],[5,"eventfd","","",null,null],[5,"sched_rr_get_interval","","",null,null],[5,"sem_timedwait","","",null,null],[5,"sched_setparam","","",null,null],[5,"setns","","",null,null],[5,"swapoff","","",null,null],[5,"vmsplice","","",null,null],[5,"mount","","",null,null],[5,"personality","","",null,null],[5,"prctl","","",null,null],[5,"sched_getparam","","",null,null],[5,"ppoll","","",null,null],[5,"pthread_mutex_timedlock","","",null,null],[5,"clone","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"clock_nanosleep","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"sethostname","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"pthread_condattr_getpshared","","",null,null],[5,"sysinfo","","",null,null],[5,"umount2","","",null,null],[5,"pthread_setschedparam","","",null,null],[5,"swapon","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sendfile","","",null,null],[5,"sigsuspend","","",null,null],[5,"getgrgid_r","","",null,null],[5,"sigaltstack","","",null,null],[5,"sem_close","","",null,null],[5,"getdtablesize","","",null,null],[5,"getgrnam_r","","",null,null],[5,"initgroups","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"sem_open","","",null,null],[5,"getgrnam","","",null,null],[5,"pthread_cancel","","",null,null],[5,"pthread_kill","","",null,null],[5,"sem_unlink","","",null,null],[5,"daemon","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"sigwait","","",null,null],[5,"pthread_atfork","","",null,null],[5,"getgrgid","","",null,null],[5,"getgrouplist","","",null,null],[5,"pthread_mutexattr_getpshared","","",null,null],[5,"popen","","",null,null],[5,"faccessat","","",null,null],[5,"pthread_create","","",null,null],[5,"dl_iterate_phdr","","",null,null],[5,"setmntent","","",null,null],[5,"getmntent","","",null,null],[5,"addmntent","","",null,null],[5,"endmntent","","",null,null],[5,"hasmntopt","","",null,null],[5,"posix_spawn","","",null,null],[5,"posix_spawnp","","",null,null],[5,"posix_spawnattr_init","","",null,null],[5,"posix_spawnattr_destroy","","",null,null],[5,"posix_spawnattr_getsigdefault","","",null,null],[5,"posix_spawnattr_setsigdefault","","",null,null],[5,"posix_spawnattr_getsigmask","","",null,null],[5,"posix_spawnattr_setsigmask","","",null,null],[5,"posix_spawnattr_getflags","","",null,null],[5,"posix_spawnattr_setflags","","",null,null],[5,"posix_spawnattr_getpgroup","","",null,null],[5,"posix_spawnattr_setpgroup","","",null,null],[5,"posix_spawnattr_getschedpolicy","","",null,null],[5,"posix_spawnattr_setschedpolicy","","",null,null],[5,"posix_spawnattr_getschedparam","","",null,null],[5,"posix_spawnattr_setschedparam","","",null,null],[5,"posix_spawn_file_actions_init","","",null,null],[5,"posix_spawn_file_actions_destroy","","",null,null],[5,"posix_spawn_file_actions_addopen","","",null,null],[5,"posix_spawn_file_actions_addclose","","",null,null],[5,"posix_spawn_file_actions_adddup2","","",null,null],[5,"utmpxname","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"getpt","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"pthread_rwlockattr_getkind_np","","",null,null],[5,"pthread_rwlockattr_setkind_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"mallinfo","","",null,null],[5,"malloc_usable_size","","",null,null],[5,"getauxval","","",null,null],[5,"getpwent_r","","",null,null],[5,"getgrent_r","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[5,"iopl","","",null,null],[5,"ioperm","","",null,null],[5,"sysctl","","",null,null],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"stat64"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"statfs64"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"statvfs64"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpxreg"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"_libc_xmmreg"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpstate"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"user_fpregs_struct"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"user_regs_struct"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"user"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"mcontext_t"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"ucontext_t"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"shmid_ds"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"termios2"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"sigset_t"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"sysinfo"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"msqid_ds"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"aiocb"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"__exit_status"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"__timeval"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"utmpx"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"sigaction"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"stack_t"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"glob64_t"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"statfs"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"msghdr"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"cmsghdr"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"termios"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"flock"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"sem_t"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"mallinfo"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"nlmsghdr"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"nlmsgerr"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"nl_pktinfo"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"nl_mmap_req"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"nl_mmap_hdr"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"nlattr"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"dirent"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"dirent64"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"rlimit64"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"glob_t"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlockattr_t"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"pthread_condattr_t"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"passwd"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"spwd"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"statvfs"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"dqblk"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"signalfd_siginfo"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"itimerspec"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"fsid_t"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"mq_attr"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"cpu_set_t"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"if_nameindex"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"msginfo"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"mmsghdr"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"sembuf"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"input_event"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"input_id"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"input_absinfo"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"input_keymap_entry"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"input_mask"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"ff_replay"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"ff_trigger"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"ff_envelope"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"ff_constant_effect"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"ff_ramp_effect"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"ff_condition_effect"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"ff_periodic_effect"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"ff_rumble_effect"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"ff_effect"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"dl_phdr_info"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"elf32_phdr"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"elf64_phdr"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"ucred"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"mntent"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"posix_spawn_file_actions_t"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"posix_spawnattr_t"}}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"genlmsghdr"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"addrinfo"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_nl"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"fd_set"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"sched_param"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"dl_info"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"epoll_event"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"utsname"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"lconv"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"sigevent"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utimbuf"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"rlimit"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"rusage"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"in_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"in6_addr"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"hostent"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"iovec"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"pollfd"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"winsize"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"linger"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"sigval"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"itimerval"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"tms"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"servent"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"protoent"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"clockid_t","","",null,null],[6,"key_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"idtype_t","","",null,null],[6,"loff_t","","",null,null],[6,"__u8","","",null,null],[6,"__u16","","",null,null],[6,"__s16","","",null,null],[6,"__u32","","",null,null],[6,"__s32","","",null,null],[6,"Elf32_Half","","",null,null],[6,"Elf32_Word","","",null,null],[6,"Elf32_Off","","",null,null],[6,"Elf32_Addr","","",null,null],[6,"Elf64_Half","","",null,null],[6,"Elf64_Word","","",null,null],[6,"Elf64_Off","","",null,null],[6,"Elf64_Addr","","",null,null],[6,"Elf64_Xword","","",null,null],[6,"__priority_which_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"msgqnum_t","","",null,null],[6,"msglen_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"__u64","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[17,"INT_MIN","","",null,null],[17,"INT_MAX","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_UNKNOWN","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"IFNAMSIZ","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"IPPROTO_ICMP","","",null,null],[17,"IPPROTO_ICMPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"INADDR_LOOPBACK","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_CANCELLK","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"F_ADD_SEALS","","",null,null],[17,"F_GET_SEALS","","",null,null],[17,"F_SEAL_SEAL","","",null,null],[17,"F_SEAL_SHRINK","","",null,null],[17,"F_SEAL_GROW","","",null,null],[17,"F_SEAL_WRITE","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"TIMER_ABSTIME","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SCM_CREDENTIALS","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"MADV_SOFT_OFFLINE","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_MASTER","","",null,null],[17,"IFF_SLAVE","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"IFF_PORTSEL","","",null,null],[17,"IFF_AUTOMEDIA","","",null,null],[17,"IFF_DYNAMIC","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_UDP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"SOL_ICMPV6","","",null,null],[17,"SOL_RAW","","",null,null],[17,"SOL_DECNET","","",null,null],[17,"SOL_X25","","",null,null],[17,"SOL_PACKET","","",null,null],[17,"SOL_ATM","","",null,null],[17,"SOL_AAL","","",null,null],[17,"SOL_IRDA","","",null,null],[17,"SOL_NETBEUI","","",null,null],[17,"SOL_LLC","","",null,null],[17,"SOL_DCCP","","",null,null],[17,"SOL_NETLINK","","",null,null],[17,"SOL_TIPC","","",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_AX25","","",null,null],[17,"AF_IPX","","",null,null],[17,"AF_APPLETALK","","",null,null],[17,"AF_NETROM","","",null,null],[17,"AF_BRIDGE","","",null,null],[17,"AF_ATMPVC","","",null,null],[17,"AF_X25","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_ROSE","","",null,null],[17,"AF_DECnet","","",null,null],[17,"AF_NETBEUI","","",null,null],[17,"AF_SECURITY","","",null,null],[17,"AF_KEY","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"AF_ROUTE","","",null,null],[17,"AF_PACKET","","",null,null],[17,"AF_ASH","","",null,null],[17,"AF_ECONET","","",null,null],[17,"AF_ATMSVC","","",null,null],[17,"AF_RDS","","",null,null],[17,"AF_SNA","","",null,null],[17,"AF_IRDA","","",null,null],[17,"AF_PPPOX","","",null,null],[17,"AF_WANPIPE","","",null,null],[17,"AF_LLC","","",null,null],[17,"AF_CAN","","",null,null],[17,"AF_TIPC","","",null,null],[17,"AF_BLUETOOTH","","",null,null],[17,"AF_IUCV","","",null,null],[17,"AF_RXRPC","","",null,null],[17,"AF_ISDN","","",null,null],[17,"AF_PHONET","","",null,null],[17,"AF_IEEE802154","","",null,null],[17,"AF_CAIF","","",null,null],[17,"AF_ALG","","",null,null],[17,"PF_UNSPEC","","",null,null],[17,"PF_UNIX","","",null,null],[17,"PF_LOCAL","","",null,null],[17,"PF_INET","","",null,null],[17,"PF_AX25","","",null,null],[17,"PF_IPX","","",null,null],[17,"PF_APPLETALK","","",null,null],[17,"PF_NETROM","","",null,null],[17,"PF_BRIDGE","","",null,null],[17,"PF_ATMPVC","","",null,null],[17,"PF_X25","","",null,null],[17,"PF_INET6","","",null,null],[17,"PF_ROSE","","",null,null],[17,"PF_DECnet","","",null,null],[17,"PF_NETBEUI","","",null,null],[17,"PF_SECURITY","","",null,null],[17,"PF_KEY","","",null,null],[17,"PF_NETLINK","","",null,null],[17,"PF_ROUTE","","",null,null],[17,"PF_PACKET","","",null,null],[17,"PF_ASH","","",null,null],[17,"PF_ECONET","","",null,null],[17,"PF_ATMSVC","","",null,null],[17,"PF_RDS","","",null,null],[17,"PF_SNA","","",null,null],[17,"PF_IRDA","","",null,null],[17,"PF_PPPOX","","",null,null],[17,"PF_WANPIPE","","",null,null],[17,"PF_LLC","","",null,null],[17,"PF_CAN","","",null,null],[17,"PF_TIPC","","",null,null],[17,"PF_BLUETOOTH","","",null,null],[17,"PF_IUCV","","",null,null],[17,"PF_RXRPC","","",null,null],[17,"PF_ISDN","","",null,null],[17,"PF_PHONET","","",null,null],[17,"PF_IEEE802154","","",null,null],[17,"PF_CAIF","","",null,null],[17,"PF_ALG","","",null,null],[17,"SOMAXCONN","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_DONTROUTE","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_WAITALL","","",null,null],[17,"MSG_FIN","","",null,null],[17,"MSG_SYN","","",null,null],[17,"MSG_CONFIRM","","",null,null],[17,"MSG_RST","","",null,null],[17,"MSG_ERRQUEUE","","",null,null],[17,"MSG_NOSIGNAL","","",null,null],[17,"MSG_MORE","","",null,null],[17,"MSG_WAITFORONE","","",null,null],[17,"MSG_FASTOPEN","","",null,null],[17,"MSG_CMSG_CLOEXEC","","",null,null],[17,"SCM_TIMESTAMP","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_UNICAST_HOPS","","",null,null],[17,"IPV6_MULTICAST_IF","","",null,null],[17,"IPV6_MULTICAST_HOPS","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"CR0","","",null,null],[17,"FF0","","",null,null],[17,"BS0","","",null,null],[17,"VT0","","",null,null],[17,"VERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VLNEXT","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"CS5","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHO","","",null,null],[17,"OCRNL","","",null,null],[17,"ONOCR","","",null,null],[17,"ONLRET","","",null,null],[17,"OFILL","","",null,null],[17,"OFDEL","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"CLONE_NEWCGROUP","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[17,"PTRACE_O_EXITKILL","","",null,null],[17,"PTRACE_O_SUSPEND_SECCOMP","","",null,null],[17,"PTRACE_O_MASK","","",null,null],[17,"PTRACE_EVENT_FORK","","",null,null],[17,"PTRACE_EVENT_VFORK","","",null,null],[17,"PTRACE_EVENT_CLONE","","",null,null],[17,"PTRACE_EVENT_EXEC","","",null,null],[17,"PTRACE_EVENT_VFORK_DONE","","",null,null],[17,"PTRACE_EVENT_EXIT","","",null,null],[17,"PTRACE_EVENT_SECCOMP","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"AT_REMOVEDIR","","",null,null],[17,"AT_SYMLINK_FOLLOW","","",null,null],[17,"AT_NO_AUTOMOUNT","","",null,null],[17,"AT_EMPTY_PATH","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"UTIME_OMIT","","",null,null],[17,"UTIME_NOW","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_PC_SYNC_IO","","",null,null],[17,"_PC_ASYNC_IO","","",null,null],[17,"_PC_PRIO_IO","","",null,null],[17,"_PC_SOCK_MAXBUF","","",null,null],[17,"_PC_FILESIZEBITS","","",null,null],[17,"_PC_REC_INCR_XFER_SIZE","","",null,null],[17,"_PC_REC_MAX_XFER_SIZE","","",null,null],[17,"_PC_REC_MIN_XFER_SIZE","","",null,null],[17,"_PC_REC_XFER_ALIGN","","",null,null],[17,"_PC_ALLOC_SIZE_MIN","","",null,null],[17,"_PC_SYMLINK_MAX","","",null,null],[17,"_PC_2_SYMLINKS","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_UIO_MAXIOV","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_PHYS_PAGES","","",null,null],[17,"_SC_AVPHYS_PAGES","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_PASS_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XOPEN_XPG2","","",null,null],[17,"_SC_XOPEN_XPG3","","",null,null],[17,"_SC_XOPEN_XPG4","","",null,null],[17,"_SC_NZERO","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LP64_OFF64","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_ADVISORY_INFO","","",null,null],[17,"_SC_BARRIERS","","",null,null],[17,"_SC_CLOCK_SELECTION","","",null,null],[17,"_SC_CPUTIME","","",null,null],[17,"_SC_THREAD_CPUTIME","","",null,null],[17,"_SC_MONOTONIC_CLOCK","","",null,null],[17,"_SC_READER_WRITER_LOCKS","","",null,null],[17,"_SC_SPIN_LOCKS","","",null,null],[17,"_SC_REGEXP","","",null,null],[17,"_SC_SHELL","","",null,null],[17,"_SC_SPAWN","","",null,null],[17,"_SC_SPORADIC_SERVER","","",null,null],[17,"_SC_THREAD_SPORADIC_SERVER","","",null,null],[17,"_SC_TIMEOUTS","","",null,null],[17,"_SC_TYPED_MEMORY_OBJECTS","","",null,null],[17,"_SC_2_PBS","","",null,null],[17,"_SC_2_PBS_ACCOUNTING","","",null,null],[17,"_SC_2_PBS_LOCATE","","",null,null],[17,"_SC_2_PBS_MESSAGE","","",null,null],[17,"_SC_2_PBS_TRACK","","",null,null],[17,"_SC_SYMLOOP_MAX","","",null,null],[17,"_SC_STREAMS","","",null,null],[17,"_SC_2_PBS_CHECKPOINT","","",null,null],[17,"_SC_V6_ILP32_OFF32","","",null,null],[17,"_SC_V6_ILP32_OFFBIG","","",null,null],[17,"_SC_V6_LP64_OFF64","","",null,null],[17,"_SC_V6_LPBIG_OFFBIG","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"_SC_TRACE","","",null,null],[17,"_SC_TRACE_EVENT_FILTER","","",null,null],[17,"_SC_TRACE_INHERIT","","",null,null],[17,"_SC_TRACE_LOG","","",null,null],[17,"_SC_IPV6","","",null,null],[17,"_SC_RAW_SOCKETS","","",null,null],[17,"_SC_V7_ILP32_OFF32","","",null,null],[17,"_SC_V7_ILP32_OFFBIG","","",null,null],[17,"_SC_V7_LP64_OFF64","","",null,null],[17,"_SC_V7_LPBIG_OFFBIG","","",null,null],[17,"_SC_SS_REPL_MAX","","",null,null],[17,"_SC_TRACE_EVENT_NAME_MAX","","",null,null],[17,"_SC_TRACE_NAME_MAX","","",null,null],[17,"_SC_TRACE_SYS_MAX","","",null,null],[17,"_SC_TRACE_USER_EVENT_MAX","","",null,null],[17,"_SC_XOPEN_STREAMS","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_PROTECT","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"IFF_LOWER_UP","","",null,null],[17,"IFF_DORMANT","","",null,null],[17,"IFF_ECHO","","",null,null],[17,"IFF_TUN","","",null,null],[17,"IFF_TAP","","",null,null],[17,"IFF_NO_PI","","",null,null],[17,"TUN_READQ_SIZE","","",null,null],[17,"TUN_TUN_DEV","","",null,null],[17,"TUN_TAP_DEV","","",null,null],[17,"TUN_TYPE_MASK","","",null,null],[17,"IFF_ONE_QUEUE","","",null,null],[17,"IFF_VNET_HDR","","",null,null],[17,"IFF_TUN_EXCL","","",null,null],[17,"IFF_MULTI_QUEUE","","",null,null],[17,"IFF_ATTACH_QUEUE","","",null,null],[17,"IFF_DETACH_QUEUE","","",null,null],[17,"IFF_PERSIST","","",null,null],[17,"IFF_NOFILTER","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"PTHREAD_PROCESS_PRIVATE","","",null,null],[17,"PTHREAD_PROCESS_SHARED","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"RENAME_NOREPLACE","","",null,null],[17,"RENAME_EXCHANGE","","",null,null],[17,"RENAME_WHITEOUT","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPPROTO_HOPOPTS","","Hop-by-hop option header",null,null],[17,"IPPROTO_IGMP","","group mgmt protocol",null,null],[17,"IPPROTO_IPIP","","for compatibility",null,null],[17,"IPPROTO_EGP","","exterior gateway protocol",null,null],[17,"IPPROTO_PUP","","pup",null,null],[17,"IPPROTO_IDP","","xns idp",null,null],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",null,null],[17,"IPPROTO_DCCP","","DCCP",null,null],[17,"IPPROTO_ROUTING","","IP6 routing header",null,null],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",null,null],[17,"IPPROTO_RSVP","","resource reservation",null,null],[17,"IPPROTO_GRE","","General Routing Encap.",null,null],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",null,null],[17,"IPPROTO_AH","","IP6 Auth Header",null,null],[17,"IPPROTO_NONE","","IP6 no next header",null,null],[17,"IPPROTO_DSTOPTS","","IP6 destination option",null,null],[17,"IPPROTO_MTP","","",null,null],[17,"IPPROTO_BEETPH","","",null,null],[17,"IPPROTO_ENCAP","","encapsulation header",null,null],[17,"IPPROTO_PIM","","Protocol indep. multicast",null,null],[17,"IPPROTO_COMP","","IP Payload Comp. Protocol",null,null],[17,"IPPROTO_SCTP","","SCTP",null,null],[17,"IPPROTO_MH","","",null,null],[17,"IPPROTO_UDPLITE","","",null,null],[17,"IPPROTO_MPLS","","",null,null],[17,"IPPROTO_RAW","","raw IP packet",null,null],[17,"IPPROTO_MAX","","",null,null],[17,"AF_IB","","",null,null],[17,"AF_MPLS","","",null,null],[17,"AF_NFC","","",null,null],[17,"AF_VSOCK","","",null,null],[17,"PF_IB","","",null,null],[17,"PF_MPLS","","",null,null],[17,"PF_NFC","","",null,null],[17,"PF_VSOCK","","",null,null],[17,"IPC_PRIVATE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"MSG_STAT","","",null,null],[17,"MSG_INFO","","",null,null],[17,"MSG_NOERROR","","",null,null],[17,"MSG_EXCEPT","","",null,null],[17,"MSG_COPY","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLEXCLUSIVE","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RB_AUTOBOOT","","",null,null],[17,"RB_HALT_SYSTEM","","",null,null],[17,"RB_ENABLE_CAD","","",null,null],[17,"RB_DISABLE_CAD","","",null,null],[17,"RB_POWER_OFF","","",null,null],[17,"RB_SW_SUSPEND","","",null,null],[17,"RB_KEXEC","","",null,null],[17,"AI_PASSIVE","","",null,null],[17,"AI_CANONNAME","","",null,null],[17,"AI_NUMERICHOST","","",null,null],[17,"AI_V4MAPPED","","",null,null],[17,"AI_ALL","","",null,null],[17,"AI_ADDRCONFIG","","",null,null],[17,"AI_NUMERICSERV","","",null,null],[17,"EAI_BADFLAGS","","",null,null],[17,"EAI_NONAME","","",null,null],[17,"EAI_AGAIN","","",null,null],[17,"EAI_FAIL","","",null,null],[17,"EAI_NODATA","","",null,null],[17,"EAI_FAMILY","","",null,null],[17,"EAI_SOCKTYPE","","",null,null],[17,"EAI_SERVICE","","",null,null],[17,"EAI_MEMORY","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"EAI_OVERFLOW","","",null,null],[17,"NI_NUMERICHOST","","",null,null],[17,"NI_NUMERICSERV","","",null,null],[17,"NI_NOFQDN","","",null,null],[17,"NI_NAMEREQD","","",null,null],[17,"NI_DGRAM","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",null,null],[17,"SYNC_FILE_RANGE_WRITE","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"MREMAP_MAYMOVE","","",null,null],[17,"MREMAP_FIXED","","",null,null],[17,"PR_SET_PDEATHSIG","","",null,null],[17,"PR_GET_PDEATHSIG","","",null,null],[17,"PR_GET_DUMPABLE","","",null,null],[17,"PR_SET_DUMPABLE","","",null,null],[17,"PR_GET_UNALIGN","","",null,null],[17,"PR_SET_UNALIGN","","",null,null],[17,"PR_UNALIGN_NOPRINT","","",null,null],[17,"PR_UNALIGN_SIGBUS","","",null,null],[17,"PR_GET_KEEPCAPS","","",null,null],[17,"PR_SET_KEEPCAPS","","",null,null],[17,"PR_GET_FPEMU","","",null,null],[17,"PR_SET_FPEMU","","",null,null],[17,"PR_FPEMU_NOPRINT","","",null,null],[17,"PR_FPEMU_SIGFPE","","",null,null],[17,"PR_GET_FPEXC","","",null,null],[17,"PR_SET_FPEXC","","",null,null],[17,"PR_FP_EXC_SW_ENABLE","","",null,null],[17,"PR_FP_EXC_DIV","","",null,null],[17,"PR_FP_EXC_OVF","","",null,null],[17,"PR_FP_EXC_UND","","",null,null],[17,"PR_FP_EXC_RES","","",null,null],[17,"PR_FP_EXC_INV","","",null,null],[17,"PR_FP_EXC_DISABLED","","",null,null],[17,"PR_FP_EXC_NONRECOV","","",null,null],[17,"PR_FP_EXC_ASYNC","","",null,null],[17,"PR_FP_EXC_PRECISE","","",null,null],[17,"PR_GET_TIMING","","",null,null],[17,"PR_SET_TIMING","","",null,null],[17,"PR_TIMING_STATISTICAL","","",null,null],[17,"PR_TIMING_TIMESTAMP","","",null,null],[17,"PR_SET_NAME","","",null,null],[17,"PR_GET_NAME","","",null,null],[17,"PR_GET_ENDIAN","","",null,null],[17,"PR_SET_ENDIAN","","",null,null],[17,"PR_ENDIAN_BIG","","",null,null],[17,"PR_ENDIAN_LITTLE","","",null,null],[17,"PR_ENDIAN_PPC_LITTLE","","",null,null],[17,"PR_GET_SECCOMP","","",null,null],[17,"PR_SET_SECCOMP","","",null,null],[17,"PR_CAPBSET_READ","","",null,null],[17,"PR_CAPBSET_DROP","","",null,null],[17,"PR_GET_TSC","","",null,null],[17,"PR_SET_TSC","","",null,null],[17,"PR_TSC_ENABLE","","",null,null],[17,"PR_TSC_SIGSEGV","","",null,null],[17,"PR_GET_SECUREBITS","","",null,null],[17,"PR_SET_SECUREBITS","","",null,null],[17,"PR_SET_TIMERSLACK","","",null,null],[17,"PR_GET_TIMERSLACK","","",null,null],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",null,null],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",null,null],[17,"PR_MCE_KILL","","",null,null],[17,"PR_MCE_KILL_CLEAR","","",null,null],[17,"PR_MCE_KILL_SET","","",null,null],[17,"PR_MCE_KILL_LATE","","",null,null],[17,"PR_MCE_KILL_EARLY","","",null,null],[17,"PR_MCE_KILL_DEFAULT","","",null,null],[17,"PR_MCE_KILL_GET","","",null,null],[17,"PR_SET_MM","","",null,null],[17,"PR_SET_MM_START_CODE","","",null,null],[17,"PR_SET_MM_END_CODE","","",null,null],[17,"PR_SET_MM_START_DATA","","",null,null],[17,"PR_SET_MM_END_DATA","","",null,null],[17,"PR_SET_MM_START_STACK","","",null,null],[17,"PR_SET_MM_START_BRK","","",null,null],[17,"PR_SET_MM_BRK","","",null,null],[17,"PR_SET_MM_ARG_START","","",null,null],[17,"PR_SET_MM_ARG_END","","",null,null],[17,"PR_SET_MM_ENV_START","","",null,null],[17,"PR_SET_MM_ENV_END","","",null,null],[17,"PR_SET_MM_AUXV","","",null,null],[17,"PR_SET_MM_EXE_FILE","","",null,null],[17,"PR_SET_MM_MAP","","",null,null],[17,"PR_SET_MM_MAP_SIZE","","",null,null],[17,"PR_SET_PTRACER","","",null,null],[17,"PR_SET_CHILD_SUBREAPER","","",null,null],[17,"PR_GET_CHILD_SUBREAPER","","",null,null],[17,"PR_SET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_TID_ADDRESS","","",null,null],[17,"PR_SET_THP_DISABLE","","",null,null],[17,"PR_GET_THP_DISABLE","","",null,null],[17,"PR_MPX_ENABLE_MANAGEMENT","","",null,null],[17,"PR_MPX_DISABLE_MANAGEMENT","","",null,null],[17,"PR_SET_FP_MODE","","",null,null],[17,"PR_GET_FP_MODE","","",null,null],[17,"PR_FP_MODE_FR","","",null,null],[17,"PR_FP_MODE_FRE","","",null,null],[17,"PR_CAP_AMBIENT","","",null,null],[17,"PR_CAP_AMBIENT_IS_SET","","",null,null],[17,"PR_CAP_AMBIENT_RAISE","","",null,null],[17,"PR_CAP_AMBIENT_LOWER","","",null,null],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",null,null],[17,"GRND_NONBLOCK","","",null,null],[17,"GRND_RANDOM","","",null,null],[17,"SECCOMP_MODE_DISABLED","","",null,null],[17,"SECCOMP_MODE_STRICT","","",null,null],[17,"SECCOMP_MODE_FILTER","","",null,null],[17,"ITIMER_REAL","","",null,null],[17,"ITIMER_VIRTUAL","","",null,null],[17,"ITIMER_PROF","","",null,null],[17,"TFD_CLOEXEC","","",null,null],[17,"TFD_NONBLOCK","","",null,null],[17,"TFD_TIMER_ABSTIME","","",null,null],[17,"XATTR_CREATE","","",null,null],[17,"XATTR_REPLACE","","",null,null],[17,"_POSIX_VDISABLE","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"FALLOC_FL_COLLAPSE_RANGE","","",null,null],[17,"FALLOC_FL_ZERO_RANGE","","",null,null],[17,"FALLOC_FL_INSERT_RANGE","","",null,null],[17,"FALLOC_FL_UNSHARE_RANGE","","",null,null],[17,"ENOATTR","","",null,null],[17,"SO_ORIGINAL_DST","","",null,null],[17,"IUTF8","","",null,null],[17,"CMSPAR","","",null,null],[17,"MFD_CLOEXEC","","",null,null],[17,"MFD_ALLOW_SEALING","","",null,null],[17,"PT_NULL","","",null,null],[17,"PT_LOAD","","",null,null],[17,"PT_DYNAMIC","","",null,null],[17,"PT_INTERP","","",null,null],[17,"PT_NOTE","","",null,null],[17,"PT_SHLIB","","",null,null],[17,"PT_PHDR","","",null,null],[17,"PT_TLS","","",null,null],[17,"PT_NUM","","",null,null],[17,"PT_LOOS","","",null,null],[17,"PT_GNU_EH_FRAME","","",null,null],[17,"PT_GNU_STACK","","",null,null],[17,"PT_GNU_RELRO","","",null,null],[17,"ETH_ALEN","","",null,null],[17,"ETH_HLEN","","",null,null],[17,"ETH_ZLEN","","",null,null],[17,"ETH_DATA_LEN","","",null,null],[17,"ETH_FRAME_LEN","","",null,null],[17,"ETH_FCS_LEN","","",null,null],[17,"ETH_P_LOOP","","",null,null],[17,"ETH_P_PUP","","",null,null],[17,"ETH_P_PUPAT","","",null,null],[17,"ETH_P_IP","","",null,null],[17,"ETH_P_X25","","",null,null],[17,"ETH_P_ARP","","",null,null],[17,"ETH_P_BPQ","","",null,null],[17,"ETH_P_IEEEPUP","","",null,null],[17,"ETH_P_IEEEPUPAT","","",null,null],[17,"ETH_P_BATMAN","","",null,null],[17,"ETH_P_DEC","","",null,null],[17,"ETH_P_DNA_DL","","",null,null],[17,"ETH_P_DNA_RC","","",null,null],[17,"ETH_P_DNA_RT","","",null,null],[17,"ETH_P_LAT","","",null,null],[17,"ETH_P_DIAG","","",null,null],[17,"ETH_P_CUST","","",null,null],[17,"ETH_P_SCA","","",null,null],[17,"ETH_P_TEB","","",null,null],[17,"ETH_P_RARP","","",null,null],[17,"ETH_P_ATALK","","",null,null],[17,"ETH_P_AARP","","",null,null],[17,"ETH_P_8021Q","","",null,null],[17,"ETH_P_IPX","","",null,null],[17,"ETH_P_IPV6","","",null,null],[17,"ETH_P_PAUSE","","",null,null],[17,"ETH_P_SLOW","","",null,null],[17,"ETH_P_WCCP","","",null,null],[17,"ETH_P_MPLS_UC","","",null,null],[17,"ETH_P_MPLS_MC","","",null,null],[17,"ETH_P_ATMMPOA","","",null,null],[17,"ETH_P_PPP_DISC","","",null,null],[17,"ETH_P_PPP_SES","","",null,null],[17,"ETH_P_LINK_CTL","","",null,null],[17,"ETH_P_ATMFATE","","",null,null],[17,"ETH_P_PAE","","",null,null],[17,"ETH_P_AOE","","",null,null],[17,"ETH_P_8021AD","","",null,null],[17,"ETH_P_802_EX1","","",null,null],[17,"ETH_P_TIPC","","",null,null],[17,"ETH_P_MACSEC","","",null,null],[17,"ETH_P_8021AH","","",null,null],[17,"ETH_P_MVRP","","",null,null],[17,"ETH_P_1588","","",null,null],[17,"ETH_P_PRP","","",null,null],[17,"ETH_P_FCOE","","",null,null],[17,"ETH_P_TDLS","","",null,null],[17,"ETH_P_FIP","","",null,null],[17,"ETH_P_80221","","",null,null],[17,"ETH_P_LOOPBACK","","",null,null],[17,"ETH_P_QINQ1","","",null,null],[17,"ETH_P_QINQ2","","",null,null],[17,"ETH_P_QINQ3","","",null,null],[17,"ETH_P_EDSA","","",null,null],[17,"ETH_P_AF_IUCV","","",null,null],[17,"ETH_P_802_3_MIN","","",null,null],[17,"ETH_P_802_3","","",null,null],[17,"ETH_P_AX25","","",null,null],[17,"ETH_P_ALL","","",null,null],[17,"ETH_P_802_2","","",null,null],[17,"ETH_P_SNAP","","",null,null],[17,"ETH_P_DDCMP","","",null,null],[17,"ETH_P_WAN_PPP","","",null,null],[17,"ETH_P_PPP_MP","","",null,null],[17,"ETH_P_LOCALTALK","","",null,null],[17,"ETH_P_CANFD","","",null,null],[17,"ETH_P_PPPTALK","","",null,null],[17,"ETH_P_TR_802_2","","",null,null],[17,"ETH_P_MOBITEX","","",null,null],[17,"ETH_P_CONTROL","","",null,null],[17,"ETH_P_IRDA","","",null,null],[17,"ETH_P_ECONET","","",null,null],[17,"ETH_P_HDLC","","",null,null],[17,"ETH_P_ARCNET","","",null,null],[17,"ETH_P_DSA","","",null,null],[17,"ETH_P_TRAILER","","",null,null],[17,"ETH_P_PHONET","","",null,null],[17,"ETH_P_IEEE802154","","",null,null],[17,"ETH_P_CAIF","","",null,null],[17,"POSIX_SPAWN_RESETIDS","","",null,null],[17,"POSIX_SPAWN_SETPGROUP","","",null,null],[17,"POSIX_SPAWN_SETSIGDEF","","",null,null],[17,"POSIX_SPAWN_SETSIGMASK","","",null,null],[17,"POSIX_SPAWN_SETSCHEDPARAM","","",null,null],[17,"POSIX_SPAWN_SETSCHEDULER","","",null,null],[17,"NLMSG_NOOP","","",null,null],[17,"NLMSG_ERROR","","",null,null],[17,"NLMSG_DONE","","",null,null],[17,"NLMSG_OVERRUN","","",null,null],[17,"NLMSG_MIN_TYPE","","",null,null],[17,"GENL_NAMSIZ","","",null,null],[17,"GENL_MIN_ID","","",null,null],[17,"GENL_MAX_ID","","",null,null],[17,"GENL_ADMIN_PERM","","",null,null],[17,"GENL_CMD_CAP_DO","","",null,null],[17,"GENL_CMD_CAP_DUMP","","",null,null],[17,"GENL_CMD_CAP_HASPOL","","",null,null],[17,"GENL_ID_CTRL","","",null,null],[17,"CTRL_CMD_UNSPEC","","",null,null],[17,"CTRL_CMD_NEWFAMILY","","",null,null],[17,"CTRL_CMD_DELFAMILY","","",null,null],[17,"CTRL_CMD_GETFAMILY","","",null,null],[17,"CTRL_CMD_NEWOPS","","",null,null],[17,"CTRL_CMD_DELOPS","","",null,null],[17,"CTRL_CMD_GETOPS","","",null,null],[17,"CTRL_CMD_NEWMCAST_GRP","","",null,null],[17,"CTRL_CMD_DELMCAST_GRP","","",null,null],[17,"CTRL_CMD_GETMCAST_GRP","","",null,null],[17,"CTRL_ATTR_UNSPEC","","",null,null],[17,"CTRL_ATTR_FAMILY_ID","","",null,null],[17,"CTRL_ATTR_FAMILY_NAME","","",null,null],[17,"CTRL_ATTR_VERSION","","",null,null],[17,"CTRL_ATTR_HDRSIZE","","",null,null],[17,"CTRL_ATTR_MAXATTR","","",null,null],[17,"CTRL_ATTR_OPS","","",null,null],[17,"CTRL_ATTR_MCAST_GROUPS","","",null,null],[17,"CTRL_ATTR_OP_UNSPEC","","",null,null],[17,"CTRL_ATTR_OP_ID","","",null,null],[17,"CTRL_ATTR_OP_FLAGS","","",null,null],[17,"CTRL_ATTR_MCAST_GRP_UNSPEC","","",null,null],[17,"CTRL_ATTR_MCAST_GRP_NAME","","",null,null],[17,"CTRL_ATTR_MCAST_GRP_ID","","",null,null],[17,"NF_DROP","","",null,null],[17,"NF_ACCEPT","","",null,null],[17,"NF_STOLEN","","",null,null],[17,"NF_QUEUE","","",null,null],[17,"NF_REPEAT","","",null,null],[17,"NF_STOP","","",null,null],[17,"NF_MAX_VERDICT","","",null,null],[17,"NF_VERDICT_MASK","","",null,null],[17,"NF_VERDICT_FLAG_QUEUE_BYPASS","","",null,null],[17,"NF_VERDICT_QMASK","","",null,null],[17,"NF_VERDICT_QBITS","","",null,null],[17,"NF_VERDICT_BITS","","",null,null],[17,"NF_INET_PRE_ROUTING","","",null,null],[17,"NF_INET_LOCAL_IN","","",null,null],[17,"NF_INET_FORWARD","","",null,null],[17,"NF_INET_LOCAL_OUT","","",null,null],[17,"NF_INET_POST_ROUTING","","",null,null],[17,"NF_INET_NUMHOOKS","","",null,null],[17,"NFPROTO_UNSPEC","","",null,null],[17,"NFPROTO_IPV4","","",null,null],[17,"NFPROTO_ARP","","",null,null],[17,"NFPROTO_BRIDGE","","",null,null],[17,"NFPROTO_IPV6","","",null,null],[17,"NFPROTO_DECNET","","",null,null],[17,"NFPROTO_NUMPROTO","","",null,null],[17,"NF_IP_PRE_ROUTING","","",null,null],[17,"NF_IP_LOCAL_IN","","",null,null],[17,"NF_IP_FORWARD","","",null,null],[17,"NF_IP_LOCAL_OUT","","",null,null],[17,"NF_IP_POST_ROUTING","","",null,null],[17,"NF_IP_NUMHOOKS","","",null,null],[17,"NF_IP_PRI_FIRST","","",null,null],[17,"NF_IP_PRI_CONNTRACK_DEFRAG","","",null,null],[17,"NF_IP_PRI_RAW","","",null,null],[17,"NF_IP_PRI_SELINUX_FIRST","","",null,null],[17,"NF_IP_PRI_CONNTRACK","","",null,null],[17,"NF_IP_PRI_MANGLE","","",null,null],[17,"NF_IP_PRI_NAT_DST","","",null,null],[17,"NF_IP_PRI_FILTER","","",null,null],[17,"NF_IP_PRI_SECURITY","","",null,null],[17,"NF_IP_PRI_NAT_SRC","","",null,null],[17,"NF_IP_PRI_SELINUX_LAST","","",null,null],[17,"NF_IP_PRI_CONNTRACK_HELPER","","",null,null],[17,"NF_IP_PRI_CONNTRACK_CONFIRM","","",null,null],[17,"NF_IP_PRI_LAST","","",null,null],[17,"NF_IP6_PRE_ROUTING","","",null,null],[17,"NF_IP6_LOCAL_IN","","",null,null],[17,"NF_IP6_FORWARD","","",null,null],[17,"NF_IP6_LOCAL_OUT","","",null,null],[17,"NF_IP6_POST_ROUTING","","",null,null],[17,"NF_IP6_NUMHOOKS","","",null,null],[17,"NF_IP6_PRI_FIRST","","",null,null],[17,"NF_IP6_PRI_CONNTRACK_DEFRAG","","",null,null],[17,"NF_IP6_PRI_RAW","","",null,null],[17,"NF_IP6_PRI_SELINUX_FIRST","","",null,null],[17,"NF_IP6_PRI_CONNTRACK","","",null,null],[17,"NF_IP6_PRI_MANGLE","","",null,null],[17,"NF_IP6_PRI_NAT_DST","","",null,null],[17,"NF_IP6_PRI_FILTER","","",null,null],[17,"NF_IP6_PRI_SECURITY","","",null,null],[17,"NF_IP6_PRI_NAT_SRC","","",null,null],[17,"NF_IP6_PRI_SELINUX_LAST","","",null,null],[17,"NF_IP6_PRI_CONNTRACK_HELPER","","",null,null],[17,"NF_IP6_PRI_LAST","","",null,null],[17,"__UT_LINESIZE","","",null,null],[17,"__UT_NAMESIZE","","",null,null],[17,"__UT_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOL_RXRPC","","",null,null],[17,"SOL_PPPOL2TP","","",null,null],[17,"SOL_BLUETOOTH","","",null,null],[17,"SOL_PNPIPE","","",null,null],[17,"SOL_RDS","","",null,null],[17,"SOL_IUCV","","",null,null],[17,"SOL_CAIF","","",null,null],[17,"SOL_ALG","","",null,null],[17,"SOL_NFC","","",null,null],[17,"MSG_TRYHARD","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOCK_DCCP","","",null,null],[17,"SOCK_PACKET","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"DCCP_SOCKOPT_PACKET_SIZE","","",null,null],[17,"DCCP_SOCKOPT_SERVICE","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_L","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_R","","",null,null],[17,"DCCP_SOCKOPT_GET_CUR_MPS","","",null,null],[17,"DCCP_SOCKOPT_SERVER_TIMEWAIT","","",null,null],[17,"DCCP_SOCKOPT_SEND_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_RECV_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_AVAILABLE_CCIDS","","",null,null],[17,"DCCP_SOCKOPT_CCID","","",null,null],[17,"DCCP_SOCKOPT_TX_CCID","","",null,null],[17,"DCCP_SOCKOPT_RX_CCID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_ID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_TXQLEN","","",null,null],[17,"DCCP_SOCKOPT_CCID_RX_INFO","","",null,null],[17,"DCCP_SOCKOPT_CCID_TX_INFO","","",null,null],[17,"DCCP_SERVICE_LIST_MAX_LEN","","maximum number of services provided on the same listening port",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGEV_THREAD_ID","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_EQUIV_CLASS_MAX","","",null,null],[17,"_SC_CHARCLASS_NAME_MAX","","",null,null],[17,"_SC_PII","","",null,null],[17,"_SC_PII_XTI","","",null,null],[17,"_SC_PII_SOCKET","","",null,null],[17,"_SC_PII_INTERNET","","",null,null],[17,"_SC_PII_OSI","","",null,null],[17,"_SC_POLL","","",null,null],[17,"_SC_SELECT","","",null,null],[17,"_SC_PII_INTERNET_STREAM","","",null,null],[17,"_SC_PII_INTERNET_DGRAM","","",null,null],[17,"_SC_PII_OSI_COTS","","",null,null],[17,"_SC_PII_OSI_CLTS","","",null,null],[17,"_SC_PII_OSI_M","","",null,null],[17,"_SC_T_IOV_MAX","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"_SC_CHAR_BIT","","",null,null],[17,"_SC_CHAR_MAX","","",null,null],[17,"_SC_CHAR_MIN","","",null,null],[17,"_SC_INT_MAX","","",null,null],[17,"_SC_INT_MIN","","",null,null],[17,"_SC_LONG_BIT","","",null,null],[17,"_SC_WORD_BIT","","",null,null],[17,"_SC_MB_LEN_MAX","","",null,null],[17,"_SC_SSIZE_MAX","","",null,null],[17,"_SC_SCHAR_MAX","","",null,null],[17,"_SC_SCHAR_MIN","","",null,null],[17,"_SC_SHRT_MAX","","",null,null],[17,"_SC_SHRT_MIN","","",null,null],[17,"_SC_UCHAR_MAX","","",null,null],[17,"_SC_UINT_MAX","","",null,null],[17,"_SC_ULONG_MAX","","",null,null],[17,"_SC_USHRT_MAX","","",null,null],[17,"_SC_NL_ARGMAX","","",null,null],[17,"_SC_NL_LANGMAX","","",null,null],[17,"_SC_NL_MSGMAX","","",null,null],[17,"_SC_NL_NMAX","","",null,null],[17,"_SC_NL_SETMAX","","",null,null],[17,"_SC_NL_TEXTMAX","","",null,null],[17,"_SC_BASE","","",null,null],[17,"_SC_C_LANG_SUPPORT","","",null,null],[17,"_SC_C_LANG_SUPPORT_R","","",null,null],[17,"_SC_DEVICE_IO","","",null,null],[17,"_SC_DEVICE_SPECIFIC","","",null,null],[17,"_SC_DEVICE_SPECIFIC_R","","",null,null],[17,"_SC_FD_MGMT","","",null,null],[17,"_SC_FIFO","","",null,null],[17,"_SC_PIPE","","",null,null],[17,"_SC_FILE_ATTRIBUTES","","",null,null],[17,"_SC_FILE_LOCKING","","",null,null],[17,"_SC_FILE_SYSTEM","","",null,null],[17,"_SC_MULTI_PROCESS","","",null,null],[17,"_SC_SINGLE_PROCESS","","",null,null],[17,"_SC_NETWORKING","","",null,null],[17,"_SC_REGEX_VERSION","","",null,null],[17,"_SC_SIGNALS","","",null,null],[17,"_SC_SYSTEM_DATABASE","","",null,null],[17,"_SC_SYSTEM_DATABASE_R","","",null,null],[17,"_SC_USER_GROUPS","","",null,null],[17,"_SC_USER_GROUPS_R","","",null,null],[17,"_SC_LEVEL1_ICACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_ICACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_ICACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_DCACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL2_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL3_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL4_CACHE_LINESIZE","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"LINUX_REBOOT_MAGIC1","","",null,null],[17,"LINUX_REBOOT_MAGIC2","","",null,null],[17,"LINUX_REBOOT_MAGIC2A","","",null,null],[17,"LINUX_REBOOT_MAGIC2B","","",null,null],[17,"LINUX_REBOOT_MAGIC2C","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART","","",null,null],[17,"LINUX_REBOOT_CMD_HALT","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_ON","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART2","","",null,null],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",null,null],[17,"LINUX_REBOOT_CMD_KEXEC","","",null,null],[17,"NETLINK_ROUTE","","",null,null],[17,"NETLINK_UNUSED","","",null,null],[17,"NETLINK_USERSOCK","","",null,null],[17,"NETLINK_FIREWALL","","",null,null],[17,"NETLINK_SOCK_DIAG","","",null,null],[17,"NETLINK_NFLOG","","",null,null],[17,"NETLINK_XFRM","","",null,null],[17,"NETLINK_SELINUX","","",null,null],[17,"NETLINK_ISCSI","","",null,null],[17,"NETLINK_AUDIT","","",null,null],[17,"NETLINK_FIB_LOOKUP","","",null,null],[17,"NETLINK_CONNECTOR","","",null,null],[17,"NETLINK_NETFILTER","","",null,null],[17,"NETLINK_IP6_FW","","",null,null],[17,"NETLINK_DNRTMSG","","",null,null],[17,"NETLINK_KOBJECT_UEVENT","","",null,null],[17,"NETLINK_GENERIC","","",null,null],[17,"NETLINK_SCSITRANSPORT","","",null,null],[17,"NETLINK_ECRYPTFS","","",null,null],[17,"NETLINK_RDMA","","",null,null],[17,"NETLINK_CRYPTO","","",null,null],[17,"NETLINK_INET_DIAG","","",null,null],[17,"MAX_LINKS","","",null,null],[17,"NLM_F_REQUEST","","",null,null],[17,"NLM_F_MULTI","","",null,null],[17,"NLM_F_ACK","","",null,null],[17,"NLM_F_ECHO","","",null,null],[17,"NLM_F_DUMP_INTR","","",null,null],[17,"NLM_F_DUMP_FILTERED","","",null,null],[17,"NLM_F_ROOT","","",null,null],[17,"NLM_F_MATCH","","",null,null],[17,"NLM_F_ATOMIC","","",null,null],[17,"NLM_F_DUMP","","",null,null],[17,"NLM_F_REPLACE","","",null,null],[17,"NLM_F_EXCL","","",null,null],[17,"NLM_F_CREATE","","",null,null],[17,"NLM_F_APPEND","","",null,null],[17,"NETLINK_ADD_MEMBERSHIP","","",null,null],[17,"NETLINK_DROP_MEMBERSHIP","","",null,null],[17,"NETLINK_PKTINFO","","",null,null],[17,"NETLINK_BROADCAST_ERROR","","",null,null],[17,"NETLINK_NO_ENOBUFS","","",null,null],[17,"NETLINK_RX_RING","","",null,null],[17,"NETLINK_TX_RING","","",null,null],[17,"NETLINK_LISTEN_ALL_NSID","","",null,null],[17,"NETLINK_LIST_MEMBERSHIPS","","",null,null],[17,"NETLINK_CAP_ACK","","",null,null],[17,"NLA_F_NESTED","","",null,null],[17,"NLA_F_NET_BYTEORDER","","",null,null],[17,"NLA_TYPE_MASK","","",null,null],[17,"NLA_ALIGNTO","","",null,null],[17,"GENL_UNS_ADMIN_PERM","","",null,null],[17,"GENL_ID_VFS_DQUOT","","",null,null],[17,"GENL_ID_PMCRAID","","",null,null],[17,"TIOCM_LE","","",null,null],[17,"TIOCM_DTR","","",null,null],[17,"TIOCM_RTS","","",null,null],[17,"TIOCM_ST","","",null,null],[17,"TIOCM_SR","","",null,null],[17,"TIOCM_CTS","","",null,null],[17,"TIOCM_CAR","","",null,null],[17,"TIOCM_RNG","","",null,null],[17,"TIOCM_DSR","","",null,null],[17,"TIOCM_CD","","",null,null],[17,"TIOCM_RI","","",null,null],[17,"NF_NETDEV_INGRESS","","",null,null],[17,"NF_NETDEV_NUMHOOKS","","",null,null],[17,"NFPROTO_INET","","",null,null],[17,"NFPROTO_NETDEV","","",null,null],[17,"NFT_TABLE_MAXNAMELEN","","",null,null],[17,"NFT_CHAIN_MAXNAMELEN","","",null,null],[17,"NFT_SET_MAXNAMELEN","","",null,null],[17,"NFT_OBJ_MAXNAMELEN","","",null,null],[17,"NFT_USERDATA_MAXLEN","","",null,null],[17,"NFT_REG_VERDICT","","",null,null],[17,"NFT_REG_1","","",null,null],[17,"NFT_REG_2","","",null,null],[17,"NFT_REG_3","","",null,null],[17,"NFT_REG_4","","",null,null],[17,"__NFT_REG_MAX","","",null,null],[17,"NFT_REG32_00","","",null,null],[17,"NFT_REG32_01","","",null,null],[17,"NFT_REG32_02","","",null,null],[17,"NFT_REG32_03","","",null,null],[17,"NFT_REG32_04","","",null,null],[17,"NFT_REG32_05","","",null,null],[17,"NFT_REG32_06","","",null,null],[17,"NFT_REG32_07","","",null,null],[17,"NFT_REG32_08","","",null,null],[17,"NFT_REG32_09","","",null,null],[17,"NFT_REG32_10","","",null,null],[17,"NFT_REG32_11","","",null,null],[17,"NFT_REG32_12","","",null,null],[17,"NFT_REG32_13","","",null,null],[17,"NFT_REG32_14","","",null,null],[17,"NFT_REG32_15","","",null,null],[17,"NFT_REG_SIZE","","",null,null],[17,"NFT_REG32_SIZE","","",null,null],[17,"NFT_CONTINUE","","",null,null],[17,"NFT_BREAK","","",null,null],[17,"NFT_JUMP","","",null,null],[17,"NFT_GOTO","","",null,null],[17,"NFT_RETURN","","",null,null],[17,"NFT_MSG_NEWTABLE","","",null,null],[17,"NFT_MSG_GETTABLE","","",null,null],[17,"NFT_MSG_DELTABLE","","",null,null],[17,"NFT_MSG_NEWCHAIN","","",null,null],[17,"NFT_MSG_GETCHAIN","","",null,null],[17,"NFT_MSG_DELCHAIN","","",null,null],[17,"NFT_MSG_NEWRULE","","",null,null],[17,"NFT_MSG_GETRULE","","",null,null],[17,"NFT_MSG_DELRULE","","",null,null],[17,"NFT_MSG_NEWSET","","",null,null],[17,"NFT_MSG_GETSET","","",null,null],[17,"NFT_MSG_DELSET","","",null,null],[17,"NFT_MSG_NEWSETELEM","","",null,null],[17,"NFT_MSG_GETSETELEM","","",null,null],[17,"NFT_MSG_DELSETELEM","","",null,null],[17,"NFT_MSG_NEWGEN","","",null,null],[17,"NFT_MSG_GETGEN","","",null,null],[17,"NFT_MSG_TRACE","","",null,null],[17,"NFT_MSG_NEWOBJ","","",null,null],[17,"NFT_MSG_GETOBJ","","",null,null],[17,"NFT_MSG_DELOBJ","","",null,null],[17,"NFT_MSG_GETOBJ_RESET","","",null,null],[17,"NFT_MSG_MAX","","",null,null],[17,"NFT_SET_ANONYMOUS","","",null,null],[17,"NFT_SET_CONSTANT","","",null,null],[17,"NFT_SET_INTERVAL","","",null,null],[17,"NFT_SET_MAP","","",null,null],[17,"NFT_SET_TIMEOUT","","",null,null],[17,"NFT_SET_EVAL","","",null,null],[17,"NFT_SET_POL_PERFORMANCE","","",null,null],[17,"NFT_SET_POL_MEMORY","","",null,null],[17,"NFT_SET_ELEM_INTERVAL_END","","",null,null],[17,"NFT_DATA_VALUE","","",null,null],[17,"NFT_DATA_VERDICT","","",null,null],[17,"NFT_DATA_RESERVED_MASK","","",null,null],[17,"NFT_DATA_VALUE_MAXLEN","","",null,null],[17,"NFT_BYTEORDER_NTOH","","",null,null],[17,"NFT_BYTEORDER_HTON","","",null,null],[17,"NFT_CMP_EQ","","",null,null],[17,"NFT_CMP_NEQ","","",null,null],[17,"NFT_CMP_LT","","",null,null],[17,"NFT_CMP_LTE","","",null,null],[17,"NFT_CMP_GT","","",null,null],[17,"NFT_CMP_GTE","","",null,null],[17,"NFT_RANGE_EQ","","",null,null],[17,"NFT_RANGE_NEQ","","",null,null],[17,"NFT_LOOKUP_F_INV","","",null,null],[17,"NFT_DYNSET_OP_ADD","","",null,null],[17,"NFT_DYNSET_OP_UPDATE","","",null,null],[17,"NFT_DYNSET_F_INV","","",null,null],[17,"NFT_PAYLOAD_LL_HEADER","","",null,null],[17,"NFT_PAYLOAD_NETWORK_HEADER","","",null,null],[17,"NFT_PAYLOAD_TRANSPORT_HEADER","","",null,null],[17,"NFT_PAYLOAD_CSUM_NONE","","",null,null],[17,"NFT_PAYLOAD_CSUM_INET","","",null,null],[17,"NFT_META_LEN","","",null,null],[17,"NFT_META_PROTOCOL","","",null,null],[17,"NFT_META_PRIORITY","","",null,null],[17,"NFT_META_MARK","","",null,null],[17,"NFT_META_IIF","","",null,null],[17,"NFT_META_OIF","","",null,null],[17,"NFT_META_IIFNAME","","",null,null],[17,"NFT_META_OIFNAME","","",null,null],[17,"NFT_META_IIFTYPE","","",null,null],[17,"NFT_META_OIFTYPE","","",null,null],[17,"NFT_META_SKUID","","",null,null],[17,"NFT_META_SKGID","","",null,null],[17,"NFT_META_NFTRACE","","",null,null],[17,"NFT_META_RTCLASSID","","",null,null],[17,"NFT_META_SECMARK","","",null,null],[17,"NFT_META_NFPROTO","","",null,null],[17,"NFT_META_L4PROTO","","",null,null],[17,"NFT_META_BRI_IIFNAME","","",null,null],[17,"NFT_META_BRI_OIFNAME","","",null,null],[17,"NFT_META_PKTTYPE","","",null,null],[17,"NFT_META_CPU","","",null,null],[17,"NFT_META_IIFGROUP","","",null,null],[17,"NFT_META_OIFGROUP","","",null,null],[17,"NFT_META_CGROUP","","",null,null],[17,"NFT_META_PRANDOM","","",null,null],[17,"NFT_CT_STATE","","",null,null],[17,"NFT_CT_DIRECTION","","",null,null],[17,"NFT_CT_STATUS","","",null,null],[17,"NFT_CT_MARK","","",null,null],[17,"NFT_CT_SECMARK","","",null,null],[17,"NFT_CT_EXPIRATION","","",null,null],[17,"NFT_CT_HELPER","","",null,null],[17,"NFT_CT_L3PROTOCOL","","",null,null],[17,"NFT_CT_SRC","","",null,null],[17,"NFT_CT_DST","","",null,null],[17,"NFT_CT_PROTOCOL","","",null,null],[17,"NFT_CT_PROTO_SRC","","",null,null],[17,"NFT_CT_PROTO_DST","","",null,null],[17,"NFT_CT_LABELS","","",null,null],[17,"NFT_CT_PKTS","","",null,null],[17,"NFT_CT_BYTES","","",null,null],[17,"NFT_LIMIT_PKTS","","",null,null],[17,"NFT_LIMIT_PKT_BYTES","","",null,null],[17,"NFT_LIMIT_F_INV","","",null,null],[17,"NFT_QUEUE_FLAG_BYPASS","","",null,null],[17,"NFT_QUEUE_FLAG_CPU_FANOUT","","",null,null],[17,"NFT_QUEUE_FLAG_MASK","","",null,null],[17,"NFT_QUOTA_F_INV","","",null,null],[17,"NFT_REJECT_ICMP_UNREACH","","",null,null],[17,"NFT_REJECT_TCP_RST","","",null,null],[17,"NFT_REJECT_ICMPX_UNREACH","","",null,null],[17,"NFT_REJECT_ICMPX_NO_ROUTE","","",null,null],[17,"NFT_REJECT_ICMPX_PORT_UNREACH","","",null,null],[17,"NFT_REJECT_ICMPX_HOST_UNREACH","","",null,null],[17,"NFT_REJECT_ICMPX_ADMIN_PROHIBITED","","",null,null],[17,"NFT_NAT_SNAT","","",null,null],[17,"NFT_NAT_DNAT","","",null,null],[17,"NFT_TRACETYPE_UNSPEC","","",null,null],[17,"NFT_TRACETYPE_POLICY","","",null,null],[17,"NFT_TRACETYPE_RETURN","","",null,null],[17,"NFT_TRACETYPE_RULE","","",null,null],[17,"NFT_NG_INCREMENTAL","","",null,null],[17,"NFT_NG_RANDOM","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCKATTR_T","","",null,null],[17,"O_LARGEFILE","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"O_NOATIME","","",null,null],[17,"O_PATH","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_NO_CHECK","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_SECURITY_AUTHENTICATION","","",null,null],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",null,null],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_ATTACH_FILTER","","",null,null],[17,"SO_DETACH_FILTER","","",null,null],[17,"SO_GET_FILTER","","",null,null],[17,"SO_PEERNAME","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_PEERSEC","","",null,null],[17,"SO_PASSSEC","","",null,null],[17,"SO_TIMESTAMPNS","","",null,null],[17,"SCM_TIMESTAMPNS","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_TIMESTAMPING","","",null,null],[17,"SCM_TIMESTAMPING","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_WIFI_STATUS","","",null,null],[17,"SCM_WIFI_STATUS","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_NOFCS","","",null,null],[17,"SO_LOCK_FILTER","","",null,null],[17,"SO_SELECT_ERR_QUEUE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"SO_MAX_PACING_RATE","","",null,null],[17,"SO_BPF_EXTENSIONS","","",null,null],[17,"SO_INCOMING_CPU","","",null,null],[17,"SO_ATTACH_BPF","","",null,null],[17,"SO_DETACH_BPF","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCCONS","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"NCCS","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_PEEKSIGINFO_SHARED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"MINSIGSTKSZ","","",null,null],[17,"CBAUD","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF1","","",null,null],[17,"BS1","","",null,null],[17,"VT1","","",null,null],[17,"VWERASE","","",null,null],[17,"VREPRINT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CIBAUD","","",null,null],[17,"CBAUDEX","","",null,null],[17,"VSWTC","","",null,null],[17,"OLCUC","","",null,null],[17,"NLDLY","","",null,null],[17,"CRDLY","","",null,null],[17,"TABDLY","","",null,null],[17,"BSDLY","","",null,null],[17,"FFDLY","","",null,null],[17,"VTDLY","","",null,null],[17,"XTABS","","",null,null],[17,"B0","","",null,null],[17,"B50","","",null,null],[17,"B75","","",null,null],[17,"B110","","",null,null],[17,"B134","","",null,null],[17,"B150","","",null,null],[17,"B200","","",null,null],[17,"B300","","",null,null],[17,"B600","","",null,null],[17,"B1200","","",null,null],[17,"B1800","","",null,null],[17,"B2400","","",null,null],[17,"B4800","","",null,null],[17,"B9600","","",null,null],[17,"B19200","","",null,null],[17,"B38400","","",null,null],[17,"EXTA","","",null,null],[17,"EXTB","","",null,null],[17,"BOTHER","","",null,null],[17,"B57600","","",null,null],[17,"B115200","","",null,null],[17,"B230400","","",null,null],[17,"B460800","","",null,null],[17,"B500000","","",null,null],[17,"B576000","","",null,null],[17,"B921600","","",null,null],[17,"B1000000","","",null,null],[17,"B1152000","","",null,null],[17,"B1500000","","",null,null],[17,"B2000000","","",null,null],[17,"B2500000","","",null,null],[17,"B3000000","","",null,null],[17,"B3500000","","",null,null],[17,"B4000000","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"EXTPROC","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"FIONREAD","","",null,null],[17,"R15","","",null,null],[17,"R14","","",null,null],[17,"R13","","",null,null],[17,"R12","","",null,null],[17,"RBP","","",null,null],[17,"RBX","","",null,null],[17,"R11","","",null,null],[17,"R10","","",null,null],[17,"R9","","",null,null],[17,"R8","","",null,null],[17,"RAX","","",null,null],[17,"RCX","","",null,null],[17,"RDX","","",null,null],[17,"RSI","","",null,null],[17,"RDI","","",null,null],[17,"ORIG_RAX","","",null,null],[17,"RIP","","",null,null],[17,"CS","","",null,null],[17,"EFLAGS","","",null,null],[17,"RSP","","",null,null],[17,"SS","","",null,null],[17,"FS_BASE","","",null,null],[17,"GS_BASE","","",null,null],[17,"DS","","",null,null],[17,"ES","","",null,null],[17,"FS","","",null,null],[17,"GS","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"SYS_read","","",null,null],[17,"SYS_write","","",null,null],[17,"SYS_open","","",null,null],[17,"SYS_close","","",null,null],[17,"SYS_stat","","",null,null],[17,"SYS_fstat","","",null,null],[17,"SYS_lstat","","",null,null],[17,"SYS_poll","","",null,null],[17,"SYS_lseek","","",null,null],[17,"SYS_mmap","","",null,null],[17,"SYS_mprotect","","",null,null],[17,"SYS_munmap","","",null,null],[17,"SYS_brk","","",null,null],[17,"SYS_rt_sigaction","","",null,null],[17,"SYS_rt_sigprocmask","","",null,null],[17,"SYS_rt_sigreturn","","",null,null],[17,"SYS_ioctl","","",null,null],[17,"SYS_pread64","","",null,null],[17,"SYS_pwrite64","","",null,null],[17,"SYS_readv","","",null,null],[17,"SYS_writev","","",null,null],[17,"SYS_access","","",null,null],[17,"SYS_pipe","","",null,null],[17,"SYS_select","","",null,null],[17,"SYS_sched_yield","","",null,null],[17,"SYS_mremap","","",null,null],[17,"SYS_msync","","",null,null],[17,"SYS_mincore","","",null,null],[17,"SYS_madvise","","",null,null],[17,"SYS_shmget","","",null,null],[17,"SYS_shmat","","",null,null],[17,"SYS_shmctl","","",null,null],[17,"SYS_dup","","",null,null],[17,"SYS_dup2","","",null,null],[17,"SYS_pause","","",null,null],[17,"SYS_nanosleep","","",null,null],[17,"SYS_getitimer","","",null,null],[17,"SYS_alarm","","",null,null],[17,"SYS_setitimer","","",null,null],[17,"SYS_getpid","","",null,null],[17,"SYS_sendfile","","",null,null],[17,"SYS_socket","","",null,null],[17,"SYS_connect","","",null,null],[17,"SYS_accept","","",null,null],[17,"SYS_sendto","","",null,null],[17,"SYS_recvfrom","","",null,null],[17,"SYS_sendmsg","","",null,null],[17,"SYS_recvmsg","","",null,null],[17,"SYS_shutdown","","",null,null],[17,"SYS_bind","","",null,null],[17,"SYS_listen","","",null,null],[17,"SYS_getsockname","","",null,null],[17,"SYS_getpeername","","",null,null],[17,"SYS_socketpair","","",null,null],[17,"SYS_setsockopt","","",null,null],[17,"SYS_getsockopt","","",null,null],[17,"SYS_clone","","",null,null],[17,"SYS_fork","","",null,null],[17,"SYS_vfork","","",null,null],[17,"SYS_execve","","",null,null],[17,"SYS_exit","","",null,null],[17,"SYS_wait4","","",null,null],[17,"SYS_kill","","",null,null],[17,"SYS_uname","","",null,null],[17,"SYS_semget","","",null,null],[17,"SYS_semop","","",null,null],[17,"SYS_semctl","","",null,null],[17,"SYS_shmdt","","",null,null],[17,"SYS_msgget","","",null,null],[17,"SYS_msgsnd","","",null,null],[17,"SYS_msgrcv","","",null,null],[17,"SYS_msgctl","","",null,null],[17,"SYS_fcntl","","",null,null],[17,"SYS_flock","","",null,null],[17,"SYS_fsync","","",null,null],[17,"SYS_fdatasync","","",null,null],[17,"SYS_truncate","","",null,null],[17,"SYS_ftruncate","","",null,null],[17,"SYS_getdents","","",null,null],[17,"SYS_getcwd","","",null,null],[17,"SYS_chdir","","",null,null],[17,"SYS_fchdir","","",null,null],[17,"SYS_rename","","",null,null],[17,"SYS_mkdir","","",null,null],[17,"SYS_rmdir","","",null,null],[17,"SYS_creat","","",null,null],[17,"SYS_link","","",null,null],[17,"SYS_unlink","","",null,null],[17,"SYS_symlink","","",null,null],[17,"SYS_readlink","","",null,null],[17,"SYS_chmod","","",null,null],[17,"SYS_fchmod","","",null,null],[17,"SYS_chown","","",null,null],[17,"SYS_fchown","","",null,null],[17,"SYS_lchown","","",null,null],[17,"SYS_umask","","",null,null],[17,"SYS_gettimeofday","","",null,null],[17,"SYS_getrlimit","","",null,null],[17,"SYS_getrusage","","",null,null],[17,"SYS_sysinfo","","",null,null],[17,"SYS_times","","",null,null],[17,"SYS_ptrace","","",null,null],[17,"SYS_getuid","","",null,null],[17,"SYS_syslog","","",null,null],[17,"SYS_getgid","","",null,null],[17,"SYS_setuid","","",null,null],[17,"SYS_setgid","","",null,null],[17,"SYS_geteuid","","",null,null],[17,"SYS_getegid","","",null,null],[17,"SYS_setpgid","","",null,null],[17,"SYS_getppid","","",null,null],[17,"SYS_getpgrp","","",null,null],[17,"SYS_setsid","","",null,null],[17,"SYS_setreuid","","",null,null],[17,"SYS_setregid","","",null,null],[17,"SYS_getgroups","","",null,null],[17,"SYS_setgroups","","",null,null],[17,"SYS_setresuid","","",null,null],[17,"SYS_getresuid","","",null,null],[17,"SYS_setresgid","","",null,null],[17,"SYS_getresgid","","",null,null],[17,"SYS_getpgid","","",null,null],[17,"SYS_setfsuid","","",null,null],[17,"SYS_setfsgid","","",null,null],[17,"SYS_getsid","","",null,null],[17,"SYS_capget","","",null,null],[17,"SYS_capset","","",null,null],[17,"SYS_rt_sigpending","","",null,null],[17,"SYS_rt_sigtimedwait","","",null,null],[17,"SYS_rt_sigqueueinfo","","",null,null],[17,"SYS_rt_sigsuspend","","",null,null],[17,"SYS_sigaltstack","","",null,null],[17,"SYS_utime","","",null,null],[17,"SYS_mknod","","",null,null],[17,"SYS_uselib","","",null,null],[17,"SYS_personality","","",null,null],[17,"SYS_ustat","","",null,null],[17,"SYS_statfs","","",null,null],[17,"SYS_fstatfs","","",null,null],[17,"SYS_sysfs","","",null,null],[17,"SYS_getpriority","","",null,null],[17,"SYS_setpriority","","",null,null],[17,"SYS_sched_setparam","","",null,null],[17,"SYS_sched_getparam","","",null,null],[17,"SYS_sched_setscheduler","","",null,null],[17,"SYS_sched_getscheduler","","",null,null],[17,"SYS_sched_get_priority_max","","",null,null],[17,"SYS_sched_get_priority_min","","",null,null],[17,"SYS_sched_rr_get_interval","","",null,null],[17,"SYS_mlock","","",null,null],[17,"SYS_munlock","","",null,null],[17,"SYS_mlockall","","",null,null],[17,"SYS_munlockall","","",null,null],[17,"SYS_vhangup","","",null,null],[17,"SYS_modify_ldt","","",null,null],[17,"SYS_pivot_root","","",null,null],[17,"SYS__sysctl","","",null,null],[17,"SYS_prctl","","",null,null],[17,"SYS_arch_prctl","","",null,null],[17,"SYS_adjtimex","","",null,null],[17,"SYS_setrlimit","","",null,null],[17,"SYS_chroot","","",null,null],[17,"SYS_sync","","",null,null],[17,"SYS_acct","","",null,null],[17,"SYS_settimeofday","","",null,null],[17,"SYS_mount","","",null,null],[17,"SYS_umount2","","",null,null],[17,"SYS_swapon","","",null,null],[17,"SYS_swapoff","","",null,null],[17,"SYS_reboot","","",null,null],[17,"SYS_sethostname","","",null,null],[17,"SYS_setdomainname","","",null,null],[17,"SYS_iopl","","",null,null],[17,"SYS_ioperm","","",null,null],[17,"SYS_create_module","","",null,null],[17,"SYS_init_module","","",null,null],[17,"SYS_delete_module","","",null,null],[17,"SYS_get_kernel_syms","","",null,null],[17,"SYS_query_module","","",null,null],[17,"SYS_quotactl","","",null,null],[17,"SYS_nfsservctl","","",null,null],[17,"SYS_getpmsg","","",null,null],[17,"SYS_putpmsg","","",null,null],[17,"SYS_afs_syscall","","",null,null],[17,"SYS_tuxcall","","",null,null],[17,"SYS_security","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_readahead","","",null,null],[17,"SYS_setxattr","","",null,null],[17,"SYS_lsetxattr","","",null,null],[17,"SYS_fsetxattr","","",null,null],[17,"SYS_getxattr","","",null,null],[17,"SYS_lgetxattr","","",null,null],[17,"SYS_fgetxattr","","",null,null],[17,"SYS_listxattr","","",null,null],[17,"SYS_llistxattr","","",null,null],[17,"SYS_flistxattr","","",null,null],[17,"SYS_removexattr","","",null,null],[17,"SYS_lremovexattr","","",null,null],[17,"SYS_fremovexattr","","",null,null],[17,"SYS_tkill","","",null,null],[17,"SYS_time","","",null,null],[17,"SYS_futex","","",null,null],[17,"SYS_sched_setaffinity","","",null,null],[17,"SYS_sched_getaffinity","","",null,null],[17,"SYS_set_thread_area","","",null,null],[17,"SYS_io_setup","","",null,null],[17,"SYS_io_destroy","","",null,null],[17,"SYS_io_getevents","","",null,null],[17,"SYS_io_submit","","",null,null],[17,"SYS_io_cancel","","",null,null],[17,"SYS_get_thread_area","","",null,null],[17,"SYS_lookup_dcookie","","",null,null],[17,"SYS_epoll_create","","",null,null],[17,"SYS_epoll_ctl_old","","",null,null],[17,"SYS_epoll_wait_old","","",null,null],[17,"SYS_remap_file_pages","","",null,null],[17,"SYS_getdents64","","",null,null],[17,"SYS_set_tid_address","","",null,null],[17,"SYS_restart_syscall","","",null,null],[17,"SYS_semtimedop","","",null,null],[17,"SYS_fadvise64","","",null,null],[17,"SYS_timer_create","","",null,null],[17,"SYS_timer_settime","","",null,null],[17,"SYS_timer_gettime","","",null,null],[17,"SYS_timer_getoverrun","","",null,null],[17,"SYS_timer_delete","","",null,null],[17,"SYS_clock_settime","","",null,null],[17,"SYS_clock_gettime","","",null,null],[17,"SYS_clock_getres","","",null,null],[17,"SYS_clock_nanosleep","","",null,null],[17,"SYS_exit_group","","",null,null],[17,"SYS_epoll_wait","","",null,null],[17,"SYS_epoll_ctl","","",null,null],[17,"SYS_tgkill","","",null,null],[17,"SYS_utimes","","",null,null],[17,"SYS_vserver","","",null,null],[17,"SYS_mbind","","",null,null],[17,"SYS_set_mempolicy","","",null,null],[17,"SYS_get_mempolicy","","",null,null],[17,"SYS_mq_open","","",null,null],[17,"SYS_mq_unlink","","",null,null],[17,"SYS_mq_timedsend","","",null,null],[17,"SYS_mq_timedreceive","","",null,null],[17,"SYS_mq_notify","","",null,null],[17,"SYS_mq_getsetattr","","",null,null],[17,"SYS_kexec_load","","",null,null],[17,"SYS_waitid","","",null,null],[17,"SYS_add_key","","",null,null],[17,"SYS_request_key","","",null,null],[17,"SYS_keyctl","","",null,null],[17,"SYS_ioprio_set","","",null,null],[17,"SYS_ioprio_get","","",null,null],[17,"SYS_inotify_init","","",null,null],[17,"SYS_inotify_add_watch","","",null,null],[17,"SYS_inotify_rm_watch","","",null,null],[17,"SYS_migrate_pages","","",null,null],[17,"SYS_openat","","",null,null],[17,"SYS_mkdirat","","",null,null],[17,"SYS_mknodat","","",null,null],[17,"SYS_fchownat","","",null,null],[17,"SYS_futimesat","","",null,null],[17,"SYS_newfstatat","","",null,null],[17,"SYS_unlinkat","","",null,null],[17,"SYS_renameat","","",null,null],[17,"SYS_linkat","","",null,null],[17,"SYS_symlinkat","","",null,null],[17,"SYS_readlinkat","","",null,null],[17,"SYS_fchmodat","","",null,null],[17,"SYS_faccessat","","",null,null],[17,"SYS_pselect6","","",null,null],[17,"SYS_ppoll","","",null,null],[17,"SYS_unshare","","",null,null],[17,"SYS_set_robust_list","","",null,null],[17,"SYS_get_robust_list","","",null,null],[17,"SYS_splice","","",null,null],[17,"SYS_tee","","",null,null],[17,"SYS_sync_file_range","","",null,null],[17,"SYS_vmsplice","","",null,null],[17,"SYS_move_pages","","",null,null],[17,"SYS_utimensat","","",null,null],[17,"SYS_epoll_pwait","","",null,null],[17,"SYS_signalfd","","",null,null],[17,"SYS_timerfd_create","","",null,null],[17,"SYS_eventfd","","",null,null],[17,"SYS_fallocate","","",null,null],[17,"SYS_timerfd_settime","","",null,null],[17,"SYS_timerfd_gettime","","",null,null],[17,"SYS_accept4","","",null,null],[17,"SYS_signalfd4","","",null,null],[17,"SYS_eventfd2","","",null,null],[17,"SYS_epoll_create1","","",null,null],[17,"SYS_dup3","","",null,null],[17,"SYS_pipe2","","",null,null],[17,"SYS_inotify_init1","","",null,null],[17,"SYS_preadv","","",null,null],[17,"SYS_pwritev","","",null,null],[17,"SYS_rt_tgsigqueueinfo","","",null,null],[17,"SYS_perf_event_open","","",null,null],[17,"SYS_recvmmsg","","",null,null],[17,"SYS_fanotify_init","","",null,null],[17,"SYS_fanotify_mark","","",null,null],[17,"SYS_prlimit64","","",null,null],[17,"SYS_name_to_handle_at","","",null,null],[17,"SYS_open_by_handle_at","","",null,null],[17,"SYS_clock_adjtime","","",null,null],[17,"SYS_syncfs","","",null,null],[17,"SYS_sendmmsg","","",null,null],[17,"SYS_setns","","",null,null],[17,"SYS_getcpu","","",null,null],[17,"SYS_process_vm_readv","","",null,null],[17,"SYS_process_vm_writev","","",null,null],[17,"SYS_kcmp","","",null,null],[17,"SYS_finit_module","","",null,null],[17,"SYS_sched_setattr","","",null,null],[17,"SYS_sched_getattr","","",null,null],[17,"SYS_renameat2","","",null,null],[17,"SYS_seccomp","","",null,null],[17,"SYS_getrandom","","",null,null],[17,"SYS_memfd_create","","",null,null],[17,"SYS_kexec_file_load","","",null,null],[17,"SYS_bpf","","",null,null],[17,"SYS_execveat","","",null,null],[17,"SYS_userfaultfd","","",null,null],[17,"SYS_membarrier","","",null,null],[17,"SYS_mlock2","","",null,null],[17,"SYS_copy_file_range","","",null,null],[17,"SYS_preadv2","","",null,null],[17,"SYS_pwritev2","","",null,null],[17,"SYS_pkey_mprotect","","",null,null],[17,"SYS_pkey_alloc","","",null,null],[17,"SYS_pkey_free","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"sigevent"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"spwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"itimerspec"],[3,"mq_attr"],[3,"if_nameindex"],[3,"msginfo"],[3,"mmsghdr"],[3,"sembuf"],[3,"input_event"],[3,"input_id"],[3,"input_absinfo"],[3,"input_keymap_entry"],[3,"input_mask"],[3,"ff_replay"],[3,"ff_trigger"],[3,"ff_envelope"],[3,"ff_constant_effect"],[3,"ff_ramp_effect"],[3,"ff_condition_effect"],[3,"ff_periodic_effect"],[3,"ff_rumble_effect"],[3,"ff_effect"],[3,"dl_phdr_info"],[3,"Elf32_Phdr"],[3,"Elf64_Phdr"],[3,"ucred"],[3,"mntent"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"statfs"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"flock"],[3,"mallinfo"],[3,"sysinfo"],[3,"msqid_ds"],[3,"stat"],[3,"stat64"],[3,"statfs64"],[3,"statvfs64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"user_fpregs_struct"],[3,"user_regs_struct"],[3,"user"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"termios2"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"nlmsghdr"],[3,"nlmsgerr"],[3,"nl_pktinfo"],[3,"nl_mmap_req"],[3,"nl_mmap_hdr"],[3,"nlattr"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_rwlockattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"posix_spawn_file_actions_t"],[3,"posix_spawnattr_t"],[3,"genlmsghdr"],[3,"fd_set"]]};
searchIndex["llvm_sys"] = {"doc":"Bindings to LLVM's C API, version 3.8.","items":[[3,"LLVMAttribute","llvm_sys","",null,null],[4,"LLVMMemoryBuffer","","",null,null],[4,"LLVMContext","","",null,null],[4,"LLVMModule","","",null,null],[4,"LLVMType","","",null,null],[4,"LLVMValue","","",null,null],[4,"LLVMBasicBlock","","",null,null],[4,"LLVMBuilder","","",null,null],[4,"LLVMModuleProvider","","",null,null],[4,"LLVMPassManager","","",null,null],[4,"LLVMPassRegistry","","",null,null],[4,"LLVMUse","","",null,null],[4,"LLVMDiagnosticInfo","","",null,null],[4,"LLVMOpcode","","",null,null],[13,"LLVMRet","","",0,null],[13,"LLVMBr","","",0,null],[13,"LLVMSwitch","","",0,null],[13,"LLVMIndirectBr","","",0,null],[13,"LLVMInvoke","","",0,null],[13,"LLVMUnreachable","","",0,null],[13,"LLVMAdd","","",0,null],[13,"LLVMFAdd","","",0,null],[13,"LLVMSub","","",0,null],[13,"LLVMFSub","","",0,null],[13,"LLVMMul","","",0,null],[13,"LLVMFMul","","",0,null],[13,"LLVMUDiv","","",0,null],[13,"LLVMSDiv","","",0,null],[13,"LLVMFDiv","","",0,null],[13,"LLVMURem","","",0,null],[13,"LLVMSRem","","",0,null],[13,"LLVMFRem","","",0,null],[13,"LLVMShl","","",0,null],[13,"LLVMLShr","","",0,null],[13,"LLVMAShr","","",0,null],[13,"LLVMAnd","","",0,null],[13,"LLVMOr","","",0,null],[13,"LLVMXor","","",0,null],[13,"LLVMAlloca","","",0,null],[13,"LLVMLoad","","",0,null],[13,"LLVMStore","","",0,null],[13,"LLVMGetElementPtr","","",0,null],[13,"LLVMTrunc","","",0,null],[13,"LLVMZExt","","",0,null],[13,"LLVMSExt","","",0,null],[13,"LLVMFPToUI","","",0,null],[13,"LLVMFPToSI","","",0,null],[13,"LLVMUIToFP","","",0,null],[13,"LLVMSIToFP","","",0,null],[13,"LLVMFPTrunc","","",0,null],[13,"LLVMFPExt","","",0,null],[13,"LLVMPtrToInt","","",0,null],[13,"LLVMIntToPtr","","",0,null],[13,"LLVMBitCast","","",0,null],[13,"LLVMAddrSpaceCast","","",0,null],[13,"LLVMICmp","","",0,null],[13,"LLVMFCmp","","",0,null],[13,"LLVMPHI","","",0,null],[13,"LLVMCall","","",0,null],[13,"LLVMSelect","","",0,null],[13,"LLVMUserOp1","","",0,null],[13,"LLVMUserOp2","","",0,null],[13,"LLVMVAArg","","",0,null],[13,"LLVMExtractElement","","",0,null],[13,"LLVMInsertElement","","",0,null],[13,"LLVMShuffleVector","","",0,null],[13,"LLVMExtractValue","","",0,null],[13,"LLVMInsertValue","","",0,null],[13,"LLVMFence","","",0,null],[13,"LLVMAtomicCmpXchg","","",0,null],[13,"LLVMAtomicRMW","","",0,null],[13,"LLVMResume","","",0,null],[13,"LLVMLandingPad","","",0,null],[13,"LLVMCleanupRet","","",0,null],[13,"LLVMCatchRet","","",0,null],[13,"LLVMCatchPad","","",0,null],[13,"LLVMCleanupPad","","",0,null],[13,"LLVMCatchSwitch","","",0,null],[4,"LLVMTypeKind","","",null,null],[13,"LLVMVoidTypeKind","","",1,null],[13,"LLVMHalfTypeKind","","",1,null],[13,"LLVMFloatTypeKind","","",1,null],[13,"LLVMDoubleTypeKind","","",1,null],[13,"LLVMX86_FP80TypeKind","","",1,null],[13,"LLVMFP128TypeKind","","",1,null],[13,"LLVMPPC_FP128TypeKind","","",1,null],[13,"LLVMLabelTypeKind","","",1,null],[13,"LLVMIntegerTypeKind","","",1,null],[13,"LLVMFunctionTypeKind","","",1,null],[13,"LLVMStructTypeKind","","",1,null],[13,"LLVMArrayTypeKind","","",1,null],[13,"LLVMPointerTypeKind","","",1,null],[13,"LLVMVectorTypeKind","","",1,null],[13,"LLVMMetadataTypeKind","","",1,null],[13,"LLVMX86_MMXTypeKind","","",1,null],[13,"LLVMTokenTypeKind","","",1,null],[4,"LLVMLinkage","","",null,null],[13,"LLVMExternalLinkage","","",2,null],[13,"LLVMAvailableExternallyLinkage","","",2,null],[13,"LLVMLinkOnceAnyLinkage","","",2,null],[13,"LLVMLinkOnceODRLinkage","","",2,null],[13,"LLVMLinkOnceODRAutoHideLinkage","","",2,null],[13,"LLVMWeakAnyLinkage","","",2,null],[13,"LLVMWeakODRLinkage","","",2,null],[13,"LLVMAppendingLinkage","","",2,null],[13,"LLVMInternalLinkage","","",2,null],[13,"LLVMPrivateLinkage","","",2,null],[13,"LLVMDLLImportLinkage","","",2,null],[13,"LLVMDLLExportLinkage","","",2,null],[13,"LLVMExternalWeakLinkage","","",2,null],[13,"LLVMGhostLinkage","","",2,null],[13,"LLVMCommonLinkage","","",2,null],[13,"LLVMLinkerPrivateLinkage","","",2,null],[13,"LLVMLinkerPrivateWeakLinkage","","",2,null],[4,"LLVMVisibility","","",null,null],[13,"LLVMDefaultVisibility","","",3,null],[13,"LLVMHiddenVisibility","","",3,null],[13,"LLVMProtectedVisibility","","",3,null],[4,"LLVMDLLStorageClass","","",null,null],[13,"LLVMDefaultStorageClass","","",4,null],[13,"LLVMDLLImportStorageClass","","",4,null],[13,"LLVMDLLExportStorageClass","","",4,null],[4,"LLVMCallConv","","",null,null],[13,"LLVMCCallConv","","",5,null],[13,"LLVMFastCallConv","","",5,null],[13,"LLVMColdCallConv","","",5,null],[13,"LLVMWebKitJSCallConv","","",5,null],[13,"LLVMAnyRegCallConv","","",5,null],[13,"LLVMX86StdcallCallConv","","",5,null],[13,"LLVMX86FastcallCallConv","","",5,null],[4,"LLVMIntPredicate","","",null,null],[13,"LLVMIntEQ","","",6,null],[13,"LLVMIntNE","","",6,null],[13,"LLVMIntUGT","","",6,null],[13,"LLVMIntUGE","","",6,null],[13,"LLVMIntULT","","",6,null],[13,"LLVMIntULE","","",6,null],[13,"LLVMIntSGT","","",6,null],[13,"LLVMIntSGE","","",6,null],[13,"LLVMIntSLT","","",6,null],[13,"LLVMIntSLE","","",6,null],[4,"LLVMRealPredicate","","",null,null],[13,"LLVMRealPredicateFalse","","",7,null],[13,"LLVMRealOEQ","","",7,null],[13,"LLVMRealOGT","","",7,null],[13,"LLVMRealOGE","","",7,null],[13,"LLVMRealOLT","","",7,null],[13,"LLVMRealOLE","","",7,null],[13,"LLVMRealONE","","",7,null],[13,"LLVMRealORD","","",7,null],[13,"LLVMRealUNO","","",7,null],[13,"LLVMRealUEQ","","",7,null],[13,"LLVMRealUGT","","",7,null],[13,"LLVMRealUGE","","",7,null],[13,"LLVMRealULT","","",7,null],[13,"LLVMRealULE","","",7,null],[13,"LLVMRealUNE","","",7,null],[13,"LLVMRealPredicateTrue","","",7,null],[4,"LLVMLandingPadClauseTy","","",null,null],[13,"LLVMLandingPadCatch","","",8,null],[13,"LLVMLandingPadFilter","","",8,null],[4,"LLVMThreadLocalMode","","",null,null],[13,"LLVMNotThreadLocal","","",9,null],[13,"LLVMGeneralDynamicTLSModel","","",9,null],[13,"LLVMLocalDynamicTLSModel","","",9,null],[13,"LLVMInitialExecTLSModel","","",9,null],[13,"LLVMLocalExecTLSModel","","",9,null],[4,"LLVMAtomicOrdering","","",null,null],[13,"LLVMAtomicOrderingNotAtomic","","",10,null],[13,"LLVMAtomicOrderingUnordered","","",10,null],[13,"LLVMAtomicOrderingMonotonic","","",10,null],[13,"LLVMAtomicOrderingAcquire","","",10,null],[13,"LLVMAtomicOrderingRelease","","",10,null],[13,"LLVMAtomicOrderingAcquireRelease","","",10,null],[13,"LLVMAtomicOrderingSequentiallyConsistent","","",10,null],[4,"LLVMAtomicRMWBinOp","","",null,null],[13,"LLVMAtomicRMWBinOpXchg","","",11,null],[13,"LLVMAtomicRMWBinOpAdd","","",11,null],[13,"LLVMAtomicRMWBinOpSub","","",11,null],[13,"LLVMAtomicRMWBinOpAnd","","",11,null],[13,"LLVMAtomicRMWBinOpNand","","",11,null],[13,"LLVMAtomicRMWBinOpOr","","",11,null],[13,"LLVMAtomicRMWBinOpXor","","",11,null],[13,"LLVMAtomicRMWBinOpMax","","",11,null],[13,"LLVMAtomicRMWBinOpMin","","",11,null],[13,"LLVMAtomicRMWBinOpUMax","","",11,null],[13,"LLVMAtomicRMWBinOpUMin","","",11,null],[4,"LLVMDiagnosticSeverity","","",null,null],[13,"LLVMDSError","","",12,null],[13,"LLVMDSWarning","","",12,null],[13,"LLVMDSRemark","","",12,null],[13,"LLVMDSNote","","",12,null],[0,"prelude","","Core types used throughout LLVM.",null,null],[6,"LLVMBool","llvm_sys::prelude","",null,null],[6,"LLVMMemoryBufferRef","","",null,null],[6,"LLVMContextRef","","",null,null],[6,"LLVMModuleRef","","",null,null],[6,"LLVMTypeRef","","",null,null],[6,"LLVMValueRef","","",null,null],[6,"LLVMBasicBlockRef","","",null,null],[6,"LLVMBuilderRef","","",null,null],[6,"LLVMModuleProviderRef","","",null,null],[6,"LLVMPassManagerRef","","",null,null],[6,"LLVMPassRegistryRef","","",null,null],[6,"LLVMUseRef","","",null,null],[6,"LLVMDiagnosticInfoRef","","",null,null],[0,"analysis","llvm_sys","Various analyses of the LLVM IR.",null,null],[4,"LLVMVerifierFailureAction","llvm_sys::analysis","",null,null],[13,"LLVMAbortProcessAction","","Print to stderr and abort the process.",13,null],[13,"LLVMPrintMessageAction","","Print to stderr and return 1.",13,null],[13,"LLVMReturnStatusAction","","Return 1 and print nothing.",13,null],[5,"LLVMVerifyModule","","Verify that a module is valid, taking the specified action if not.",null,null],[5,"LLVMVerifyFunction","","Verify that a single function is valid, taking the specified action.",null,null],[5,"LLVMViewFunctionCFG","","Open a ghostview window displaying the CFG of the given function.",null,null],[5,"LLVMViewFunctionCFGOnly","","",null,null],[0,"bit_reader","llvm_sys","Input of the LLVM bitcode format.",null,null],[5,"LLVMParseBitcode","llvm_sys::bit_reader","Build a module from the bitcode in the specified memory buffer.",null,null],[5,"LLVMParseBitcode2","","Build a module from the bitcode in the specified memory buffer.",null,null],[5,"LLVMParseBitcodeInContext","","",null,null],[5,"LLVMParseBitcodeInContext2","","",null,null],[5,"LLVMGetBitcodeModuleInContext","","Read a module from the specified path, returning a module provider performing lazy deserialization.",null,null],[5,"LLVMGetBitcodeModuleInContext2","","Read a module from the specified path, returning a module provider performing lazy deserialization.",null,null],[5,"LLVMGetBitcodeModule","","",null,null],[5,"LLVMGetBitcodeModule2","","Read a module from the specified path.",null,null],[0,"bit_writer","llvm_sys","Output of the LLVM bitcode format.",null,null],[5,"LLVMWriteBitcodeToFile","llvm_sys::bit_writer","Write a module to the specified path.",null,null],[5,"LLVMWriteBitcodeToFD","","Write a module to an open file descriptor.",null,null],[5,"LLVMWriteBitcodeToFileHandle","","Deprecated: use LLVMWriteBitcodeToFD",null,null],[5,"LLVMWriteBitcodeToMemoryBuffer","","Writes a module to a new memory buffer.",null,null],[0,"core","llvm_sys","The LLVM intermediate representation.",null,null],[5,"LLVMShutdown","llvm_sys::core","",null,null],[5,"LLVMCreateMessage","","",null,null],[5,"LLVMDisposeMessage","","",null,null],[5,"LLVMContextCreate","","",null,null],[5,"LLVMGetGlobalContext","","",null,null],[5,"LLVMContextSetDiagnosticHandler","","",null,null],[5,"LLVMContextSetYieldCallback","","",null,null],[5,"LLVMContextDispose","","",null,null],[5,"LLVMGetDiagInfoDescription","","",null,null],[5,"LLVMGetDiagInfoSeverity","","",null,null],[5,"LLVMGetMDKindIDInContext","","",null,null],[5,"LLVMGetMDKindID","","",null,null],[5,"LLVMModuleCreateWithName","","",null,null],[5,"LLVMModuleCreateWithNameInContext","","",null,null],[5,"LLVMCloneModule","","",null,null],[5,"LLVMDisposeModule","","",null,null],[5,"LLVMGetDataLayout","","",null,null],[5,"LLVMSetDataLayout","","",null,null],[5,"LLVMGetTarget","","",null,null],[5,"LLVMSetTarget","","",null,null],[5,"LLVMDumpModule","","",null,null],[5,"LLVMPrintModuleToFile","","",null,null],[5,"LLVMPrintModuleToString","","",null,null],[5,"LLVMSetModuleInlineAsm","","",null,null],[5,"LLVMGetModuleContext","","",null,null],[5,"LLVMGetTypeByName","","",null,null],[5,"LLVMGetNamedMetadataNumOperands","","",null,null],[5,"LLVMGetNamedMetadataOperands","","",null,null],[5,"LLVMAddNamedMetadataOperand","","",null,null],[5,"LLVMAddFunction","","",null,null],[5,"LLVMGetNamedFunction","","",null,null],[5,"LLVMGetFirstFunction","","",null,null],[5,"LLVMGetLastFunction","","",null,null],[5,"LLVMGetNextFunction","","",null,null],[5,"LLVMGetPreviousFunction","","",null,null],[5,"LLVMGetTypeKind","","",null,null],[5,"LLVMTypeIsSized","","",null,null],[5,"LLVMGetTypeContext","","",null,null],[5,"LLVMDumpType","","",null,null],[5,"LLVMPrintTypeToString","","",null,null],[5,"LLVMInt1TypeInContext","","",null,null],[5,"LLVMInt8TypeInContext","","",null,null],[5,"LLVMInt16TypeInContext","","",null,null],[5,"LLVMInt32TypeInContext","","",null,null],[5,"LLVMInt64TypeInContext","","",null,null],[5,"LLVMInt128TypeInContext","","",null,null],[5,"LLVMIntTypeInContext","","",null,null],[5,"LLVMInt1Type","","",null,null],[5,"LLVMInt8Type","","",null,null],[5,"LLVMInt16Type","","",null,null],[5,"LLVMInt32Type","","",null,null],[5,"LLVMInt64Type","","",null,null],[5,"LLVMInt128Type","","",null,null],[5,"LLVMIntType","","",null,null],[5,"LLVMGetIntTypeWidth","","",null,null],[5,"LLVMHalfTypeInContext","","",null,null],[5,"LLVMFloatTypeInContext","","",null,null],[5,"LLVMDoubleTypeInContext","","",null,null],[5,"LLVMX86FP80TypeInContext","","",null,null],[5,"LLVMFP128TypeInContext","","",null,null],[5,"LLVMPPCFP128TypeInContext","","",null,null],[5,"LLVMHalfType","","",null,null],[5,"LLVMFloatType","","",null,null],[5,"LLVMDoubleType","","",null,null],[5,"LLVMX86FP80Type","","",null,null],[5,"LLVMFP128Type","","",null,null],[5,"LLVMPPCFP128Type","","",null,null],[5,"LLVMFunctionType","","",null,null],[5,"LLVMIsFunctionVarArg","","",null,null],[5,"LLVMGetReturnType","","",null,null],[5,"LLVMCountParamTypes","","",null,null],[5,"LLVMGetParamTypes","","",null,null],[5,"LLVMStructTypeInContext","","",null,null],[5,"LLVMStructType","","",null,null],[5,"LLVMStructCreateNamed","","",null,null],[5,"LLVMGetStructName","","",null,null],[5,"LLVMStructSetBody","","",null,null],[5,"LLVMCountStructElementTypes","","",null,null],[5,"LLVMGetStructElementTypes","","",null,null],[5,"LLVMStructGetTypeAtIndex","","Get the type of the element at the given index in a structure.",null,null],[5,"LLVMIsPackedStruct","","Determine whether a structure is packed.",null,null],[5,"LLVMIsOpaqueStruct","","",null,null],[5,"LLVMGetElementType","","",null,null],[5,"LLVMArrayType","","",null,null],[5,"LLVMGetArrayLength","","",null,null],[5,"LLVMPointerType","","",null,null],[5,"LLVMGetPointerAddressSpace","","",null,null],[5,"LLVMVectorType","","",null,null],[5,"LLVMGetVectorSize","","",null,null],[5,"LLVMVoidTypeInContext","","",null,null],[5,"LLVMLabelTypeInContext","","",null,null],[5,"LLVMX86MMXTypeInContext","","",null,null],[5,"LLVMVoidType","","",null,null],[5,"LLVMLabelType","","",null,null],[5,"LLVMX86MMXType","","",null,null],[5,"LLVMTypeOf","","",null,null],[5,"LLVMGetValueName","","",null,null],[5,"LLVMSetValueName","","",null,null],[5,"LLVMDumpValue","","",null,null],[5,"LLVMPrintValueToString","","",null,null],[5,"LLVMReplaceAllUsesWith","","",null,null],[5,"LLVMIsConstant","","",null,null],[5,"LLVMIsUndef","","",null,null],[5,"LLVMIsAMDNode","","",null,null],[5,"LLVMIsAMDString","","",null,null],[5,"LLVMGetFirstUse","","",null,null],[5,"LLVMGetNextUse","","",null,null],[5,"LLVMGetUser","","",null,null],[5,"LLVMGetUsedValue","","",null,null],[5,"LLVMGetOperand","","",null,null],[5,"LLVMGetOperandUse","","",null,null],[5,"LLVMSetOperand","","",null,null],[5,"LLVMGetNumOperands","","",null,null],[5,"LLVMConstNull","","",null,null],[5,"LLVMConstAllOnes","","",null,null],[5,"LLVMGetUndef","","",null,null],[5,"LLVMIsNull","","",null,null],[5,"LLVMConstPointerNull","","",null,null],[5,"LLVMConstInt","","",null,null],[5,"LLVMConstIntOfArbitraryPrecision","","",null,null],[5,"LLVMConstIntOfString","","",null,null],[5,"LLVMConstIntOfStringAndSize","","",null,null],[5,"LLVMConstReal","","",null,null],[5,"LLVMConstRealOfString","","",null,null],[5,"LLVMConstRealOfStringAndSize","","",null,null],[5,"LLVMConstIntGetZExtValue","","",null,null],[5,"LLVMConstIntGetSExtValue","","",null,null],[5,"LLVMConstRealGetDouble","","",null,null],[5,"LLVMConstStringInContext","","",null,null],[5,"LLVMConstString","","",null,null],[5,"LLVMIsConstantString","","",null,null],[5,"LLVMGetAsString","","",null,null],[5,"LLVMConstStructInContext","","",null,null],[5,"LLVMConstStruct","","",null,null],[5,"LLVMConstArray","","",null,null],[5,"LLVMConstNamedStruct","","",null,null],[5,"LLVMGetElementAsConstant","","",null,null],[5,"LLVMConstVector","","",null,null],[5,"LLVMGetConstOpcode","","",null,null],[5,"LLVMAlignOf","","",null,null],[5,"LLVMSizeOf","","",null,null],[5,"LLVMConstNeg","","",null,null],[5,"LLVMConstNSWNeg","","",null,null],[5,"LLVMConstNUWNeg","","",null,null],[5,"LLVMConstFNeg","","",null,null],[5,"LLVMConstNot","","",null,null],[5,"LLVMConstAdd","","",null,null],[5,"LLVMConstNSWAdd","","",null,null],[5,"LLVMConstNUWAdd","","",null,null],[5,"LLVMConstFAdd","","",null,null],[5,"LLVMConstSub","","",null,null],[5,"LLVMConstNSWSub","","",null,null],[5,"LLVMConstNUWSub","","",null,null],[5,"LLVMConstFSub","","",null,null],[5,"LLVMConstMul","","",null,null],[5,"LLVMConstNSWMul","","",null,null],[5,"LLVMConstNUWMul","","",null,null],[5,"LLVMConstFMul","","",null,null],[5,"LLVMConstUDiv","","",null,null],[5,"LLVMConstSDiv","","",null,null],[5,"LLVMConstExactSDiv","","",null,null],[5,"LLVMConstFDiv","","",null,null],[5,"LLVMConstURem","","",null,null],[5,"LLVMConstSRem","","",null,null],[5,"LLVMConstFRem","","",null,null],[5,"LLVMConstAnd","","",null,null],[5,"LLVMConstOr","","",null,null],[5,"LLVMConstXor","","",null,null],[5,"LLVMConstICmp","","",null,null],[5,"LLVMConstFCmp","","",null,null],[5,"LLVMConstShl","","",null,null],[5,"LLVMConstLShr","","",null,null],[5,"LLVMConstAShr","","",null,null],[5,"LLVMConstGEP","","",null,null],[5,"LLVMConstInBoundsGEP","","",null,null],[5,"LLVMConstTrunc","","",null,null],[5,"LLVMConstSExt","","",null,null],[5,"LLVMConstZExt","","",null,null],[5,"LLVMConstFPTrunc","","",null,null],[5,"LLVMConstFPExt","","",null,null],[5,"LLVMConstUIToFP","","",null,null],[5,"LLVMConstSIToFP","","",null,null],[5,"LLVMConstFPToUI","","",null,null],[5,"LLVMConstFPToSI","","",null,null],[5,"LLVMConstPtrToInt","","",null,null],[5,"LLVMConstIntToPtr","","",null,null],[5,"LLVMConstBitCast","","",null,null],[5,"LLVMConstAddrSpaceCast","","",null,null],[5,"LLVMConstZExtOrBitCast","","",null,null],[5,"LLVMConstSExtOrBitCast","","",null,null],[5,"LLVMConstTruncOrBitCast","","",null,null],[5,"LLVMConstPointerCast","","",null,null],[5,"LLVMConstIntCast","","",null,null],[5,"LLVMConstFPCast","","",null,null],[5,"LLVMConstSelect","","",null,null],[5,"LLVMConstExtractElement","","",null,null],[5,"LLVMConstInsertElement","","",null,null],[5,"LLVMConstShuffleVector","","",null,null],[5,"LLVMConstExtractValue","","",null,null],[5,"LLVMConstInsertValue","","",null,null],[5,"LLVMConstInlineAsm","","",null,null],[5,"LLVMBlockAddress","","",null,null],[5,"LLVMGetGlobalParent","","",null,null],[5,"LLVMIsDeclaration","","",null,null],[5,"LLVMGetLinkage","","",null,null],[5,"LLVMSetLinkage","","",null,null],[5,"LLVMGetSection","","",null,null],[5,"LLVMSetSection","","",null,null],[5,"LLVMGetVisibility","","",null,null],[5,"LLVMSetVisibility","","",null,null],[5,"LLVMGetDLLStorageClass","","",null,null],[5,"LLVMSetDLLStorageClass","","",null,null],[5,"LLVMHasUnnamedAddr","","",null,null],[5,"LLVMSetUnnamedAddr","","",null,null],[5,"LLVMGetAlignment","","",null,null],[5,"LLVMSetAlignment","","",null,null],[5,"LLVMAddGlobal","","",null,null],[5,"LLVMAddGlobalInAddressSpace","","",null,null],[5,"LLVMGetNamedGlobal","","",null,null],[5,"LLVMGetFirstGlobal","","",null,null],[5,"LLVMGetLastGlobal","","",null,null],[5,"LLVMGetNextGlobal","","",null,null],[5,"LLVMGetPreviousGlobal","","",null,null],[5,"LLVMDeleteGlobal","","",null,null],[5,"LLVMGetInitializer","","",null,null],[5,"LLVMSetInitializer","","",null,null],[5,"LLVMIsThreadLocal","","",null,null],[5,"LLVMSetThreadLocal","","",null,null],[5,"LLVMIsGlobalConstant","","",null,null],[5,"LLVMSetGlobalConstant","","",null,null],[5,"LLVMGetThreadLocalMode","","",null,null],[5,"LLVMSetThreadLocalMode","","",null,null],[5,"LLVMIsExternallyInitialized","","",null,null],[5,"LLVMSetExternallyInitialized","","",null,null],[5,"LLVMAddAlias","","",null,null],[5,"LLVMDeleteFunction","","",null,null],[5,"LLVMGetPersonalityFn","","Obtain the personality function attached to the function.",null,null],[5,"LLVMSetPersonalityFn","","Set the personality function attached to the function.",null,null],[5,"LLVMGetIntrinsicID","","Obtain the ID number from a function instance.",null,null],[5,"LLVMGetFunctionCallConv","","",null,null],[5,"LLVMSetFunctionCallConv","","",null,null],[5,"LLVMGetGC","","",null,null],[5,"LLVMSetGC","","",null,null],[5,"LLVMAddFunctionAttr","","",null,null],[5,"LLVMAddTargetDependentFunctionAttr","","",null,null],[5,"LLVMGetFunctionAttr","","",null,null],[5,"LLVMRemoveFunctionAttr","","",null,null],[5,"LLVMCountParams","","",null,null],[5,"LLVMGetParams","","",null,null],[5,"LLVMGetParam","","",null,null],[5,"LLVMGetParamParent","","",null,null],[5,"LLVMGetFirstParam","","",null,null],[5,"LLVMGetLastParam","","",null,null],[5,"LLVMGetNextParam","","",null,null],[5,"LLVMGetPreviousParam","","",null,null],[5,"LLVMAddAttribute","","",null,null],[5,"LLVMRemoveAttribute","","",null,null],[5,"LLVMGetAttribute","","",null,null],[5,"LLVMSetParamAlignment","","",null,null],[5,"LLVMMDStringInContext","","",null,null],[5,"LLVMMDString","","",null,null],[5,"LLVMMDNodeInContext","","",null,null],[5,"LLVMMDNode","","",null,null],[5,"LLVMGetMDString","","",null,null],[5,"LLVMGetMDNodeNumOperands","","",null,null],[5,"LLVMGetMDNodeOperands","","",null,null],[5,"LLVMBasicBlockAsValue","","",null,null],[5,"LLVMValueIsBasicBlock","","",null,null],[5,"LLVMValueAsBasicBlock","","",null,null],[5,"LLVMGetBasicBlockParent","","",null,null],[5,"LLVMGetBasicBlockTerminator","","",null,null],[5,"LLVMCountBasicBlocks","","",null,null],[5,"LLVMGetBasicBlocks","","",null,null],[5,"LLVMGetFirstBasicBlock","","",null,null],[5,"LLVMGetLastBasicBlock","","",null,null],[5,"LLVMGetNextBasicBlock","","",null,null],[5,"LLVMGetPreviousBasicBlock","","",null,null],[5,"LLVMGetEntryBasicBlock","","",null,null],[5,"LLVMAppendBasicBlockInContext","","",null,null],[5,"LLVMAppendBasicBlock","","",null,null],[5,"LLVMInsertBasicBlockInContext","","",null,null],[5,"LLVMInsertBasicBlock","","",null,null],[5,"LLVMDeleteBasicBlock","","",null,null],[5,"LLVMRemoveBasicBlockFromParent","","",null,null],[5,"LLVMMoveBasicBlockBefore","","",null,null],[5,"LLVMMoveBasicBlockAfter","","",null,null],[5,"LLVMGetFirstInstruction","","",null,null],[5,"LLVMGetLastInstruction","","",null,null],[5,"LLVMHasMetadata","","",null,null],[5,"LLVMGetMetadata","","",null,null],[5,"LLVMSetMetadata","","",null,null],[5,"LLVMGetInstructionParent","","",null,null],[5,"LLVMGetNextInstruction","","",null,null],[5,"LLVMGetPreviousInstruction","","",null,null],[5,"LLVMInstructionEraseFromParent","","",null,null],[5,"LLVMGetInstructionOpcode","","",null,null],[5,"LLVMGetICmpPredicate","","",null,null],[5,"LLVMGetFCmpPredicate","","",null,null],[5,"LLVMInstructionClone","","",null,null],[5,"LLVMSetInstructionCallConv","","",null,null],[5,"LLVMGetInstructionCallConv","","",null,null],[5,"LLVMAddInstrAttribute","","",null,null],[5,"LLVMRemoveInstrAttribute","","",null,null],[5,"LLVMSetInstrParamAlignment","","",null,null],[5,"LLVMIsTailCall","","",null,null],[5,"LLVMSetTailCall","","",null,null],[5,"LLVMGetNumSuccessors","","",null,null],[5,"LLVMGetSuccessor","","",null,null],[5,"LLVMSetSuccessor","","",null,null],[5,"LLVMIsConditional","","",null,null],[5,"LLVMGetCondition","","",null,null],[5,"LLVMSetCondition","","",null,null],[5,"LLVMGetSwitchDefaultDest","","",null,null],[5,"LLVMAddIncoming","","",null,null],[5,"LLVMCountIncoming","","",null,null],[5,"LLVMGetIncomingValue","","",null,null],[5,"LLVMGetIncomingBlock","","",null,null],[5,"LLVMIsAArgument","","",null,null],[5,"LLVMIsABasicBlock","","",null,null],[5,"LLVMIsAInlineAsm","","",null,null],[5,"LLVMIsAUser","","",null,null],[5,"LLVMIsAConstant","","",null,null],[5,"LLVMIsABlockAddress","","",null,null],[5,"LLVMIsAConstantAggregateZero","","",null,null],[5,"LLVMIsAConstantArray","","",null,null],[5,"LLVMIsAConstantDataSequential","","",null,null],[5,"LLVMIsAConstantDataArray","","",null,null],[5,"LLVMIsAConstantDataVector","","",null,null],[5,"LLVMIsAConstantExpr","","",null,null],[5,"LLVMIsAConstantFP","","",null,null],[5,"LLVMIsAConstantInt","","",null,null],[5,"LLVMIsAConstantPointerNull","","",null,null],[5,"LLVMIsAConstantStruct","","",null,null],[5,"LLVMIsAConstantTokenNone","","",null,null],[5,"LLVMIsAConstantVector","","",null,null],[5,"LLVMIsAGlobalValue","","",null,null],[5,"LLVMIsAGlobalAlias","","",null,null],[5,"LLVMIsAGlobalObject","","",null,null],[5,"LLVMIsAFunction","","",null,null],[5,"LLVMIsAGlobalVariable","","",null,null],[5,"LLVMIsAUndefValue","","",null,null],[5,"LLVMIsAInstruction","","",null,null],[5,"LLVMIsABinaryOperator","","",null,null],[5,"LLVMIsACallInst","","",null,null],[5,"LLVMIsAIntrinsicInst","","",null,null],[5,"LLVMIsADbgInfoIntrinsic","","",null,null],[5,"LLVMIsADbgDeclareInst","","",null,null],[5,"LLVMIsAMemIntrinsic","","",null,null],[5,"LLVMIsAMemCpyInst","","",null,null],[5,"LLVMIsAMemMoveInst","","",null,null],[5,"LLVMIsAMemSetInst","","",null,null],[5,"LLVMIsACmpInst","","",null,null],[5,"LLVMIsAFCmpInst","","",null,null],[5,"LLVMIsAICmpInst","","",null,null],[5,"LLVMIsAExtractElementInst","","",null,null],[5,"LLVMIsAGetElementPtrInst","","",null,null],[5,"LLVMIsAInsertElementInst","","",null,null],[5,"LLVMIsAInsertValueInst","","",null,null],[5,"LLVMIsALandingPadInst","","",null,null],[5,"LLVMIsAPHINode","","",null,null],[5,"LLVMIsASelectInst","","",null,null],[5,"LLVMIsAShuffleVectorInst","","",null,null],[5,"LLVMIsAStoreInst","","",null,null],[5,"LLVMIsATerminatorInst","","",null,null],[5,"LLVMIsABranchInst","","",null,null],[5,"LLVMIsAIndirectBrInst","","",null,null],[5,"LLVMIsAInvokeInst","","",null,null],[5,"LLVMIsAReturnInst","","",null,null],[5,"LLVMIsASwitchInst","","",null,null],[5,"LLVMIsAUnreachableInst","","",null,null],[5,"LLVMIsAResumeInst","","",null,null],[5,"LLVMIsACleanupReturnInst","","",null,null],[5,"LLVMIsACatchReturnInst","","",null,null],[5,"LLVMIsAFuncletPadInst","","",null,null],[5,"LLVMIsACatchPadInst","","",null,null],[5,"LLVMIsACleanupPadInst","","",null,null],[5,"LLVMIsAUnaryInstruction","","",null,null],[5,"LLVMIsAAllocaInst","","",null,null],[5,"LLVMIsACastInst","","",null,null],[5,"LLVMIsAAddrSpaceCastInst","","",null,null],[5,"LLVMIsABitCastInst","","",null,null],[5,"LLVMIsAFPExtInst","","",null,null],[5,"LLVMIsAFPToSIInst","","",null,null],[5,"LLVMIsAFPToUIInst","","",null,null],[5,"LLVMIsAFPTruncInst","","",null,null],[5,"LLVMIsAIntToPtrInst","","",null,null],[5,"LLVMIsAPtrToIntInst","","",null,null],[5,"LLVMIsASExtInst","","",null,null],[5,"LLVMIsASIToFPInst","","",null,null],[5,"LLVMIsATruncInst","","",null,null],[5,"LLVMIsAUIToFPInst","","",null,null],[5,"LLVMIsAZExtInst","","",null,null],[5,"LLVMIsAExtractValueInst","","",null,null],[5,"LLVMIsALoadInst","","",null,null],[5,"LLVMIsAVAArgInst","","",null,null],[5,"LLVMCreateBuilderInContext","","",null,null],[5,"LLVMCreateBuilder","","",null,null],[5,"LLVMPositionBuilder","","",null,null],[5,"LLVMPositionBuilderBefore","","",null,null],[5,"LLVMPositionBuilderAtEnd","","",null,null],[5,"LLVMGetInsertBlock","","",null,null],[5,"LLVMClearInsertionPosition","","",null,null],[5,"LLVMInsertIntoBuilder","","",null,null],[5,"LLVMInsertIntoBuilderWithName","","",null,null],[5,"LLVMDisposeBuilder","","",null,null],[5,"LLVMSetCurrentDebugLocation","","",null,null],[5,"LLVMGetCurrentDebugLocation","","",null,null],[5,"LLVMSetInstDebugLocation","","",null,null],[5,"LLVMBuildRetVoid","","",null,null],[5,"LLVMBuildRet","","",null,null],[5,"LLVMBuildAggregateRet","","",null,null],[5,"LLVMBuildBr","","",null,null],[5,"LLVMBuildCondBr","","",null,null],[5,"LLVMBuildSwitch","","",null,null],[5,"LLVMBuildIndirectBr","","",null,null],[5,"LLVMBuildInvoke","","",null,null],[5,"LLVMBuildLandingPad","","",null,null],[5,"LLVMBuildResume","","",null,null],[5,"LLVMBuildUnreachable","","",null,null],[5,"LLVMAddCase","","Add a case to a `switch` instruction",null,null],[5,"LLVMAddDestination","","Add a destination to an `indirectbr` instruction",null,null],[5,"LLVMAddClause","","Add a catch or filter clause to a `landingpad` instruction",null,null],[5,"LLVMSetCleanup","","Set the cleanup flag in a `landingpad` instruction.",null,null],[5,"LLVMBuildAdd","","",null,null],[5,"LLVMBuildNSWAdd","","",null,null],[5,"LLVMBuildNUWAdd","","",null,null],[5,"LLVMBuildFAdd","","",null,null],[5,"LLVMBuildSub","","",null,null],[5,"LLVMBuildNSWSub","","",null,null],[5,"LLVMBuildNUWSub","","",null,null],[5,"LLVMBuildFSub","","",null,null],[5,"LLVMBuildMul","","",null,null],[5,"LLVMBuildNSWMul","","",null,null],[5,"LLVMBuildNUWMul","","",null,null],[5,"LLVMBuildFMul","","",null,null],[5,"LLVMBuildUDiv","","",null,null],[5,"LLVMBuildSDiv","","",null,null],[5,"LLVMBuildExactSDiv","","",null,null],[5,"LLVMBuildFDiv","","",null,null],[5,"LLVMBuildURem","","",null,null],[5,"LLVMBuildSRem","","",null,null],[5,"LLVMBuildFRem","","",null,null],[5,"LLVMBuildShl","","",null,null],[5,"LLVMBuildLShr","","",null,null],[5,"LLVMBuildAShr","","",null,null],[5,"LLVMBuildAnd","","",null,null],[5,"LLVMBuildOr","","",null,null],[5,"LLVMBuildXor","","",null,null],[5,"LLVMBuildBinOp","","",null,null],[5,"LLVMBuildNeg","","",null,null],[5,"LLVMBuildNSWNeg","","",null,null],[5,"LLVMBuildNUWNeg","","",null,null],[5,"LLVMBuildFNeg","","",null,null],[5,"LLVMBuildNot","","",null,null],[5,"LLVMBuildMalloc","","",null,null],[5,"LLVMBuildArrayMalloc","","",null,null],[5,"LLVMBuildAlloca","","",null,null],[5,"LLVMBuildArrayAlloca","","",null,null],[5,"LLVMBuildFree","","",null,null],[5,"LLVMBuildLoad","","",null,null],[5,"LLVMBuildStore","","",null,null],[5,"LLVMBuildGEP","","",null,null],[5,"LLVMBuildInBoundsGEP","","",null,null],[5,"LLVMBuildStructGEP","","",null,null],[5,"LLVMBuildGlobalString","","",null,null],[5,"LLVMBuildGlobalStringPtr","","",null,null],[5,"LLVMGetVolatile","","",null,null],[5,"LLVMSetVolatile","","",null,null],[5,"LLVMGetOrdering","","",null,null],[5,"LLVMSetOrdering","","",null,null],[5,"LLVMBuildTrunc","","",null,null],[5,"LLVMBuildZExt","","",null,null],[5,"LLVMBuildSExt","","",null,null],[5,"LLVMBuildFPToUI","","",null,null],[5,"LLVMBuildFPToSI","","",null,null],[5,"LLVMBuildUIToFP","","",null,null],[5,"LLVMBuildSIToFP","","",null,null],[5,"LLVMBuildFPTrunc","","",null,null],[5,"LLVMBuildFPExt","","",null,null],[5,"LLVMBuildPtrToInt","","",null,null],[5,"LLVMBuildIntToPtr","","",null,null],[5,"LLVMBuildBitCast","","",null,null],[5,"LLVMBuildAddrSpaceCast","","",null,null],[5,"LLVMBuildZExtOrBitCast","","",null,null],[5,"LLVMBuildSExtOrBitCast","","",null,null],[5,"LLVMBuildTruncOrBitCast","","",null,null],[5,"LLVMBuildCast","","",null,null],[5,"LLVMBuildPointerCast","","",null,null],[5,"LLVMBuildIntCast","","",null,null],[5,"LLVMBuildFPCast","","",null,null],[5,"LLVMBuildICmp","","",null,null],[5,"LLVMBuildFCmp","","",null,null],[5,"LLVMBuildPhi","","",null,null],[5,"LLVMBuildCall","","",null,null],[5,"LLVMBuildSelect","","",null,null],[5,"LLVMBuildVAArg","","",null,null],[5,"LLVMBuildExtractElement","","",null,null],[5,"LLVMBuildInsertElement","","",null,null],[5,"LLVMBuildShuffleVector","","",null,null],[5,"LLVMBuildExtractValue","","",null,null],[5,"LLVMBuildInsertValue","","",null,null],[5,"LLVMBuildIsNull","","",null,null],[5,"LLVMBuildIsNotNull","","",null,null],[5,"LLVMBuildPtrDiff","","",null,null],[5,"LLVMBuildFence","","",null,null],[5,"LLVMBuildAtomicRMW","","",null,null],[5,"LLVMCreateModuleProviderForExistingModule","","",null,null],[5,"LLVMDisposeModuleProvider","","",null,null],[5,"LLVMCreateMemoryBufferWithContentsOfFile","","",null,null],[5,"LLVMCreateMemoryBufferWithSTDIN","","",null,null],[5,"LLVMCreateMemoryBufferWithMemoryRange","","",null,null],[5,"LLVMCreateMemoryBufferWithMemoryRangeCopy","","",null,null],[5,"LLVMGetBufferStart","","",null,null],[5,"LLVMGetBufferSize","","",null,null],[5,"LLVMDisposeMemoryBuffer","","",null,null],[5,"LLVMGetGlobalPassRegistry","","",null,null],[5,"LLVMCreatePassManager","","",null,null],[5,"LLVMCreateFunctionPassManagerForModule","","",null,null],[5,"LLVMCreateFunctionPassManager","","",null,null],[5,"LLVMRunPassManager","","",null,null],[5,"LLVMInitializeFunctionPassManager","","",null,null],[5,"LLVMRunFunctionPassManager","","",null,null],[5,"LLVMFinalizeFunctionPassManager","","",null,null],[5,"LLVMDisposePassManager","","",null,null],[5,"LLVMStartMultithreaded","","Deprecated: LLVM threading is configured at compile-time with `LLVM_ENABLE_THREADS`",null,null],[5,"LLVMStopMultithreaded","","Deprecated: LLVM threading is configured at compile-time with `LLVM_ENABLE_THREADS`",null,null],[5,"LLVMIsMultithreaded","","",null,null],[0,"disassembler","llvm_sys","A disassembler library.",null,null],[3,"LLVMOpInfoSymbol1","llvm_sys::disassembler","",null,null],[12,"Present","","1 if this symbol is present.",14,null],[12,"Name","","Symbol name if not NULL.",14,null],[12,"Value","","Symbol value if name is NULL.",14,null],[3,"Struct_LLVMOpInfo1","","",null,null],[12,"AddSymbol","","",15,null],[12,"SubtractSymbol","","",15,null],[12,"Value","","",15,null],[12,"VariantKind","","",15,null],[4,"LLVMOpaqueDisasmContext","","",null,null],[5,"LLVMCreateDisasm","","",null,null],[5,"LLVMCreateDisasmCPU","","",null,null],[5,"LLVMCreateDisasmCPUFeatures","","",null,null],[5,"LLVMSetDisasmOptions","","",null,null],[5,"LLVMDisasmDispose","","",null,null],[5,"LLVMDisasmInstruction","","",null,null],[6,"LLVMDisasmContextRef","","",null,null],[6,"LLVMOpInfoCallback","","",null,null],[6,"LLVMSymbolLookupCallback","","",null,null],[17,"LLVMDisassembler_VariantKind_None","","",null,null],[17,"LLVMDisassembler_VariantKind_ARM_HI16","","",null,null],[17,"LLVMDisassembler_VariantKind_ARM_LO16","","",null,null],[17,"LLVMDisassembler_VariantKind_ARM64_PAGE","","",null,null],[17,"LLVMDisassembler_VariantKind_ARM64_PAGEOFF","","",null,null],[17,"LLVMDisassembler_VariantKind_ARM64_GOTPAGE","","",null,null],[17,"LLVMDisassembler_VariantKind_ARM64_GOTPAGEOFF","","",null,null],[17,"LLVMDisassembler_VariantKind_ARM64_TLVP","","",null,null],[17,"LLVMDisassembler_VariantKind_ARM64_TLVOFF","","",null,null],[17,"LLVMDisassembler_ReferenceType_InOut_None","","No input reference type or no output reference type.",null,null],[17,"LLVMDisassembler_ReferenceType_In_Branch","","The input reference is from a branch instruction.",null,null],[17,"LLVMDisassembler_ReferenceType_In_PCrel_Load","","The input reference is from a PC relative load instruction.",null,null],[17,"LLVMDisassembler_ReferenceType_In_ARM64_ADRP","","The input reference is from an ARM64::ADRP instruction.",null,null],[17,"LLVMDisassembler_ReferenceType_In_ARM64_ADDXri","","The input reference is from an ARM64::ADDXri instruction.",null,null],[17,"LLVMDisassembler_ReferenceType_In_ARM64_LDRXui","","The input reference is from an ARM64::LDRXui instruction.",null,null],[17,"LLVMDisassembler_ReferenceType_In_ARM64_LDRXl","","The input reference is from an ARM64::LDRXl instruction.",null,null],[17,"LLVMDisassembler_ReferenceType_In_ARM64_ADR","","The input reference is from an ARM64::ADR instruction.",null,null],[17,"LLVMDisassembler_ReferenceType_Out_SymbolStub","","The output reference is to as symbol stub.",null,null],[17,"LLVMDisassembler_ReferenceType_Out_LitPool_SymAddr","","The output reference is to a symbol address in a literal pool.",null,null],[17,"LLVMDisassembler_ReferenceType_Out_LitPool_CstrAddr","","The output reference is to a cstring address in a literal pool.",null,null],[17,"LLVMDisassembler_ReferenceType_Out_Objc_CFString_Ref","","The output reference is to a Objective-C CoreFoundation string.",null,null],[17,"LLVMDisassembler_ReferenceType_Out_Objc_Message","","The output reference is to a Objective-C message.",null,null],[17,"LLVMDisassembler_ReferenceType_Out_Objc_Message_Ref","","The output reference is to a Objective-C message ref.",null,null],[17,"LLVMDisassembler_ReferenceType_Out_Objc_Selector_Ref","","The output reference is to a Objective-C selector ref.",null,null],[17,"LLVMDisassembler_ReferenceType_Out_Objc_Class_Ref","","The output reference is to a Objective-C class ref.",null,null],[17,"LLVMDisassembler_ReferenceType_DeMangled_Name","","The output reference is to a C++ symbol name.",null,null],[17,"LLVMDisassembler_Option_UseMarkup","","The option to produce marked up assembly.",null,null],[17,"LLVMDisassembler_Option_PrintImmHex","","The option to print immediates as hex.",null,null],[17,"LLVMDisassembler_Option_AsmPrinterVariant","","The option use the other assembler printer variant",null,null],[17,"LLVMDisassembler_Option_SetInstrComments","","The option to set comment on instructions",null,null],[17,"LLVMDisassembler_Option_PrintLatency","","The option to print latency information alongside instructions",null,null],[0,"error_handling","llvm_sys","",null,null],[5,"LLVMInstallFatalErrorHandler","llvm_sys::error_handling","Install a fatal error handler.",null,null],[5,"LLVMResetFatalErrorHandler","","Reset fatal error handling to the default.",null,null],[5,"LLVMEnablePrettyStackTrace","","Enable LLVM's build-in stack trace code.",null,null],[6,"LLVMFatalErrorHandler","","",null,null],[0,"execution_engine","llvm_sys","Runtime code generation and execution.",null,null],[3,"LLVMMCJITCompilerOptions","llvm_sys::execution_engine","",null,null],[12,"OptLevel","","",16,null],[12,"CodeModel","","",16,null],[12,"NoFramePointerElim","","",16,null],[12,"EnableFastISel","","",16,null],[12,"MCJMM","","",16,null],[4,"LLVMOpaqueGenericValue","","",null,null],[4,"LLVMOpaqueExecutionEngine","","",null,null],[4,"LLVMOpaqueMCJITMemoryManager","","",null,null],[5,"LLVMLinkInMCJIT","","",null,null],[5,"LLVMLinkInInterpreter","","",null,null],[5,"LLVMCreateGenericValueOfInt","","",null,null],[5,"LLVMCreateGenericValueOfPointer","","",null,null],[5,"LLVMCreateGenericValueOfFloat","","",null,null],[5,"LLVMGenericValueIntWidth","","",null,null],[5,"LLVMGenericValueToInt","","",null,null],[5,"LLVMGenericValueToPointer","","",null,null],[5,"LLVMGenericValueToFloat","","",null,null],[5,"LLVMDisposeGenericValue","","",null,null],[5,"LLVMCreateExecutionEngineForModule","","",null,null],[5,"LLVMCreateInterpreterForModule","","",null,null],[5,"LLVMCreateJITCompilerForModule","","",null,null],[5,"LLVMInitializeMCJITCompilerOptions","","",null,null],[5,"LLVMCreateMCJITCompilerForModule","","Create an MCJIT execution engine for a module, with the given options.",null,null],[5,"LLVMDisposeExecutionEngine","","",null,null],[5,"LLVMRunStaticConstructors","","",null,null],[5,"LLVMRunStaticDestructors","","",null,null],[5,"LLVMRunFunctionAsMain","","",null,null],[5,"LLVMRunFunction","","",null,null],[5,"LLVMFreeMachineCodeForFunction","","",null,null],[5,"LLVMAddModule","","",null,null],[5,"LLVMRemoveModule","","",null,null],[5,"LLVMFindFunction","","",null,null],[5,"LLVMRecompileAndRelinkFunction","","",null,null],[5,"LLVMGetExecutionEngineTargetData","","",null,null],[5,"LLVMGetExecutionEngineTargetMachine","","",null,null],[5,"LLVMAddGlobalMapping","","",null,null],[5,"LLVMGetPointerToGlobal","","",null,null],[5,"LLVMGetGlobalValueAddress","","",null,null],[5,"LLVMGetFunctionAddress","","",null,null],[5,"LLVMCreateSimpleMCJITMemoryManager","","",null,null],[5,"LLVMDisposeMCJITMemoryManager","","",null,null],[6,"LLVMGenericValueRef","","",null,null],[6,"LLVMExecutionEngineRef","","",null,null],[6,"LLVMMCJITMemoryManagerRef","","",null,null],[6,"LLVMMemoryManagerAllocateCodeSectionCallback","","",null,null],[6,"LLVMMemoryManagerAllocateDataSectionCallback","","",null,null],[6,"LLVMMemoryManagerFinalizeMemoryCallback","","",null,null],[6,"LLVMMemoryManagerDestroyCallback","","",null,null],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"llvmmcjitcompileroptions"}}],[0,"initialization","llvm_sys","Initialization routines which must be called before using library features.",null,null],[5,"LLVMInitializeCore","llvm_sys::initialization","",null,null],[5,"LLVMInitializeTransformUtils","","",null,null],[5,"LLVMInitializeScalarOpts","","",null,null],[5,"LLVMInitializeObjCARCOpts","","",null,null],[5,"LLVMInitializeVectorization","","",null,null],[5,"LLVMInitializeInstCombine","","",null,null],[5,"LLVMInitializeIPO","","",null,null],[5,"LLVMInitializeInstrumentation","","",null,null],[5,"LLVMInitializeAnalysis","","",null,null],[5,"LLVMInitializeIPA","","",null,null],[5,"LLVMInitializeCodeGen","","",null,null],[5,"LLVMInitializeTarget","","",null,null],[0,"ir_reader","llvm_sys","The IR reader",null,null],[5,"LLVMParseIRInContext","llvm_sys::ir_reader","Read LLVM IR from a memory buffer and convert it to an in-memory Module.",null,null],[0,"link_time_optimizer","llvm_sys","Link-time-optimization",null,null],[4,"llvm_lto_status_t","llvm_sys::link_time_optimizer","",null,null],[13,"LLVM_LTO_UNKNOWN","","",17,null],[13,"LLVM_LTO_OPT_SUCCESS","","",17,null],[13,"LLVM_LTO_READ_SUCCESS","","",17,null],[13,"LLVM_LTO_READ_FAILURE","","",17,null],[13,"LLVM_LTO_WRITE_FAILURE","","",17,null],[13,"LLVM_LTO_NO_TARGET","","",17,null],[13,"LLVM_LTO_NO_WORK","","",17,null],[13,"LLVM_LTO_MODULE_MERGE_FAILURE","","",17,null],[13,"LLVM_LTO_ASM_FAILURE","","",17,null],[13,"LLVM_LTO_NULL_OBJECT","","",17,null],[5,"llvm_create_optimizer","","",null,null],[5,"llvm_destroy_optimizer","","",null,null],[5,"llvm_read_object_file","","",null,null],[5,"llvm_optimize_modules","","",null,null],[6,"llvm_lto_t","","Dummy type for pointers to the LTO object",null,null],[0,"linker","llvm_sys","The module/file/archive linker",null,null],[4,"LLVMLinkerMode","llvm_sys::linker","",null,null],[13,"LLVMLinkerDestroySource","","",18,null],[13,"LLVMLinkerPreserveSource_Removed","","",18,null],[5,"LLVMLinkModules","","Link the source module into the destination.",null,null],[5,"LLVMLinkModules2","","Link the source module into the destination module.",null,null],[0,"lto","llvm_sys","Abstract link time optimization.",null,null],[4,"lto_symbol_attributes","llvm_sys::lto","",null,null],[13,"LTO_SYMBOL_ALIGNMENT_MASK","","",19,null],[13,"LTO_SYMBOL_PERMISSIONS_MASK","","",19,null],[13,"LTO_SYMBOL_PERMISSIONS_CODE","","",19,null],[13,"LTO_SYMBOL_PERMISSIONS_DATA","","",19,null],[13,"LTO_SYMBOL_PERMISSIONS_RODATA","","",19,null],[13,"LTO_SYMBOL_DEFINITION_MASK","","",19,null],[13,"LTO_SYMBOL_DEFINITION_REGULAR","","",19,null],[13,"LTO_SYMBOL_DEFINITION_TENTATIVE","","",19,null],[13,"LTO_SYMBOL_DEFINITION_WEAK","","",19,null],[13,"LTO_SYMBOL_DEFINITION_UNDEFINED","","",19,null],[13,"LTO_SYMBOL_DEFINITION_WEAKUNDEF","","",19,null],[13,"LTO_SYMBOL_SCOPE_MASK","","",19,null],[13,"LTO_SYMBOL_SCOPE_INTERNAL","","",19,null],[13,"LTO_SYMBOL_SCOPE_HIDDEN","","",19,null],[13,"LTO_SYMBOL_SCOPE_PROTECTED","","",19,null],[13,"LTO_SYMBOL_SCOPE_DEFAULT","","",19,null],[13,"LTO_SYMBOL_SCOPE_DEFAULT_CAN_BE_HIDDEN","","",19,null],[13,"LTO_SYMBOL_COMDAT","","Added in LLVM 3.7.",19,null],[13,"LTO_SYMBOL_ALIAS","","Added in LLVM 3.7.",19,null],[4,"lto_debug_model","","",null,null],[13,"LTO_DEBUG_MODEL_NONE","","",20,null],[13,"LTO_DEBUG_MODEL_DWARF","","",20,null],[4,"lto_codegen_model","","",null,null],[13,"LTO_CODEGEN_PIC_MODEL_STATIC","","",21,null],[13,"LTO_CODEGEN_PIC_MODEL_DYNAMIC","","",21,null],[13,"LTO_CODEGEN_PIC_MODEL_DYNAMIC_NO_PIC","","",21,null],[13,"LTO_CODEGEN_PIC_MODEL_DEFAULT","","",21,null],[4,"LLVMOpaqueLTOModule","","",null,null],[4,"LLVMOpaqueLTOCodeGenerator","","",null,null],[4,"lto_codegen_diagnostic_severity_t","","",null,null],[13,"LTO_DS_ERROR","","",22,null],[13,"LTO_DS_WARNING","","",22,null],[13,"LTO_DS_REMARK","","",22,null],[13,"LTO_DS_NOTE","","",22,null],[5,"lto_get_version","","",null,null],[5,"lto_get_error_message","","",null,null],[5,"lto_module_is_object_file","","",null,null],[5,"lto_module_is_object_file_for_target","","",null,null],[5,"lto_module_is_object_file_in_memory","","",null,null],[5,"lto_module_is_object_file_in_memory_for_target","","",null,null],[5,"lto_module_create","","",null,null],[5,"lto_module_create_from_memory","","",null,null],[5,"lto_module_create_from_memory_with_path","","",null,null],[5,"lto_module_create_in_local_context","","",null,null],[5,"lto_module_create_in_codegen_context","","",null,null],[5,"lto_module_create_from_fd","","",null,null],[5,"lto_module_create_from_fd_at_offset","","",null,null],[5,"lto_module_dispose","","",null,null],[5,"lto_module_get_target_triple","","",null,null],[5,"lto_module_set_target_triple","","",null,null],[5,"lto_module_get_num_symbols","","",null,null],[5,"lto_module_get_symbol_name","","",null,null],[5,"lto_module_get_symbol_attribute","","",null,null],[5,"lto_module_get_linkeropts","","Returns the module's linker options.",null,null],[5,"lto_codegen_set_diagnostic_handler","","",null,null],[5,"lto_codegen_create","","",null,null],[5,"lto_codegen_create_in_local_context","","",null,null],[5,"lto_codegen_dispose","","",null,null],[5,"lto_codegen_add_module","","",null,null],[5,"lto_codegen_set_module","","Sets the object module for code gneeration. This will transfer ownership of the module to the code generator.",null,null],[5,"lto_codegen_set_debug_model","","",null,null],[5,"lto_codegen_set_pic_model","","",null,null],[5,"lto_codegen_set_cpu","","",null,null],[5,"lto_codegen_set_assembler_path","","",null,null],[5,"lto_codegen_set_assembler_args","","",null,null],[5,"lto_codegen_add_must_preserve_symbol","","",null,null],[5,"lto_codegen_write_merged_modules","","",null,null],[5,"lto_codegen_compile","","",null,null],[5,"lto_codegen_compile_to_file","","",null,null],[5,"lto_codegen_optimize","","Runs optimization for the merged module.",null,null],[5,"lto_codegen_compile_optimized","","Generates code for the optimized merged module into one native object file.",null,null],[5,"lto_api_version","","Returns the runtime API version.",null,null],[5,"lto_codegen_debug_options","","",null,null],[5,"lto_initialize_disassembler","","",null,null],[5,"lto_codegen_set_should_internalize","","Sets if we should run the itnernalize pass during optimization and code generation.",null,null],[5,"lto_codegen_set_should_embed_uselists","","Set whether to embed uselists in bitcode.",null,null],[6,"lto_bool_t","","",null,null],[6,"lto_module_t","","",null,null],[6,"lto_code_gen_t","","",null,null],[6,"lto_diagnostic_handler_t","","",null,null],[0,"object","llvm_sys","Object file reading and writing",null,null],[4,"LLVMOpaqueObjectFile","llvm_sys::object","",null,null],[4,"LLVMOpaqueSectionIterator","","",null,null],[4,"LLVMOpaqueSymbolIterator","","",null,null],[4,"LLVMOpaqueRelocationIterator","","",null,null],[5,"LLVMCreateObjectFile","","",null,null],[5,"LLVMDisposeObjectFile","","",null,null],[5,"LLVMGetSections","","",null,null],[5,"LLVMDisposeSectionIterator","","",null,null],[5,"LLVMIsSectionIteratorAtEnd","","",null,null],[5,"LLVMMoveToNextSection","","",null,null],[5,"LLVMMoveToContainingSection","","",null,null],[5,"LLVMGetSymbols","","",null,null],[5,"LLVMDisposeSymbolIterator","","",null,null],[5,"LLVMIsSymbolIteratorAtEnd","","",null,null],[5,"LLVMMoveToNextSymbol","","",null,null],[5,"LLVMGetSectionName","","",null,null],[5,"LLVMGetSectionSize","","",null,null],[5,"LLVMGetSectionContents","","",null,null],[5,"LLVMGetSectionAddress","","",null,null],[5,"LLVMGetSectionContainsSymbol","","",null,null],[5,"LLVMGetRelocations","","",null,null],[5,"LLVMDisposeRelocationIterator","","",null,null],[5,"LLVMIsRelocationIteratorAtEnd","","",null,null],[5,"LLVMMoveToNextRelocation","","",null,null],[5,"LLVMGetSymbolName","","",null,null],[5,"LLVMGetSymbolAddress","","",null,null],[5,"LLVMGetSymbolSize","","",null,null],[5,"LLVMGetRelocationOffset","","",null,null],[5,"LLVMGetRelocationSymbol","","",null,null],[5,"LLVMGetRelocationType","","",null,null],[5,"LLVMGetRelocationTypeName","","",null,null],[5,"LLVMGetRelocationValueString","","",null,null],[6,"LLVMObjectFileRef","","",null,null],[6,"LLVMSectionIteratorRef","","",null,null],[6,"LLVMSymbolIteratorRef","","",null,null],[6,"LLVMRelocationIteratorRef","","",null,null],[0,"orc","llvm_sys","The ORC JIT.",null,null],[4,"LLVMOrcOpaqueJITStack","llvm_sys::orc","",null,null],[5,"LLVMOrcCreateInstance","","Create an ORC JIT stack.",null,null],[5,"LLVMOrcGetMangledSymbol","","Mangle the given symbol.",null,null],[5,"LLVMOrcDisposeMangledSymbol","","Dispose of a mangled symbol.",null,null],[5,"LLVMOrcCreateLazyCompileCallback","","Create a lazy compile callback.",null,null],[5,"LLVMOrcCreateIndirectStub","","Create a named indirect call stub.",null,null],[5,"LLVMOrcSetIndirectStubPointer","","Set the pointer for the given indirect stub.",null,null],[5,"LLVMOrcAddEagerlyCompiledIR","","Add a module to be eagerly compiled.",null,null],[5,"LLVMOrcAddLazilyCompiledIR","","Add a module to be lazily compiled one function at a time.",null,null],[5,"LLVMOrcAddObjectFile","","Add an object file.",null,null],[5,"LLVMOrcRemoveModule","","Remove a module set from the JIT.",null,null],[5,"LLVMOrcGetSymbolAddress","","Get symbol address from JIT instance.",null,null],[5,"LLVMOrcDisposeInstance","","Dispose of an ORC JIT stack.",null,null],[6,"LLVMOrcJITStackRef","","",null,null],[6,"LLVMOrcModuleHandle","","",null,null],[6,"LLVMOrcTargetAddress","","",null,null],[6,"LLVMOrcSymbolResolverFn","","",null,null],[6,"LLVMOrcLazyCompileCallbackFn","","",null,null],[0,"target","llvm_sys","Target information",null,null],[4,"LLVMByteOrdering","llvm_sys::target","",null,null],[13,"LLVMBigEndian","","",23,null],[13,"LLVMLittleEndian","","",23,null],[4,"LLVMOpaqueTargetData","","",null,null],[4,"LLVMOpaqueTargetLibraryInfotData","","",null,null],[5,"LLVMInitializeAMDGPUTargetInfo","","",null,null],[5,"LLVMInitializeAMDGPUTarget","","",null,null],[5,"LLVMInitializeAMDGPUTargetMC","","",null,null],[5,"LLVMInitializeAMDGPUAsmPrinter","","",null,null],[5,"LLVMInitializeAMDGPUAsmParser","","",null,null],[5,"LLVMInitializeSystemZTargetInfo","","",null,null],[5,"LLVMInitializeSystemZTarget","","",null,null],[5,"LLVMInitializeSystemZTargetMC","","",null,null],[5,"LLVMInitializeSystemZAsmPrinter","","",null,null],[5,"LLVMInitializeSystemZAsmParser","","",null,null],[5,"LLVMInitializeSystemZDisassembler","","",null,null],[5,"LLVMInitializeHexagonTargetInfo","","",null,null],[5,"LLVMInitializeHexagonTarget","","",null,null],[5,"LLVMInitializeHexagonTargetMC","","",null,null],[5,"LLVMInitializeHexagonAsmPrinter","","",null,null],[5,"LLVMInitializeHexagonDisassembler","","",null,null],[5,"LLVMInitializeNVPTXTargetInfo","","",null,null],[5,"LLVMInitializeNVPTXTarget","","",null,null],[5,"LLVMInitializeNVPTXTargetMC","","",null,null],[5,"LLVMInitializeNVPTXAsmPrinter","","",null,null],[5,"LLVMInitializeCppBackendTargetInfo","","",null,null],[5,"LLVMInitializeCppBackendTarget","","",null,null],[5,"LLVMInitializeCppBackendTargetMC","","",null,null],[5,"LLVMInitializeMSP430TargetInfo","","",null,null],[5,"LLVMInitializeMSP430Target","","",null,null],[5,"LLVMInitializeMSP430TargetMC","","",null,null],[5,"LLVMInitializeMSP430AsmPrinter","","",null,null],[5,"LLVMInitializeXCoreTargetInfo","","",null,null],[5,"LLVMInitializeXCoreTarget","","",null,null],[5,"LLVMInitializeXCoreTargetMC","","",null,null],[5,"LLVMInitializeXCoreAsmPrinter","","",null,null],[5,"LLVMInitializeXCoreDisassembler","","",null,null],[5,"LLVMInitializeMipsTargetInfo","","",null,null],[5,"LLVMInitializeMipsTarget","","",null,null],[5,"LLVMInitializeMipsTargetMC","","",null,null],[5,"LLVMInitializeMipsAsmPrinter","","",null,null],[5,"LLVMInitializeMipsAsmParser","","",null,null],[5,"LLVMInitializeMipsDisassembler","","",null,null],[5,"LLVMInitializeAArch64TargetInfo","","",null,null],[5,"LLVMInitializeAArch64Target","","",null,null],[5,"LLVMInitializeAArch64TargetMC","","",null,null],[5,"LLVMInitializeAArch64AsmPrinter","","",null,null],[5,"LLVMInitializeAArch64AsmParser","","",null,null],[5,"LLVMInitializeAArch64Disassembler","","",null,null],[5,"LLVMInitializeARMTargetInfo","","",null,null],[5,"LLVMInitializeARMTarget","","",null,null],[5,"LLVMInitializeARMTargetMC","","",null,null],[5,"LLVMInitializeARMAsmPrinter","","",null,null],[5,"LLVMInitializeARMAsmParser","","",null,null],[5,"LLVMInitializeARMDisassembler","","",null,null],[5,"LLVMInitializePowerPCTargetInfo","","",null,null],[5,"LLVMInitializePowerPCTarget","","",null,null],[5,"LLVMInitializePowerPCTargetMC","","",null,null],[5,"LLVMInitializePowerPCAsmPrinter","","",null,null],[5,"LLVMInitializePowerPCAsmParser","","",null,null],[5,"LLVMInitializePowerPCDisassembler","","",null,null],[5,"LLVMInitializeSparcTargetInfo","","",null,null],[5,"LLVMInitializeSparcTarget","","",null,null],[5,"LLVMInitializeSparcTargetMC","","",null,null],[5,"LLVMInitializeSparcAsmPrinter","","",null,null],[5,"LLVMInitializeSparcAsmParser","","",null,null],[5,"LLVMInitializeSparcDisassembler","","",null,null],[5,"LLVMInitializeX86TargetInfo","","",null,null],[5,"LLVMInitializeX86Target","","",null,null],[5,"LLVMInitializeX86TargetMC","","",null,null],[5,"LLVMInitializeX86AsmPrinter","","",null,null],[5,"LLVMInitializeX86AsmParser","","",null,null],[5,"LLVMInitializeX86Disassembler","","",null,null],[5,"LLVMInitializeBPFTargetInfo","","",null,null],[5,"LLVMInitializeBPFTarget","","",null,null],[5,"LLVMInitializeBPFTargetMC","","",null,null],[5,"LLVMInitializeBPFAsmPrinter","","",null,null],[5,"LLVMCreateTargetData","","",null,null],[5,"LLVMAddTargetData","","",null,null],[5,"LLVMAddTargetLibraryInfo","","",null,null],[5,"LLVMCopyStringRepOfTargetData","","",null,null],[5,"LLVMByteOrder","","",null,null],[5,"LLVMPointerSize","","",null,null],[5,"LLVMPointerSizeForAS","","",null,null],[5,"LLVMIntPtrType","","",null,null],[5,"LLVMIntPtrTypeForAS","","",null,null],[5,"LLVMIntPtrTypeInContext","","",null,null],[5,"LLVMIntPtrTypeForASInContext","","",null,null],[5,"LLVMSizeOfTypeInBits","","",null,null],[5,"LLVMStoreSizeOfType","","",null,null],[5,"LLVMABISizeOfType","","",null,null],[5,"LLVMABIAlignmentOfType","","",null,null],[5,"LLVMCallFrameAlignmentOfType","","",null,null],[5,"LLVMPreferredAlignmentOfType","","",null,null],[5,"LLVMPreferredAlignmentOfGlobal","","",null,null],[5,"LLVMElementAtOffset","","",null,null],[5,"LLVMOffsetOfElement","","",null,null],[5,"LLVMDisposeTargetData","","",null,null],[5,"LLVM_InitializeAllTargetInfos","","",null,null],[5,"LLVM_InitializeAllTargets","","",null,null],[5,"LLVM_InitializeAllTargetMCs","","",null,null],[5,"LLVM_InitializeAllAsmPrinters","","",null,null],[5,"LLVM_InitializeAllAsmParsers","","",null,null],[5,"LLVM_InitializeAllDisassemblers","","",null,null],[5,"LLVM_InitializeNativeTarget","","Returns 1 on failure.",null,null],[5,"LLVM_InitializeNativeAsmParser","","Returns 1 on failure.",null,null],[5,"LLVM_InitializeNativeAsmPrinter","","Returns 1 on failure.",null,null],[5,"LLVM_InitializeNativeDisassembler","","Returns 1 on failure.",null,null],[6,"LLVMTargetDataRef","","",null,null],[6,"LLVMTargetLibraryInfoRef","","",null,null],[0,"support","llvm_sys","",null,null],[5,"LLVMLoadLibraryPermanently","llvm_sys::support","",null,null],[5,"LLVMParseCommandLineOptions","","",null,null],[5,"LLVMSearchForAddressOfSymbol","","Search all previously loaded dynamic libraries for the named symbol.",null,null],[5,"LLVMAddSymbol","","Permanently add the named symbol with the provided value.",null,null],[0,"target_machine","llvm_sys","Target machine information, to generate assembly or object files.",null,null],[4,"LLVMOpaqueTargetMachine","llvm_sys::target_machine","",null,null],[4,"LLVMTarget","","",null,null],[4,"LLVMCodeGenOptLevel","","",null,null],[13,"LLVMCodeGenLevelNone","","",24,null],[13,"LLVMCodeGenLevelLess","","",24,null],[13,"LLVMCodeGenLevelDefault","","",24,null],[13,"LLVMCodeGenLevelAggressive","","",24,null],[4,"LLVMRelocMode","","",null,null],[13,"LLVMRelocDefault","","",25,null],[13,"LLVMRelocStatic","","",25,null],[13,"LLVMRelocPIC","","",25,null],[13,"LLVMRelocDynamicNoPic","","",25,null],[4,"LLVMCodeModel","","",null,null],[13,"LLVMCodeModelDefault","","",26,null],[13,"LLVMCodeModelJITDefault","","",26,null],[13,"LLVMCodeModelSmall","","",26,null],[13,"LLVMCodeModelKernel","","",26,null],[13,"LLVMCodeModelMedium","","",26,null],[13,"LLVMCodeModelLarge","","",26,null],[4,"LLVMCodeGenFileType","","",null,null],[13,"LLVMAssemblyFile","","",27,null],[13,"LLVMObjectFile","","",27,null],[5,"LLVMGetFirstTarget","","",null,null],[5,"LLVMGetNextTarget","","",null,null],[5,"LLVMGetTargetFromName","","",null,null],[5,"LLVMGetTargetFromTriple","","",null,null],[5,"LLVMGetTargetName","","",null,null],[5,"LLVMGetTargetDescription","","",null,null],[5,"LLVMTargetHasJIT","","",null,null],[5,"LLVMTargetHasTargetMachine","","",null,null],[5,"LLVMTargetHasAsmBackend","","",null,null],[5,"LLVMCreateTargetMachine","","",null,null],[5,"LLVMDisposeTargetMachine","","",null,null],[5,"LLVMGetTargetMachineTarget","","",null,null],[5,"LLVMGetTargetMachineTriple","","",null,null],[5,"LLVMGetTargetMachineCPU","","",null,null],[5,"LLVMGetTargetMachineFeatureString","","",null,null],[5,"LLVMGetTargetMachineData","","Returns the DataLayout used for this Targetmachine.",null,null],[5,"LLVMSetTargetMachineAsmVerbosity","","",null,null],[5,"LLVMTargetMachineEmitToFile","","",null,null],[5,"LLVMTargetMachineEmitToMemoryBuffer","","",null,null],[5,"LLVMGetDefaultTargetTriple","","",null,null],[5,"LLVMAddAnalysisPasses","","",null,null],[6,"LLVMTargetMachineRef","","",null,null],[6,"LLVMTargetRef","","",null,null],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"llvmcodemodel"}}],[0,"transforms","llvm_sys","",null,null],[0,"ipo","llvm_sys::transforms","Interprocedural transformations of LLVM IR.",null,null],[5,"LLVMAddArgumentPromotionPass","llvm_sys::transforms::ipo","",null,null],[5,"LLVMAddConstantMergePass","","",null,null],[5,"LLVMAddDeadArgEliminationPass","","",null,null],[5,"LLVMAddFunctionAttrsPass","","",null,null],[5,"LLVMAddFunctionInliningPass","","",null,null],[5,"LLVMAddAlwaysInlinerPass","","",null,null],[5,"LLVMAddGlobalDCEPass","","",null,null],[5,"LLVMAddGlobalOptimizerPass","","",null,null],[5,"LLVMAddIPConstantPropagationPass","","",null,null],[5,"LLVMAddPruneEHPass","","",null,null],[5,"LLVMAddIPSCCPPass","","",null,null],[5,"LLVMAddInternalizePass","","",null,null],[5,"LLVMAddStripDeadPrototypesPass","","",null,null],[5,"LLVMAddStripSymbolsPass","","",null,null],[0,"pass_manager_builder","llvm_sys::transforms","",null,null],[4,"LLVMOpaquePassManagerBuilder","llvm_sys::transforms::pass_manager_builder","",null,null],[5,"LLVMPassManagerBuilderCreate","","",null,null],[5,"LLVMPassManagerBuilderDispose","","",null,null],[5,"LLVMPassManagerBuilderSetOptLevel","","",null,null],[5,"LLVMPassManagerBuilderSetSizeLevel","","",null,null],[5,"LLVMPassManagerBuilderSetDisableUnitAtATime","","",null,null],[5,"LLVMPassManagerBuilderSetDisableUnrollLoops","","",null,null],[5,"LLVMPassManagerBuilderSetDisableSimplifyLibCalls","","",null,null],[5,"LLVMPassManagerBuilderUseInlinerWithThreshold","","",null,null],[5,"LLVMPassManagerBuilderPopulateFunctionPassManager","","",null,null],[5,"LLVMPassManagerBuilderPopulateModulePassManager","","",null,null],[5,"LLVMPassManagerBuilderPopulateLTOPassManager","","",null,null],[6,"LLVMPassManagerBuilderRef","","",null,null],[0,"scalar","llvm_sys::transforms","Scalar transformations of LLVM IR.",null,null],[5,"LLVMAddAggressiveDCEPass","llvm_sys::transforms::scalar","",null,null],[5,"LLVMAddBitTrackingDCEPass","","Added in LLVM 3.7.",null,null],[5,"LLVMAddAlignmentFromAssumptionsPass","","",null,null],[5,"LLVMAddCFGSimplificationPass","","",null,null],[5,"LLVMAddDeadStoreEliminationPass","","",null,null],[5,"LLVMAddScalarizerPass","","",null,null],[5,"LLVMAddMergedLoadStoreMotionPass","","",null,null],[5,"LLVMAddGVNPass","","",null,null],[5,"LLVMAddIndVarSimplifyPass","","",null,null],[5,"LLVMAddInstructionCombiningPass","","",null,null],[5,"LLVMAddJumpThreadingPass","","",null,null],[5,"LLVMAddLICMPass","","",null,null],[5,"LLVMAddLoopDeletionPass","","",null,null],[5,"LLVMAddLoopIdiomPass","","",null,null],[5,"LLVMAddLoopRotatePass","","",null,null],[5,"LLVMAddLoopRerollPass","","",null,null],[5,"LLVMAddLoopUnrollPass","","",null,null],[5,"LLVMAddLoopUnswitchPass","","",null,null],[5,"LLVMAddMemCpyOptPass","","",null,null],[5,"LLVMAddPartiallyInlineLibCallsPass","","",null,null],[5,"LLVMAddLowerSwitchPass","","",null,null],[5,"LLVMAddPromoteMemoryToRegisterPass","","",null,null],[5,"LLVMAddReassociatePass","","",null,null],[5,"LLVMAddSCCPPass","","",null,null],[5,"LLVMAddScalarReplAggregatesPass","","",null,null],[5,"LLVMAddScalarReplAggregatesPassSSA","","",null,null],[5,"LLVMAddScalarReplAggregatesPassWithThreshold","","",null,null],[5,"LLVMAddSimplifyLibCallsPass","","",null,null],[5,"LLVMAddTailCallEliminationPass","","",null,null],[5,"LLVMAddConstantPropagationPass","","",null,null],[5,"LLVMAddDemoteMemoryToRegisterPass","","",null,null],[5,"LLVMAddVerifierPass","","",null,null],[5,"LLVMAddCorrelatedValuePropagationPass","","",null,null],[5,"LLVMAddEarlyCSEPass","","",null,null],[5,"LLVMAddLowerExpectIntrinsicPass","","",null,null],[5,"LLVMAddTypeBasedAliasAnalysisPass","","",null,null],[5,"LLVMAddScopedNoAliasAAPass","","",null,null],[5,"LLVMAddBasicAliasAnalysisPass","","",null,null],[0,"vectorize","llvm_sys::transforms","Vectorization transformations of LLVM IR.",null,null],[5,"LLVMAddBBVectorizePass","llvm_sys::transforms::vectorize","",null,null],[5,"LLVMAddLoopVectorizePass","","",null,null],[5,"LLVMAddSLPVectorizePass","","",null,null],[6,"LLVMDiagnosticHandler","llvm_sys","",null,null],[6,"LLVMYieldCallback","","",null,null],[17,"LLVMZExtAttribute","","",null,null],[17,"LLVMSExtAttribute","","",null,null],[17,"LLVMNoReturnAttribute","","",null,null],[17,"LLVMInRegAttribute","","",null,null],[17,"LLVMStructRetAttribute","","",null,null],[17,"LLVMNoUnwindAttribute","","",null,null],[17,"LLVMNoAliasAttribute","","",null,null],[17,"LLVMByValAttribute","","",null,null],[17,"LLVMNestAttribute","","",null,null],[17,"LLVMReadNoneAttribute","","",null,null],[17,"LLVMReadOnlyAttribute","","",null,null],[17,"LLVMNoInlineAttribute","","",null,null],[17,"LLVMAlwaysInlineAttribute","","",null,null],[17,"LLVMOptimizeForSizeAttribute","","",null,null],[17,"LLVMStackProtectAttribute","","",null,null],[17,"LLVMStackProtectReqAttribute","","",null,null],[17,"LLVMAlignment","","",null,null],[17,"LLVMNoCaptureAttribute","","",null,null],[17,"LLVMNoRedZoneAttribute","","",null,null],[17,"LLVMNoImplicitFloatAttribute","","",null,null],[17,"LLVMNakedAttribute","","",null,null],[17,"LLVMInlineHintAttribute","","",null,null],[17,"LLVMStackAlignment","","",null,null],[17,"LLVMReturnsTwice","","",null,null],[17,"LLVMUWTable","","",null,null],[17,"LLVMNonLazyBind","","",null,null],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"llvmattribute"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"llvmattribute"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"llvmattribute"}}],[11,"partial_cmp","","",28,{"inputs":[{"name":"self"},{"name":"llvmattribute"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",28,{"inputs":[{"name":"self"},{"name":"llvmattribute"}],"output":{"name":"bool"}}],[11,"le","","",28,{"inputs":[{"name":"self"},{"name":"llvmattribute"}],"output":{"name":"bool"}}],[11,"gt","","",28,{"inputs":[{"name":"self"},{"name":"llvmattribute"}],"output":{"name":"bool"}}],[11,"ge","","",28,{"inputs":[{"name":"self"},{"name":"llvmattribute"}],"output":{"name":"bool"}}],[11,"cmp","","",28,{"inputs":[{"name":"self"},{"name":"llvmattribute"}],"output":{"name":"ordering"}}],[11,"hash","","",28,null],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",28,{"inputs":[],"output":{"name":"llvmattribute"}}],[11,"all","","Returns the set containing all flags.",28,{"inputs":[],"output":{"name":"llvmattribute"}}],[11,"bits","","Returns the raw value of the flags currently stored.",28,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",28,{"inputs":[{"name":"c_int"}],"output":{"generics":["llvmattribute"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",28,{"inputs":[{"name":"c_int"}],"output":{"name":"llvmattribute"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",28,{"inputs":[{"name":"self"},{"name":"llvmattribute"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",28,{"inputs":[{"name":"self"},{"name":"llvmattribute"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",28,{"inputs":[{"name":"self"},{"name":"llvmattribute"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",28,{"inputs":[{"name":"self"},{"name":"llvmattribute"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",28,{"inputs":[{"name":"self"},{"name":"llvmattribute"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",28,{"inputs":[{"name":"self"},{"name":"llvmattribute"}],"output":{"name":"llvmattribute"}}],[11,"bitor_assign","","Adds the set of flags.",28,{"inputs":[{"name":"self"},{"name":"llvmattribute"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",28,{"inputs":[{"name":"self"},{"name":"llvmattribute"}],"output":{"name":"llvmattribute"}}],[11,"bitxor_assign","","Toggles the set of flags.",28,{"inputs":[{"name":"self"},{"name":"llvmattribute"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",28,{"inputs":[{"name":"self"},{"name":"llvmattribute"}],"output":{"name":"llvmattribute"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",28,{"inputs":[{"name":"self"},{"name":"llvmattribute"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",28,{"inputs":[{"name":"self"},{"name":"llvmattribute"}],"output":{"name":"llvmattribute"}}],[11,"sub_assign","","Disables all flags enabled in the set.",28,{"inputs":[{"name":"self"},{"name":"llvmattribute"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",28,{"inputs":[{"name":"self"}],"output":{"name":"llvmattribute"}}],[11,"extend","","",28,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",28,{"inputs":[{"name":"t"}],"output":{"name":"llvmattribute"}}]],"paths":[[4,"LLVMOpcode"],[4,"LLVMTypeKind"],[4,"LLVMLinkage"],[4,"LLVMVisibility"],[4,"LLVMDLLStorageClass"],[4,"LLVMCallConv"],[4,"LLVMIntPredicate"],[4,"LLVMRealPredicate"],[4,"LLVMLandingPadClauseTy"],[4,"LLVMThreadLocalMode"],[4,"LLVMAtomicOrdering"],[4,"LLVMAtomicRMWBinOp"],[4,"LLVMDiagnosticSeverity"],[4,"LLVMVerifierFailureAction"],[3,"LLVMOpInfoSymbol1"],[3,"Struct_LLVMOpInfo1"],[3,"LLVMMCJITCompilerOptions"],[4,"llvm_lto_status_t"],[4,"LLVMLinkerMode"],[4,"lto_symbol_attributes"],[4,"lto_debug_model"],[4,"lto_codegen_model"],[4,"lto_codegen_diagnostic_severity_t"],[4,"LLVMByteOrdering"],[4,"LLVMCodeGenOptLevel"],[4,"LLVMRelocMode"],[4,"LLVMCodeModel"],[4,"LLVMCodeGenFileType"],[3,"LLVMAttribute"]]};
searchIndex["memchr"] = {"doc":"This crate defines two functions, `memchr` and `memrchr`, which expose a safe interface to the corresponding functions in `libc`.","items":[[3,"Memchr","memchr","An iterator for memchr",null,null],[3,"Memchr2","","An iterator for Memchr2",null,null],[3,"Memchr3","","An iterator for Memchr3",null,null],[5,"memchr","","A safe interface to `memchr`.",null,null],[5,"memrchr","","A safe interface to `memrchr`.",null,null],[5,"memchr2","","Like `memchr`, but searches for two bytes instead of one.",null,null],[5,"memchr3","","Like `memchr`, but searches for three bytes instead of one.",null,null],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",0,null],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"size_hint","","",0,null],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",1,null],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"size_hint","","",1,null],[11,"new","","Create a new Memchr2 that's initalized to zero with a haystack",2,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"size_hint","","",2,null]],"paths":[[3,"Memchr"],[3,"Memchr2"],[3,"Memchr3"]]};
searchIndex["quote"] = {"doc":"Quasi-quoting without a Syntex dependency, intended for use with Macros 1.1.","items":[[3,"Tokens","quote","Tokens produced by a `quote!(...)` invocation.",null,null],[3,"ByteStr","","Wrap a `&str` so it interpolates as a byte-string: `b\"abc\"`.",null,null],[12,"0","","",0,null],[3,"Hex","","Wrap an integer so it interpolates as a hexadecimal.",null,null],[12,"0","","",1,null],[3,"Ident","","An identifier that should be interpolated without quotes.",null,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":{"name":"bool"}}],[11,"new","","Empty tokens.",2,{"inputs":[],"output":{"name":"self"}}],[11,"append","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"append_all","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"append_separated","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"},{"name":"s"}],"output":null}],[11,"append_terminated","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"},{"name":"s"}],"output":null}],[11,"as_str","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_string","","",2,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"parse","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"as_ref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_tokens","","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"hash","","",3,null],[11,"new","","",3,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"to_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[8,"ToTokens","","Types that can be interpolated inside a `quote!(...)` invocation.",null,null],[10,"to_tokens","","Write `self` to the given `Tokens`.",4,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[14,"quote","","The whole point.",null,null]],"paths":[[3,"ByteStr"],[3,"Hex"],[3,"Tokens"],[3,"Ident"],[8,"ToTokens"]]};
searchIndex["regex"] = {"doc":"This crate provides a library for parsing, compiling, and executing regular expressions. Its syntax is similar to Perl-style regular expressions, but lacks a few features like look around and backreferences. In exchange, all searches execute in linear time with respect to the size of the regular expression and search text.","items":[[3,"RegexBuilder","regex","A configurable builder for a regular expression.",null,null],[3,"RegexSetBuilder","","A configurable builder for a set of regular expressions.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching Unicode strings.",null,null],[3,"Match","","Match represents a single match of a regex in a haystack.",null,null],[3,"Captures","","Captures represents a group of captured strings for a single match.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"Matches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"CaptureMatches","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",null,null],[3,"SubCaptureMatches","","An iterator that yields all capturing matches in the order in which they appear in the regex.",null,null],[3,"ReplacerRef","","By-reference adaptor for a `Replacer`",null,null],[3,"NoExpand","","`NoExpand` indicates literal string replacement.",null,null],[12,"0","","",0,null],[3,"Split","","Yields all substrings delimited by a regular expression match.",null,null],[3,"SplitN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[4,"Error","","An error that occurred during parsing or compiling a regular expression.",null,null],[13,"Syntax","","A syntax error.",1,null],[13,"CompiledTooBig","","The compiled program exceeded the set size limit. The argument is the size limit imposed.",1,null],[5,"escape","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[0,"bytes","","Match regular expressions on arbitrary bytes.",null,null],[3,"RegexBuilder","regex::bytes","A configurable builder for a regular expression.",null,null],[3,"RegexSetBuilder","","A configurable builder for a set of regular expressions.",null,null],[3,"Match","","Match represents a single match of a regex in a haystack.",null,null],[3,"Regex","","A compiled regular expression for matching arbitrary bytes.",null,null],[3,"Matches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"CaptureMatches","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",null,null],[3,"Split","","Yields all substrings delimited by a regular expression match.",null,null],[3,"SplitN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"Captures","","Captures represents a group of captured byte strings for a single match.",null,null],[3,"SubCaptureMatches","","An iterator that yields all capturing matches in the order in which they appear in the regex.",null,null],[3,"ReplacerRef","","By-reference adaptor for a `Replacer`",null,null],[3,"NoExpand","","`NoExpand` indicates literal byte string replacement.",null,null],[12,"0","","",2,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[8,"Replacer","","Replacer describes types that can be used to replace matches in a byte string.",null,null],[10,"replace_append","","Appends text to `dst` to replace the current match.",3,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"vec"}],"output":null}],[11,"no_expansion","","Return a fixed unchanging replacement byte string.",3,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"by_ref","","Return a `Replacer` that borrows and wraps this `Replacer`.",3,{"inputs":[{"name":"self"}],"output":{"name":"replacerref"}}],[11,"clone","regex","",1,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",4,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"build","","Consume the builder and compile the regular expression.",4,{"inputs":[{"name":"self"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"nest_limit","","Set the nesting limit for this parser.",4,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"regexbuilder"}}],[11,"new","regex","Create a new regular expression builder with the given pattern.",5,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"build","","Consume the builder and compile the regular expression.",5,{"inputs":[{"name":"self"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"nest_limit","","Set the nesting limit for this parser.",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"regexbuilder"}}],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",6,{"inputs":[{"name":"i"}],"output":{"name":"regexsetbuilder"}}],[11,"build","","Consume the builder and compile the regular expressions into a set.",6,{"inputs":[{"name":"self"}],"output":{"generics":["regexset","error"],"name":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexsetbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexsetbuilder"}}],[11,"nest_limit","","Set the nesting limit for this parser.",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"regexsetbuilder"}}],[11,"new","regex","Create a new regular expression builder with the given pattern.",7,{"inputs":[{"name":"i"}],"output":{"name":"regexsetbuilder"}}],[11,"build","","Consume the builder and compile the regular expressions into a set.",7,{"inputs":[{"name":"self"}],"output":{"generics":["regexset","error"],"name":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexsetbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexsetbuilder"}}],[11,"nest_limit","","Set the nesting limit for this parser.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"regexsetbuilder"}}],[11,"no_expansion","regex::bytes","Return a fixed unchanging replacement byte string.",3,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"by_ref","","Return a `Replacer` that borrows and wraps this `Replacer`.",3,{"inputs":[{"name":"self"}],"output":{"name":"replacerref"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"match"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"start","","Returns the starting byte offset of the match in the haystack.",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"end","","Returns the ending byte offset of the match in the haystack.",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_bytes","","Returns the matched text.",8,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"regex"}}],[11,"fmt","","Shows the original regular expression.",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Shows the original regular expression.",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Attempts to parse a string into a regular expression",9,{"inputs":[{"name":"str"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",9,{"inputs":[{"name":"str"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",9,null],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",9,null],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",9,null],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",9,null],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about capturing group matches.",9,null],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that isn't matched by the regular expression.",9,null],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that isn't matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",9,null],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular byte string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced byte string.",9,null],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",9,null],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",9,null],[11,"shortest_match","","Returns the end location of a match in the text given.",9,null],[11,"as_str","","Returns the original string of this regex.",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"capture_names","","Returns an iterator over the capture names.",9,{"inputs":[{"name":"self"}],"output":{"name":"capturenames"}}],[11,"captures_len","","Returns the number of captures.",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["match"],"name":"option"}}],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["captures"],"name":"option"}}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"option"}}],[11,"size_hint","","",14,null],[11,"get","","Returns the match associated with the capture group at index `i`. If `i` does not correspond to a capture group, or if the capture group did not participate in the match, then `None` is returned.",15,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["match"],"name":"option"}}],[11,"name","","Returns the match for the capture group named `name`. If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",15,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["match"],"name":"option"}}],[11,"iter","","An iterator that yields all capturing matches in the order in which they appear in the regex. If a particular capture group didn't participate in the match, then `None` is yielded for that capture.",15,{"inputs":[{"name":"self"}],"output":{"name":"subcapturematches"}}],[11,"expand","","Expands all instances of `$name` in `replacement` to the corresponding capture group `name`, and writes them to the `dst` buffer given.",15,null],[11,"len","","Returns the number of captured groups.",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",15,null],[11,"index","","",15,null],[11,"next","","",16,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"option"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"replace_append","","",17,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"vec"}],"output":null}],[11,"no_expansion","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"replace_append","","",2,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"vec"}],"output":null}],[11,"no_expansion","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"clone","regex","",18,{"inputs":[{"name":"self"}],"output":{"name":"regexset"}}],[11,"new","","Create a new regex set with the given regular expressions.",18,{"inputs":[{"name":"i"}],"output":{"generics":["regexset","error"],"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",18,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"matches","","Returns the set of regular expressions that match in the given text.",18,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"setmatches"}}],[11,"len","","Returns the total number of regular expressions in this set.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"setmatches"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"matched_any","","Whether this set contains any matches.",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"matched","","Whether the regex at the given index matched.",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"len","","The total number of regexes in the set that created these matches.",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"iter","","Returns an iterator over indexes in the regex that matched.",19,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"into_iter","","",19,null],[11,"next","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next_back","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next_back","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","regex::bytes","",22,{"inputs":[{"name":"self"}],"output":{"name":"regexset"}}],[11,"new","","Create a new regex set with the given regular expressions.",22,{"inputs":[{"name":"i"}],"output":{"generics":["regexset","error"],"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",22,null],[11,"matches","","Returns the set of regular expressions that match in the given text.",22,null],[11,"len","","Returns the total number of regular expressions in this set.",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"setmatches"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"matched_any","","Whether this set contains any matches.",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"matched","","Whether the regex at the given index matched.",23,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"len","","The total number of regexes in the set that created these matches.",23,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"iter","","Returns an iterator over indexes in the regex that matched.",23,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"into_iter","","",23,null],[11,"next","","",24,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next_back","","",24,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"next","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next_back","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","regex","",26,{"inputs":[{"name":"self"}],"output":{"name":"match"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"start","","Returns the starting byte offset of the match in the haystack.",26,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"end","","Returns the ending byte offset of the match in the haystack.",26,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_str","","Returns the matched text.",26,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"regex"}}],[11,"fmt","","Shows the original regular expression.",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Shows the original regular expression.",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Attempts to parse a string into a regular expression",27,{"inputs":[{"name":"str"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",27,{"inputs":[{"name":"str"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",27,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",27,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["match"],"name":"option"}}],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",27,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"matches"}}],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",27,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["captures"],"name":"option"}}],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about capturing group matches.",27,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"capturematches"}}],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that isn't matched by the regular expression.",27,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"split"}}],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that isn't matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"splitn"}}],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced string.",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"r"}],"output":{"generics":["str"],"name":"cow"}}],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"r"}],"output":{"generics":["str"],"name":"cow"}}],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"r"}],"output":{"generics":["str"],"name":"cow"}}],[11,"shortest_match","","Returns the end location of a match in the text given.",27,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["usize"],"name":"option"}}],[11,"as_str","","Returns the original string of this regex.",27,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"capture_names","","Returns an iterator over the capture names.",27,{"inputs":[{"name":"self"}],"output":{"name":"capturenames"}}],[11,"captures_len","","Returns the number of captures.",27,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"option"}}],[11,"size_hint","","",28,null],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","","",30,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"get","","Returns the match associated with the capture group at index `i`. If `i` does not correspond to a capture group, or if the capture group did not participate in the match, then `None` is returned.",31,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["match"],"name":"option"}}],[11,"name","","Returns the match for the capture group named `name`. If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",31,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["match"],"name":"option"}}],[11,"iter","","An iterator that yields all capturing matches in the order in which they appear in the regex. If a particular capture group didn't participate in the match, then `None` is yielded for that capture.",31,{"inputs":[{"name":"self"}],"output":{"name":"subcapturematches"}}],[11,"expand","","Expands all instances of `$name` in `replacement` to the corresponding capture group `name`, and writes them to the `dst` buffer given.",31,{"inputs":[{"name":"self"},{"name":"str"},{"name":"string"}],"output":null}],[11,"len","","Returns the number of captured groups.",31,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",31,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"str"}}],[11,"index","","",31,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"str"}}],[11,"next","","",32,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"option"}}],[11,"next","","",33,{"inputs":[{"name":"self"}],"output":{"generics":["captures"],"name":"option"}}],[11,"next","","",34,{"inputs":[{"name":"self"}],"output":{"generics":["match"],"name":"option"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"replace_append","","",35,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"string"}],"output":null}],[11,"no_expansion","","",35,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"replace_append","","",0,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"string"}],"output":null}],[11,"no_expansion","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[8,"Replacer","","Replacer describes types that can be used to replace matches in a string.",null,null],[10,"replace_append","","Appends text to `dst` to replace the current match.",36,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"string"}],"output":null}],[11,"no_expansion","","Return a fixed unchanging replacement string.",36,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"by_ref","","Return a `Replacer` that borrows and wraps this `Replacer`.",36,{"inputs":[{"name":"self"}],"output":{"name":"replacerref"}}],[11,"no_expansion","","Return a fixed unchanging replacement string.",36,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"by_ref","","Return a `Replacer` that borrows and wraps this `Replacer`.",36,{"inputs":[{"name":"self"}],"output":{"name":"replacerref"}}]],"paths":[[3,"NoExpand"],[4,"Error"],[3,"NoExpand"],[8,"Replacer"],[3,"RegexBuilder"],[3,"RegexBuilder"],[3,"RegexSetBuilder"],[3,"RegexSetBuilder"],[3,"Match"],[3,"Regex"],[3,"Matches"],[3,"CaptureMatches"],[3,"Split"],[3,"SplitN"],[3,"CaptureNames"],[3,"Captures"],[3,"SubCaptureMatches"],[3,"ReplacerRef"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"Match"],[3,"Regex"],[3,"CaptureNames"],[3,"Split"],[3,"SplitN"],[3,"Captures"],[3,"SubCaptureMatches"],[3,"CaptureMatches"],[3,"Matches"],[3,"ReplacerRef"],[8,"Replacer"]]};
searchIndex["regex_syntax"] = {"doc":"This crate provides a robust regular expression parser.","items":[[3,"Parser","regex_syntax","A convenience parser for regular expressions.",null,null],[3,"ParserBuilder","","A builder for a regular expression parser.",null,null],[4,"Error","","This error type encompasses any error that can be returned by this crate.",null,null],[13,"Parse","","An error that occurred while translating concrete syntax into abstract syntax (AST).",0,null],[13,"Translate","","An error that occurred while translating abstract syntax into a high level intermediate representation (HIR).",0,null],[5,"escape","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"escape_into","","Escapes all meta characters in `text` and writes the result into `buf`.",null,{"inputs":[{"name":"str"},{"name":"string"}],"output":null}],[5,"is_meta_character","","Returns true if the give character has significance in a regex.",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[5,"is_word_character","","Returns true if and only if the given character is a Unicode word character.",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[5,"is_word_byte","","Returns true if and only if the given character is an ASCII word character.",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[0,"ast","","Defines an abstract syntax for regular expressions.",null,null],[3,"Error","regex_syntax::ast","An error that occurred while parsing a regular expression into an abstract syntax tree.",null,null],[3,"Span","","Span represents the position information of a single AST item.",null,null],[12,"start","","The start byte offset.",1,null],[12,"end","","The end byte offset.",1,null],[3,"Position","","A single position in a regular expression.",null,null],[12,"offset","","The absolute offset of this position, starting at `0` from the beginning of the regular expression pattern string.",2,null],[12,"line","","The line number, starting at `1`.",2,null],[12,"column","","The approximate column number, starting at `1`.",2,null],[3,"WithComments","","An abstract syntax tree for a singular expression along with comments found.",null,null],[12,"ast","","The actual ast.",3,null],[12,"comments","","All comments found in the original regular expression.",3,null],[3,"Comment","","A comment from a regular expression with an associated span.",null,null],[12,"span","","The span of this comment, including the beginning `#` and ending `\\n`.",4,null],[12,"comment","","The comment text, starting with the first character following the `#` and ending with the last character preceding the `\\n`.",4,null],[3,"Alternation","","An alternation of regular expressions.",null,null],[12,"span","","The span of this alternation.",5,null],[12,"asts","","The alternate regular expressions.",5,null],[3,"Concat","","A concatenation of regular expressions.",null,null],[12,"span","","The span of this concatenation.",6,null],[12,"asts","","The concatenation regular expressions.",6,null],[3,"Literal","","A single literal expression.",null,null],[12,"span","","The span of this literal.",7,null],[12,"kind","","The kind of this literal.",7,null],[12,"c","","The Unicode scalar value corresponding to this literal.",7,null],[3,"ClassPerl","","A Perl character class.",null,null],[12,"span","","The span of this class.",8,null],[12,"kind","","The kind of Perl class.",8,null],[12,"negated","","Whether the class is negated or not. e.g., `\\d` is not negated but `\\D` is.",8,null],[3,"ClassAscii","","An ASCII character class.",null,null],[12,"span","","The span of this class.",9,null],[12,"kind","","The kind of ASCII class.",9,null],[12,"negated","","Whether the class is negated or not. e.g., `[[:alpha:]]` is not negated but `[[:^alpha:]]` is.",9,null],[3,"ClassUnicode","","A Unicode character class.",null,null],[12,"span","","The span of this class.",10,null],[12,"negated","","Whether this class is negated or not.",10,null],[12,"kind","","The kind of Unicode class.",10,null],[3,"ClassBracketed","","A bracketed character class, e.g., `[a-z0-9]`.",null,null],[12,"span","","The span of this class.",11,null],[12,"negated","","Whether this class is negated or not. e.g., `[a]` is not negated but `[^a]` is.",11,null],[12,"kind","","The type of this set. A set is either a normal union of things, e.g., `[abc]` or a result of applying set operations, e.g., `[\\pL--c]`.",11,null],[3,"ClassSetRange","","A single character class range in a set.",null,null],[12,"span","","The span of this range.",12,null],[12,"start","","The start of this range.",12,null],[12,"end","","The end of this range.",12,null],[3,"ClassSetUnion","","A union of items inside a character class set.",null,null],[12,"span","","The span of the items in this operation. e.g., the `a-z0-9` in `[^a-z0-9]`",13,null],[12,"items","","The sequence of items that make up this union.",13,null],[3,"ClassSetBinaryOp","","A Unicode character class set operation.",null,null],[12,"span","","The span of this operation. e.g., the `a-z--[h-p]` in `[a-z--h-p]`.",14,null],[12,"kind","","The type of this set operation.",14,null],[12,"lhs","","The left hand side of the operation.",14,null],[12,"rhs","","The right hand side of the operation.",14,null],[3,"Assertion","","A single zero-width assertion.",null,null],[12,"span","","The span of this assertion.",15,null],[12,"kind","","The assertion kind, e.g., `\\b` or `^`.",15,null],[3,"Repetition","","A repetition operation applied to a regular expression.",null,null],[12,"span","","The span of this operation.",16,null],[12,"op","","The actual operation.",16,null],[12,"greedy","","Whether this operation was applied greedily or not.",16,null],[12,"ast","","The regular expression under repetition.",16,null],[3,"RepetitionOp","","The repetition operator itself.",null,null],[12,"span","","The span of this operator. This includes things like `+`, `*?` and `{m,n}`.",17,null],[12,"kind","","The type of operation.",17,null],[3,"Group","","A grouped regular expression.",null,null],[12,"span","","The span of this group.",18,null],[12,"kind","","The kind of this group.",18,null],[12,"ast","","The regular expression in this group.",18,null],[3,"CaptureName","","A capture name.",null,null],[12,"span","","The span of this capture name.",19,null],[12,"name","","The capture name.",19,null],[12,"index","","The capture index.",19,null],[3,"SetFlags","","A group of flags that is not applied to a particular regular expression.",null,null],[12,"span","","The span of these flags, including the grouping parentheses.",20,null],[12,"flags","","The actual sequence of flags.",20,null],[3,"Flags","","A group of flags.",null,null],[12,"span","","The span of this group of flags.",21,null],[12,"items","","A sequence of flag items. Each item is either a flag or a negation operator.",21,null],[3,"FlagsItem","","A single item in a group of flags.",null,null],[12,"span","","The span of this item.",22,null],[12,"kind","","The kind of this item.",22,null],[4,"ErrorKind","","The type of an error that occurred while building an AST.",null,null],[13,"CaptureLimitExceeded","","The capturing group limit was exceeded.",23,null],[13,"ClassEscapeInvalid","","An invalid escape sequence was found in a character class set.",23,null],[13,"ClassRangeInvalid","","An invalid character class range was found. An invalid range is any range where the start is greater than the end.",23,null],[13,"ClassUnclosed","","An opening `[` was found with no corresponding closing `]`.",23,null],[13,"DecimalEmpty","","An empty decimal number was given where one was expected.",23,null],[13,"DecimalInvalid","","An invalid decimal number was given where one was expected.",23,null],[13,"EscapeHexEmpty","","A bracketed hex literal was empty.",23,null],[13,"EscapeHexInvalid","","A bracketed hex literal did not correspond to a Unicode scalar value.",23,null],[13,"EscapeHexInvalidDigit","","An invalid hexadecimal digit was found.",23,null],[13,"EscapeUnexpectedEof","","EOF was found before an escape sequence was completed.",23,null],[13,"EscapeUnrecognized","","An unrecognized escape sequence.",23,null],[13,"FlagDanglingNegation","","A dangling negation was used when setting flags, e.g., `i-`.",23,null],[13,"FlagDuplicate","","A flag was used twice, e.g., `i-i`.",23,null],[12,"original","regex_syntax::ast::ErrorKind","The position of the original flag. The error position points to the duplicate flag.",23,null],[13,"FlagRepeatedNegation","regex_syntax::ast","The negation operator was used twice, e.g., `-i-s`.",23,null],[12,"original","regex_syntax::ast::ErrorKind","The position of the original negation operator. The error position points to the duplicate negation operator.",23,null],[13,"FlagUnexpectedEof","regex_syntax::ast","Expected a flag but got EOF, e.g., `(?`.",23,null],[13,"FlagUnrecognized","","Unrecognized flag, e.g., `a`.",23,null],[13,"GroupNameDuplicate","","A duplicate capture name was found.",23,null],[12,"original","regex_syntax::ast::ErrorKind","The position of the initial occurrence of the capture name. The error position itself points to the duplicate occurrence.",23,null],[13,"GroupNameEmpty","regex_syntax::ast","A capture group name is empty, e.g., `(?P<>abc)`.",23,null],[13,"GroupNameInvalid","","An invalid character was seen for a capture group name. This includes errors where the first character is a digit (even though subsequent characters are allowed to be digits).",23,null],[13,"GroupNameUnexpectedEof","","A closing `>` could not be found for a capture group name.",23,null],[13,"GroupUnclosed","","An unclosed group, e.g., `(ab`.",23,null],[13,"GroupUnopened","","An unopened group, e.g., `ab)`.",23,null],[13,"NestLimitExceeded","","The nest limit was exceeded. The limit stored here is the limit configured in the parser.",23,null],[13,"RepetitionCountInvalid","","The range provided in a counted repetition operator is invalid. The range is invalid if the start is greater than the end.",23,null],[13,"RepetitionCountUnclosed","","An opening `{` was found with no corresponding closing `}`.",23,null],[13,"RepetitionMissing","","A repetition operator was applied to a missing sub-expression. This occurs, for example, in the regex consisting of just a `*`. It is, however, possible to create a repetition operating on an empty sub-expression. For example, `()*` is still considered valid.",23,null],[13,"UnsupportedBackreference","","When octal support is disabled, this error is produced when an octal escape is used. The octal escape is assumed to be an invocation of a backreference, which is the common case.",23,null],[13,"UnsupportedLookAround","","When syntax similar to PCRE's look-around is used, this error is returned. Some example syntaxes that are rejected include, but are not necessarily limited to, `(?=re)`, `(?!re)`, `(?<=re)` and `(?<!re)`. Note that all of these syntaxes are otherwise invalid; this error is used to improve the user experience.",23,null],[4,"Ast","","An abstract syntax tree for a single regular expression.",null,null],[13,"Empty","","An empty regex that matches everything.",24,null],[13,"Flags","","A set of flags, e.g., `(?is)`.",24,null],[13,"Literal","","A single character literal, which includes escape sequences.",24,null],[13,"Dot","","The \"any character\" class.",24,null],[13,"Assertion","","A single zero-width assertion.",24,null],[13,"Class","","A single character class. This includes all forms of character classes except for `.`. e.g., `\\d`, `\\pN`, `[a-z]` and `[[:alpha:]]`.",24,null],[13,"Repetition","","A repetition operator applied to an arbitrary regular expression.",24,null],[13,"Group","","A grouped regular expression.",24,null],[13,"Alternation","","An alternation of regular expressions.",24,null],[13,"Concat","","A concatenation of regular expressions.",24,null],[4,"LiteralKind","","The kind of a single literal expression.",null,null],[13,"Verbatim","","The literal is written verbatim, e.g., `a` or `☃`.",25,null],[13,"Punctuation","","The literal is written as an escape because it is punctuation, e.g., `\\*` or `\\[`.",25,null],[13,"Octal","","The literal is written as an octal escape, e.g., `\\141`.",25,null],[13,"HexFixed","","The literal is written as a hex code with a fixed number of digits depending on the type of the escape, e.g., `\\x61` or or `\\u0061` or `\\U00000061`.",25,null],[13,"HexBrace","","The literal is written as a hex code with a bracketed number of digits. The only restriction is that the bracketed hex code must refer to a valid Unicode scalar value.",25,null],[13,"Special","","The literal is written as a specially recognized escape, e.g., `\\f` or `\\n`.",25,null],[4,"SpecialLiteralKind","","The type of a special literal.",null,null],[13,"Bell","","Bell, spelled `\\a` (`\\x07`).",26,null],[13,"FormFeed","","Form feed, spelled `\\f` (`\\x0C`).",26,null],[13,"Tab","","Tab, spelled `\\t` (`\\x09`).",26,null],[13,"LineFeed","","Line feed, spelled `\\n` (`\\x0A`).",26,null],[13,"CarriageReturn","","Carriage return, spelled `\\r` (`\\x0D`).",26,null],[13,"VerticalTab","","Vertical tab, spelled `\\v` (`\\x0B`).",26,null],[13,"Space","","Space, spelled `\\` (`\\x20`). Note that this can only appear when parsing in verbose mode.",26,null],[4,"HexLiteralKind","","The type of a Unicode hex literal.",null,null],[13,"X","","A `\\x` prefix. When used without brackets, this form is limited to two digits.",27,null],[13,"UnicodeShort","","A `\\u` prefix. When used without brackets, this form is limited to four digits.",27,null],[13,"UnicodeLong","","A `\\U` prefix. When used without brackets, this form is limited to eight digits.",27,null],[4,"Class","","A single character class expression.",null,null],[13,"Unicode","","A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.",28,null],[13,"Perl","","A perl character class, e.g., `\\d` or `\\W`.",28,null],[13,"Bracketed","","A bracketed character class set, which may contain zero or more character ranges and/or zero or more nested classes. e.g., `[a-zA-Z\\pL]`.",28,null],[4,"ClassPerlKind","","The available Perl character classes.",null,null],[13,"Digit","","Decimal numbers.",29,null],[13,"Space","","Whitespace.",29,null],[13,"Word","","Word characters.",29,null],[4,"ClassAsciiKind","","The available ASCII character classes.",null,null],[13,"Alnum","","`[0-9A-Za-z]`",30,null],[13,"Alpha","","`[A-Za-z]`",30,null],[13,"Ascii","","`[\\x00-\\x7F]`",30,null],[13,"Blank","","`[ \\t]`",30,null],[13,"Cntrl","","`[\\x00-\\x1F\\x7F]`",30,null],[13,"Digit","","`[0-9]`",30,null],[13,"Graph","","`[!-~]`",30,null],[13,"Lower","","`[a-z]`",30,null],[13,"Print","","`[ -~]`",30,null],[13,"Punct","","`[!-/:-@\\[-`{-~]`",30,null],[13,"Space","","`[\\t\\n\\v\\f\\r ]`",30,null],[13,"Upper","","`[A-Z]`",30,null],[13,"Word","","`[0-9A-Za-z_]`",30,null],[13,"Xdigit","","`[0-9A-Fa-f]`",30,null],[4,"ClassUnicodeKind","","The available forms of Unicode character classes.",null,null],[13,"OneLetter","","A one letter abbreviated class, e.g., `\\pN`.",31,null],[13,"Named","","A binary property, general category or script. The string may be empty.",31,null],[13,"NamedValue","","A property name and an associated value.",31,null],[12,"op","regex_syntax::ast::ClassUnicodeKind","The type of Unicode op used to associate `name` with `value`.",31,null],[12,"name","","The property name (which may be empty).",31,null],[12,"value","","The property value (which may be empty).",31,null],[4,"ClassUnicodeOpKind","regex_syntax::ast","The type of op used in a Unicode character class.",null,null],[13,"Equal","","A property set to a specific value, e.g., `\\p{scx=Katakana}`.",32,null],[13,"Colon","","A property set to a specific value using a colon, e.g., `\\p{scx:Katakana}`.",32,null],[13,"NotEqual","","A property that isn't a particular value, e.g., `\\p{scx!=Katakana}`.",32,null],[4,"ClassSet","","A character class set.",null,null],[13,"Item","","An item, which can be a single literal, range, nested character class or a union of items.",33,null],[13,"BinaryOp","","A single binary operation (i.e., &&, -- or ~~).",33,null],[4,"ClassSetItem","","A single component of a character class set.",null,null],[13,"Empty","","An empty item.",34,null],[13,"Literal","","A single literal.",34,null],[13,"Range","","A range between two literals.",34,null],[13,"Ascii","","An ASCII character class, e.g., `[:alnum:]` or `[:punct:]`.",34,null],[13,"Unicode","","A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.",34,null],[13,"Perl","","A perl character class, e.g., `\\d` or `\\W`.",34,null],[13,"Bracketed","","A bracketed character class set, which may contain zero or more character ranges and/or zero or more nested classes. e.g., `[a-zA-Z\\pL]`.",34,null],[13,"Union","","A union of items.",34,null],[4,"ClassSetBinaryOpKind","","The type of a Unicode character class set operation.",null,null],[13,"Intersection","","The intersection of two sets, e.g., `\\pN&&[a-z]`.",35,null],[13,"Difference","","The difference of two sets, e.g., `\\pN--[0-9]`.",35,null],[13,"SymmetricDifference","","The symmetric difference of two sets. The symmetric difference is the set of elements belonging to one but not both sets. e.g., `[\\pL~~[:ascii:]]`.",35,null],[4,"AssertionKind","","An assertion kind.",null,null],[13,"StartLine","","`^`",36,null],[13,"EndLine","","`$`",36,null],[13,"StartText","","`\\A`",36,null],[13,"EndText","","`\\z`",36,null],[13,"WordBoundary","","`\\b`",36,null],[13,"NotWordBoundary","","`\\B`",36,null],[4,"RepetitionKind","","The kind of a repetition operator.",null,null],[13,"ZeroOrOne","","`?`",37,null],[13,"ZeroOrMore","","`*`",37,null],[13,"OneOrMore","","`+`",37,null],[13,"Range","","`{m,n}`",37,null],[4,"RepetitionRange","","A range repetition operator.",null,null],[13,"Exactly","","`{m}`",38,null],[13,"AtLeast","","`{m,}`",38,null],[13,"Bounded","","`{m,n}`",38,null],[4,"GroupKind","","The kind of a group.",null,null],[13,"CaptureIndex","","`(a)`",39,null],[13,"CaptureName","","`(?P<name>a)`",39,null],[13,"NonCapturing","","`(?:a)` and `(?i:a)`",39,null],[4,"FlagsItemKind","","The kind of an item in a group of flags.",null,null],[13,"Negation","","A negation operator applied to all subsequent flags in the enclosing group.",40,null],[13,"Flag","","A single flag in a group.",40,null],[4,"Flag","","A single flag.",null,null],[13,"CaseInsensitive","","`i`",41,null],[13,"MultiLine","","`m`",41,null],[13,"DotMatchesNewLine","","`s`",41,null],[13,"SwapGreed","","`U`",41,null],[13,"Unicode","","`u`",41,null],[13,"IgnoreWhitespace","","`x`",41,null],[5,"visit","","Executes an implementation of `Visitor` in constant stack space.",null,{"inputs":[{"name":"ast"},{"name":"v"}],"output":{"name":"result"}}],[0,"parse","","This module provides a regular expression parser.",null,null],[3,"ParserBuilder","regex_syntax::ast::parse","A builder for a regular expression parser.",null,null],[3,"Parser","","A regular expression parser.",null,null],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"parserbuilder"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",42,{"inputs":[],"output":{"name":"parserbuilder"}}],[11,"new","","Create a new parser builder with a default configuration.",42,{"inputs":[],"output":{"name":"parserbuilder"}}],[11,"build","","Build a parser from this configuration with the given pattern.",42,{"inputs":[{"name":"self"}],"output":{"name":"parser"}}],[11,"nest_limit","","Set the nesting limit for this parser.",42,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"parserbuilder"}}],[11,"octal","","Whether to support octal syntax or not.",42,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"ignore_whitespace","","Enable verbose mode in the regular expression.",42,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"parser"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new parser with a default configuration.",43,{"inputs":[],"output":{"name":"parser"}}],[11,"parse","","Parse the regular expression into an abstract syntax tree.",43,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["ast","error"],"name":"result"}}],[11,"parse_with_comments","","Parse the regular expression and return an abstract syntax tree with all of the comments found in the pattern.",43,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["withcomments","error"],"name":"result"}}],[0,"print","regex_syntax::ast","This module provides a regular expression printer for `Ast`.",null,null],[3,"Printer","regex_syntax::ast::print","A printer for a regular expression abstract syntax tree.",null,null],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new printer.",44,{"inputs":[],"output":{"name":"printer"}}],[11,"print","","Print the given `Ast` to the given writer. The writer must implement `fmt::Write`. Typical implementations of `fmt::Write` that can be used here are a `fmt::Formatter` (which is available in `fmt::Display` implementations) or a `&mut String`.",44,{"inputs":[{"name":"self"},{"name":"ast"},{"name":"w"}],"output":{"name":"result"}}],[8,"Visitor","regex_syntax::ast","A trait for visiting an abstract syntax tree (AST) in depth first order.",null,null],[16,"Output","","The result of visiting an AST.",45,null],[16,"Err","","An error that visiting an AST might return.",45,null],[10,"finish","","All implementors of `Visitor` must provide a `finish` method, which yields the result of visiting the AST or an error.",45,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"start","","This method is called before beginning traversal of the AST.",45,{"inputs":[{"name":"self"}],"output":null}],[11,"visit_pre","","This method is called on an `Ast` before descending into child `Ast` nodes.",45,{"inputs":[{"name":"self"},{"name":"ast"}],"output":{"name":"result"}}],[11,"visit_post","","This method is called on an `Ast` after descending all of its child `Ast` nodes.",45,{"inputs":[{"name":"self"},{"name":"ast"}],"output":{"name":"result"}}],[11,"visit_alternation_in","","This method is called between child nodes of an `Alternation`.",45,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_class_set_item_pre","","This method is called on every `ClassSetItem` before descending into child nodes.",45,{"inputs":[{"name":"self"},{"name":"classsetitem"}],"output":{"name":"result"}}],[11,"visit_class_set_item_post","","This method is called on every `ClassSetItem` after descending into child nodes.",45,{"inputs":[{"name":"self"},{"name":"classsetitem"}],"output":{"name":"result"}}],[11,"visit_class_set_binary_op_pre","","This method is called on every `ClassSetBinaryOp` before descending into child nodes.",45,{"inputs":[{"name":"self"},{"name":"classsetbinaryop"}],"output":{"name":"result"}}],[11,"visit_class_set_binary_op_post","","This method is called on every `ClassSetBinaryOp` after descending into child nodes.",45,{"inputs":[{"name":"self"},{"name":"classsetbinaryop"}],"output":{"name":"result"}}],[11,"visit_class_set_binary_op_in","","This method is called between the left hand and right hand child nodes of a `ClassSetBinaryOp`.",45,{"inputs":[{"name":"self"},{"name":"classsetbinaryop"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"kind","","Return the type of this error.",46,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"pattern","","The original pattern string in which this error occurred.",46,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"span","","Return the span at which this error occurred.",46,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"auxiliary_span","","Return an auxiliary span. This span exists only for some errors that benefit from being able to point to two locations in the original regular expression. For example, \"duplicate\" errors will have the main error position set to the duplicate occurrence while its auxiliary span will be set to the initial occurrence.",46,{"inputs":[{"name":"self"}],"output":{"generics":["span"],"name":"option"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"description","","",46,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"new","","Create a new span with the given positions.",1,{"inputs":[{"name":"position"},{"name":"position"}],"output":{"name":"span"}}],[11,"splat","","Create a new span using the given position as the start and end.",1,{"inputs":[{"name":"position"}],"output":{"name":"span"}}],[11,"with_start","","Create a new span by replacing the starting the position with the one given.",1,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"span"}}],[11,"with_end","","Create a new span by replacing the ending the position with the one given.",1,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"span"}}],[11,"is_one_line","","Returns true if and only if this span occurs on a single line.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","Returns true if and only if this span is empty. That is, it points to a single position in the concrete syntax of a regular expression.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Create a new position with the given information.",2,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"position"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"withcomments"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"withcomments"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"withcomments"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"comment"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"comment"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"comment"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"ast"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"ast"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"ast"}],"output":{"name":"bool"}}],[11,"span","","Return the span of this abstract syntax tree.",24,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"is_empty","","Return true if and only if this Ast is empty.",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"alternation"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"alternation"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"alternation"}],"output":{"name":"bool"}}],[11,"into_ast","","Return this alternation as an AST.",5,{"inputs":[{"name":"self"}],"output":{"name":"ast"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"concat"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"concat"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"concat"}],"output":{"name":"bool"}}],[11,"into_ast","","Return this concatenation as an AST.",6,{"inputs":[{"name":"self"}],"output":{"name":"ast"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"literal"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"name":"bool"}}],[11,"byte","","If this literal was written as a `\\x` hex escape, then this returns the corresponding byte value. Otherwise, this returns `None`.",7,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"literalkind"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"literalkind"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"literalkind"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"specialliteralkind"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"specialliteralkind"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"hexliteralkind"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"hexliteralkind"}],"output":{"name":"bool"}}],[11,"digits","","The number of digits that must be used with this literal form when used without brackets. When used with brackets, there is no restriction on the number of digits.",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"class"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"class"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"class"}],"output":{"name":"bool"}}],[11,"span","","Return the span of this character class.",28,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"classperl"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"classperl"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"classperl"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"classperlkind"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"classperlkind"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"classascii"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"classascii"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"classascii"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"classasciikind"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"classasciikind"}],"output":{"name":"bool"}}],[11,"from_name","","Return the corresponding ClassAsciiKind variant for the given name.",30,{"inputs":[{"name":"str"}],"output":{"generics":["classasciikind"],"name":"option"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"classunicode"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":{"name":"bool"}}],[11,"is_negated","","Returns true if this class has been negated.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"classunicodekind"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"classunicodekind"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"classunicodekind"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"classunicodeopkind"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"classunicodeopkind"}],"output":{"name":"bool"}}],[11,"is_equal","","Whether the op is an equality op or not.",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"classbracketed"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"classbracketed"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"classbracketed"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"classset"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"classset"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"classset"}],"output":{"name":"bool"}}],[11,"union","","Build a set from a union.",33,{"inputs":[{"name":"classsetunion"}],"output":{"name":"classset"}}],[11,"span","","Return the span of this character class set.",33,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"classsetitem"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"classsetitem"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"classsetitem"}],"output":{"name":"bool"}}],[11,"span","","Return the span of this character class set item.",34,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"classsetrange"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"classsetrange"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"classsetrange"}],"output":{"name":"bool"}}],[11,"is_valid","","Returns true if and only if this character class range is valid.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"classsetunion"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"classsetunion"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"classsetunion"}],"output":{"name":"bool"}}],[11,"push","","Push a new item in this union.",13,{"inputs":[{"name":"self"},{"name":"classsetitem"}],"output":null}],[11,"into_item","","Return this union as a character class set item.",13,{"inputs":[{"name":"self"}],"output":{"name":"classsetitem"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"classsetbinaryop"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"classsetbinaryop"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"classsetbinaryop"}],"output":{"name":"bool"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"classsetbinaryopkind"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"classsetbinaryopkind"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"assertion"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"assertion"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"assertion"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"assertionkind"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"assertionkind"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"repetition"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"repetition"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"repetition"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"repetitionop"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"repetitionop"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"repetitionop"}],"output":{"name":"bool"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"repetitionkind"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"repetitionkind"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"repetitionkind"}],"output":{"name":"bool"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"repetitionrange"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"repetitionrange"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"repetitionrange"}],"output":{"name":"bool"}}],[11,"is_valid","","Returns true if and only if this repetition range is valid.",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"group"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"group"}],"output":{"name":"bool"}}],[11,"flags","","If this group is non-capturing, then this returns the (possibly empty) set of flags. Otherwise, `None` is returned.",18,{"inputs":[{"name":"self"}],"output":{"generics":["flags"],"name":"option"}}],[11,"is_capturing","","Returns true if and only if this group is capturing.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"capture_index","","Returns the capture index of this group, if this is a capturing group.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"groupkind"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"groupkind"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"groupkind"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"capturename"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"capturename"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"capturename"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"setflags"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"setflags"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"setflags"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"add_item","","Add the given item to this sequence of flags.",21,{"inputs":[{"name":"self"},{"name":"flagsitem"}],"output":{"generics":["usize"],"name":"option"}}],[11,"flag_state","","Returns the state of the given flag in this set.",21,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"generics":["bool"],"name":"option"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"flagsitem"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"flagsitem"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"flagsitem"}],"output":{"name":"bool"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"flagsitemkind"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"flagsitemkind"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"flagsitemkind"}],"output":{"name":"bool"}}],[11,"is_negation","","Returns true if and only if this item is a negation operator.",40,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"flag"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"bool"}}],[11,"drop","","",24,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",33,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","regex_syntax","",0,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hir","","Defines a high-level intermediate representation for regular expressions.",null,null],[3,"Error","regex_syntax::hir","An error that can occur while translating an `Ast` to a `Hir`.",null,null],[3,"Hir","","A high-level intermediate representation (HIR) for a regular expression.",null,null],[3,"ClassUnicode","","A set of characters represented by Unicode scalar values.",null,null],[3,"ClassUnicodeIter","","An iterator over all ranges in a Unicode character class.",null,null],[3,"ClassUnicodeRange","","A single range of characters represented by Unicode scalar values.",null,null],[3,"ClassBytes","","A set of characters represented by arbitrary bytes (where one byte corresponds to one character).",null,null],[3,"ClassBytesIter","","An iterator over all ranges in a byte character class.",null,null],[3,"ClassBytesRange","","A single range of characters represented by arbitrary bytes.",null,null],[3,"Group","","The high-level intermediate representation for a group.",null,null],[12,"kind","","The kind of this group. If it is a capturing group, then the kind contains the capture group index (and the name, if it is a named group).",47,null],[12,"hir","","The expression inside the capturing group, which may be empty.",47,null],[3,"Repetition","","The high-level intermediate representation of a repetition operator.",null,null],[12,"kind","","The kind of this repetition operator.",48,null],[12,"greedy","","Whether this repetition operator is greedy or not. A greedy operator will match as much as it can. A non-greedy operator will match as little as it can.",48,null],[12,"hir","","The expression being repeated.",48,null],[4,"ErrorKind","","The type of an error that occurred while building an `Hir`.",null,null],[13,"UnicodeNotAllowed","","This error occurs when a Unicode feature is used when Unicode support is disabled. For example `(?-u:\\pL)` would trigger this error.",49,null],[13,"InvalidUtf8","","This error occurs when translating a pattern that could match a byte sequence that isn't UTF-8 and `allow_invalid_utf8` was disabled.",49,null],[13,"UnicodePropertyNotFound","","This occurs when an unrecognized Unicode property name could not be found.",49,null],[13,"UnicodePropertyValueNotFound","","This occurs when an unrecognized Unicode property value could not be found.",49,null],[13,"EmptyClassNotAllowed","","This occurs when the translator attempts to construct a character class that is empty.",49,null],[4,"HirKind","","The kind of an arbitrary `Hir` expression.",null,null],[13,"Empty","","The empty regular expression, which matches everything, including the empty string.",50,null],[13,"Literal","","A single literal character that matches exactly this character.",50,null],[13,"Class","","A single character class that matches any of the characters in the class. A class can either consist of Unicode scalar values as characters, or it can use bytes.",50,null],[13,"Anchor","","An anchor assertion. An anchor assertion match always has zero length.",50,null],[13,"WordBoundary","","A word boundary assertion, which may or may not be Unicode aware. A word boundary assertion match always has zero length.",50,null],[13,"Repetition","","A repetition operation applied to a child expression.",50,null],[13,"Group","","A possibly capturing group, which contains a child expression.",50,null],[13,"Concat","","A concatenation of expressions. A concatenation always has at least two child expressions.",50,null],[13,"Alternation","","An alternation of expressions. An alternation always has at least two child expressions.",50,null],[4,"Literal","","The high-level intermediate representation of a literal.",null,null],[13,"Unicode","","A single character represented by a Unicode scalar value.",51,null],[13,"Byte","","A single character represented by an arbitrary byte.",51,null],[4,"Class","","The high-level intermediate representation of a character class.",null,null],[13,"Unicode","","A set of characters represented by Unicode scalar values.",52,null],[13,"Bytes","","A set of characters represented by arbitrary bytes (one byte per character).",52,null],[4,"Anchor","","The high-level intermediate representation for an anchor assertion.",null,null],[13,"StartLine","","Match the beginning of a line or the beginning of text. Specifically, this matches at the starting position of the input, or at the position immediately following a `\\n` character.",53,null],[13,"EndLine","","Match the end of a line or the end of text. Specifically, this matches at the end position of the input, or at the position immediately preceding a `\\n` character.",53,null],[13,"StartText","","Match the beginning of text. Specifically, this matches at the starting position of the input.",53,null],[13,"EndText","","Match the end of text. Specifically, this matches at the ending position of the input.",53,null],[4,"WordBoundary","","The high-level intermediate representation for a word-boundary assertion.",null,null],[13,"Unicode","","Match a Unicode-aware word boundary. That is, this matches a position where the left adjacent character and right adjacent character correspond to a word and non-word or a non-word and word character.",54,null],[13,"UnicodeNegate","","Match a Unicode-aware negation of a word boundary.",54,null],[13,"Ascii","","Match an ASCII-only word boundary. That is, this matches a position where the left adjacent character and right adjacent character correspond to a word and non-word or a non-word and word character.",54,null],[13,"AsciiNegate","","Match an ASCII-only negation of a word boundary.",54,null],[4,"GroupKind","","The kind of group.",null,null],[13,"CaptureIndex","","A normal unnamed capturing group.",55,null],[13,"CaptureName","","A named capturing group.",55,null],[12,"name","regex_syntax::hir::GroupKind","The name of the group.",55,null],[12,"index","","The capture index of the group.",55,null],[13,"NonCapturing","regex_syntax::hir","A non-capturing group.",55,null],[4,"RepetitionKind","","The kind of a repetition operator.",null,null],[13,"ZeroOrOne","","Matches a sub-expression zero or one times.",56,null],[13,"ZeroOrMore","","Matches a sub-expression zero or more times.",56,null],[13,"OneOrMore","","Matches a sub-expression one or more times.",56,null],[13,"Range","","Matches a sub-expression within a bounded range of times.",56,null],[4,"RepetitionRange","","The kind of a counted repetition operator.",null,null],[13,"Exactly","","Matches a sub-expression exactly this many times.",57,null],[13,"AtLeast","","Matches a sub-expression at least this many times.",57,null],[13,"Bounded","","Matches a sub-expression at least `m` times and at most `n` times.",57,null],[5,"visit","","Executes an implementation of `Visitor` in constant stack space.",null,{"inputs":[{"name":"hir"},{"name":"v"}],"output":{"name":"result"}}],[0,"literal","","Provides routines for extracting literal prefixes and suffixes from an `Hir`.",null,null],[3,"Literals","regex_syntax::hir::literal","A set of literal byte strings extracted from a regular expression.",null,null],[3,"Literal","","A single member of a set of literals extracted from a regular expression.",null,null],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"literal"}}],[11,"cmp","","",59,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"name":"ordering"}}],[11,"empty","","Returns a new empty set of literals using default limits.",58,{"inputs":[],"output":{"name":"literals"}}],[11,"prefixes","","Returns a set of literal prefixes extracted from the given `Hir`.",58,{"inputs":[{"name":"hir"}],"output":{"name":"literals"}}],[11,"suffixes","","Returns a set of literal suffixes extracted from the given `Hir`.",58,{"inputs":[{"name":"hir"}],"output":{"name":"literals"}}],[11,"limit_size","","Get the approximate size limit (in bytes) of this set.",58,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_limit_size","","Set the approximate size limit (in bytes) of this set.",58,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"literals"}}],[11,"limit_class","","Get the character class size limit for this set.",58,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_limit_class","","Limits the size of character(or byte) classes considered.",58,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"literals"}}],[11,"literals","","Returns the set of literals as a slice. Its order is unspecified.",58,null],[11,"min_len","","Returns the length of the smallest literal.",58,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"all_complete","","Returns true if all members in this set are complete.",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"any_complete","","Returns true if any member in this set is complete.",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains_empty","","Returns true if this set contains an empty literal.",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","Returns true if this set is empty or if all of its members is empty.",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_empty","","Returns a new empty set of literals using this set's limits.",58,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"longest_common_prefix","","Returns the longest common prefix of all members in this set.",58,null],[11,"longest_common_suffix","","Returns the longest common suffix of all members in this set.",58,null],[11,"trim_suffix","","Returns a new set of literals with the given number of bytes trimmed from the suffix of each literal.",58,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["literals"],"name":"option"}}],[11,"unambiguous_prefixes","","Returns a new set of prefixes of this set of literals that are guaranteed to be unambiguous.",58,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"unambiguous_suffixes","","Returns a new set of suffixes of this set of literals that are guaranteed to be unambiguous.",58,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"union_prefixes","","Unions the prefixes from the given expression to this set.",58,{"inputs":[{"name":"self"},{"name":"hir"}],"output":{"name":"bool"}}],[11,"union_suffixes","","Unions the suffixes from the given expression to this set.",58,{"inputs":[{"name":"self"},{"name":"hir"}],"output":{"name":"bool"}}],[11,"union","","Unions this set with another set.",58,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"cross_product","","Extends this set with another set.",58,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"cross_add","","Extends each literal in this set with the bytes given.",58,null],[11,"add","","Adds the given literal to this set.",58,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"name":"bool"}}],[11,"add_char_class","","Extends each literal in this set with the character class given.",58,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":{"name":"bool"}}],[11,"add_byte_class","","Extends each literal in this set with the byte class given.",58,{"inputs":[{"name":"self"},{"name":"classbytes"}],"output":{"name":"bool"}}],[11,"cut","","Cuts every member of this set. When a member is cut, it can never be extended.",58,{"inputs":[{"name":"self"}],"output":null}],[11,"reverse","","Reverses all members in place.",58,{"inputs":[{"name":"self"}],"output":null}],[11,"clear","","Clears this set of all members.",58,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns a new complete literal with the bytes given.",59,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"literal"}}],[11,"empty","","Returns a new complete empty literal.",59,{"inputs":[],"output":{"name":"literal"}}],[11,"is_cut","","Returns true if this literal was \"cut.\"",59,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cut","","Cuts this literal.",59,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",59,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",59,null],[11,"deref","","",59,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",59,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[0,"print","regex_syntax::hir","This module provides a regular expression printer for `Hir`.",null,null],[3,"Printer","regex_syntax::hir::print","A printer for a regular expression's high-level intermediate representation.",null,null],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new printer.",60,{"inputs":[],"output":{"name":"printer"}}],[11,"print","","Print the given `Ast` to the given writer. The writer must implement `fmt::Write`. Typical implementations of `fmt::Write` that can be used here are a `fmt::Formatter` (which is available in `fmt::Display` implementations) or a `&mut String`.",60,{"inputs":[{"name":"self"},{"name":"hir"},{"name":"w"}],"output":{"name":"result"}}],[0,"translate","regex_syntax::hir","Defines a translator that converts an `Ast` to an `Hir`.",null,null],[3,"TranslatorBuilder","regex_syntax::hir::translate","A builder for constructing an AST->HIR translator.",null,null],[3,"Translator","","A translator maps abstract syntax to a high level intermediate representation.",null,null],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"translatorbuilder"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",61,{"inputs":[],"output":{"name":"translatorbuilder"}}],[11,"new","","Create a new translator builder with a default c onfiguration.",61,{"inputs":[],"output":{"name":"translatorbuilder"}}],[11,"build","","Build a translator using the current configuration.",61,{"inputs":[{"name":"self"}],"output":{"name":"translator"}}],[11,"allow_invalid_utf8","","When enabled, translation will permit the construction of a regular expression that may match invalid UTF-8.",61,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"translatorbuilder"}}],[11,"case_insensitive","","Enable or disable the case insensitive flag (`i`) by default.",61,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"translatorbuilder"}}],[11,"multi_line","","Enable or disable the multi-line matching flag (`m`) by default.",61,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"translatorbuilder"}}],[11,"dot_matches_new_line","","Enable or disable the \"dot matches any character\" flag (`s`) by default.",61,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"translatorbuilder"}}],[11,"swap_greed","","Enable or disable the \"swap greed\" flag (`U`) by default.",61,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"translatorbuilder"}}],[11,"unicode","","Enable or disable the Unicode flag (`u`) by default.",61,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"translatorbuilder"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"translator"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new translator using the default configuration.",62,{"inputs":[],"output":{"name":"translator"}}],[11,"translate","","Translate the given abstract syntax tree (AST) into a high level intermediate representation (HIR).",62,{"inputs":[{"name":"self"},{"name":"str"},{"name":"ast"}],"output":{"generics":["hir","error"],"name":"result"}}],[8,"Visitor","regex_syntax::hir","A trait for visiting the high-level IR (HIR) in depth first order.",null,null],[16,"Output","","The result of visiting an HIR.",63,null],[16,"Err","","An error that visiting an HIR might return.",63,null],[10,"finish","","All implementors of `Visitor` must provide a `finish` method, which yields the result of visiting the HIR or an error.",63,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"start","","This method is called before beginning traversal of the HIR.",63,{"inputs":[{"name":"self"}],"output":null}],[11,"visit_pre","","This method is called on an `Hir` before descending into child `Hir` nodes.",63,{"inputs":[{"name":"self"},{"name":"hir"}],"output":{"name":"result"}}],[11,"visit_post","","This method is called on an `Hir` after descending all of its child `Hir` nodes.",63,{"inputs":[{"name":"self"},{"name":"hir"}],"output":{"name":"result"}}],[11,"visit_alternation_in","","This method is called between child nodes of an alternation.",63,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"kind","","Return the type of this error.",64,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"pattern","","The original pattern string in which this error occurred.",64,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"span","","Return the span at which this error occurred.",64,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"description","","",64,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"hir"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"hir"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"hir"}],"output":{"name":"bool"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"hirkind"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"hirkind"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"hirkind"}],"output":{"name":"bool"}}],[11,"kind","","Returns a reference to the underlying HIR kind.",65,{"inputs":[{"name":"self"}],"output":{"name":"hirkind"}}],[11,"into_kind","","Consumes ownership of this HIR expression and returns its underlying `HirKind`.",65,{"inputs":[{"name":"self"}],"output":{"name":"hirkind"}}],[11,"empty","","Returns an empty HIR expression.",65,{"inputs":[],"output":{"name":"hir"}}],[11,"literal","","Creates a literal HIR expression.",65,{"inputs":[{"name":"literal"}],"output":{"name":"hir"}}],[11,"class","","Creates a class HIR expression.",65,{"inputs":[{"name":"class"}],"output":{"name":"hir"}}],[11,"anchor","","Creates an anchor assertion HIR expression.",65,{"inputs":[{"name":"anchor"}],"output":{"name":"hir"}}],[11,"word_boundary","","Creates a word boundary assertion HIR expression.",65,{"inputs":[{"name":"wordboundary"}],"output":{"name":"hir"}}],[11,"repetition","","Creates a repetition HIR expression.",65,{"inputs":[{"name":"repetition"}],"output":{"name":"hir"}}],[11,"group","","Creates a group HIR expression.",65,{"inputs":[{"name":"group"}],"output":{"name":"hir"}}],[11,"concat","","Returns the concatenation of the given expressions.",65,{"inputs":[{"generics":["hir"],"name":"vec"}],"output":{"name":"hir"}}],[11,"alternation","","Returns the alternation of the given expressions.",65,{"inputs":[{"generics":["hir"],"name":"vec"}],"output":{"name":"hir"}}],[11,"dot","","Build an HIR expression for `.`.",65,{"inputs":[{"name":"bool"}],"output":{"name":"hir"}}],[11,"any","","Build an HIR expression for `(?s).`.",65,{"inputs":[{"name":"bool"}],"output":{"name":"hir"}}],[11,"is_always_utf8","","Return true if and only if this HIR will always match valid UTF-8.",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all_assertions","","Returns true if and only if this entire HIR expression is made up of zero-width assertions.",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_anchored_start","","Return true if and only if this HIR is required to match from the beginning of text. This includes expressions like `^foo`, `^(foo|bar)`, `^foo|^bar` but not `^foo|bar`.",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_anchored_end","","Return true if and only if this HIR is required to match at the end of text. This includes expressions like `foo$`, `(foo|bar)$`, `foo$|bar$` but not `foo$|bar`.",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_any_anchored_start","","Return true if and only if this HIR contains any sub-expression that is required to match at the beginning of text. Specifically, this returns true if the `^` symbol (when multiline mode is disabled) or the `\\A` escape appear anywhere in the regex.",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_any_anchored_end","","Return true if and only if this HIR contains any sub-expression that is required to match at the end of text. Specifically, this returns true if the `$` symbol (when multiline mode is disabled) or the `\\z` escape appear anywhere in the regex.",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_match_empty","","Return true if and only if the empty string is part of the language matched by this regular expression.",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","Return true if and only if this HIR is the empty regular expression.",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_subexprs","","Returns true if and only if this kind has any (including possibly empty) subexpressions.",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"literal"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"name":"bool"}}],[11,"is_unicode","","Returns true if and only if this literal corresponds to a Unicode scalar value.",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"class"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"class"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"class"}],"output":{"name":"bool"}}],[11,"case_fold_simple","","Apply Unicode simple case folding to this character class, in place. The character class will be expanded to include all simple case folded character variants.",52,{"inputs":[{"name":"self"}],"output":null}],[11,"negate","","Negate this character class in place.",52,{"inputs":[{"name":"self"}],"output":null}],[11,"is_always_utf8","","Returns true if and only if this character class will only ever match valid UTF-8.",52,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"classunicode"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":{"name":"bool"}}],[11,"new","","Create a new class from a sequence of ranges.",66,{"inputs":[{"name":"i"}],"output":{"name":"classunicode"}}],[11,"empty","","Create a new class with no ranges.",66,{"inputs":[],"output":{"name":"classunicode"}}],[11,"push","","Add a new range to this set.",66,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":null}],[11,"iter","","Return an iterator over all ranges in this class.",66,{"inputs":[{"name":"self"}],"output":{"name":"classunicodeiter"}}],[11,"ranges","","Return the underlying ranges as a slice.",66,null],[11,"case_fold_simple","","Expand this character class such that it contains all case folded characters, according to Unicode's \"simple\" mapping. For example, if this class consists of the range `a-z`, then applying case folding will result in the class containing both the ranges `a-z` and `A-Z`.",66,{"inputs":[{"name":"self"}],"output":null}],[11,"negate","","Negate this character class.",66,{"inputs":[{"name":"self"}],"output":null}],[11,"union","","Union this character class with the given character class, in place.",66,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":null}],[11,"intersect","","Intersect this character class with the given character class, in place.",66,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":null}],[11,"difference","","Subtract the given character class from this character class, in place.",66,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":null}],[11,"symmetric_difference","","Compute the symmetric difference of the given character classes, in place.",66,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":null}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",67,{"inputs":[{"name":"self"}],"output":{"generics":["classunicoderange"],"name":"option"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"classunicoderange"}}],[11,"default","","",68,{"inputs":[],"output":{"name":"classunicoderange"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",68,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",68,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":{"name":"bool"}}],[11,"le","","",68,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":{"name":"bool"}}],[11,"gt","","",68,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":{"name":"bool"}}],[11,"ge","","",68,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":{"name":"bool"}}],[11,"cmp","","",68,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":{"name":"ordering"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new Unicode scalar value range for a character class.",68,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"classunicoderange"}}],[11,"start","","Return the start of this range.",68,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"end","","Return the end of this range.",68,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"classbytes"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"classbytes"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"self"},{"name":"classbytes"}],"output":{"name":"bool"}}],[11,"new","","Create a new class from a sequence of ranges.",69,{"inputs":[{"name":"i"}],"output":{"name":"classbytes"}}],[11,"empty","","Create a new class with no ranges.",69,{"inputs":[],"output":{"name":"classbytes"}}],[11,"push","","Add a new range to this set.",69,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":null}],[11,"iter","","Return an iterator over all ranges in this class.",69,{"inputs":[{"name":"self"}],"output":{"name":"classbytesiter"}}],[11,"ranges","","Return the underlying ranges as a slice.",69,null],[11,"case_fold_simple","","Expand this character class such that it contains all case folded characters. For example, if this class consists of the range `a-z`, then applying case folding will result in the class containing both the ranges `a-z` and `A-Z`.",69,{"inputs":[{"name":"self"}],"output":null}],[11,"negate","","Negate this byte class.",69,{"inputs":[{"name":"self"}],"output":null}],[11,"union","","Union this byte class with the given byte class, in place.",69,{"inputs":[{"name":"self"},{"name":"classbytes"}],"output":null}],[11,"intersect","","Intersect this byte class with the given byte class, in place.",69,{"inputs":[{"name":"self"},{"name":"classbytes"}],"output":null}],[11,"difference","","Subtract the given byte class from this byte class, in place.",69,{"inputs":[{"name":"self"},{"name":"classbytes"}],"output":null}],[11,"symmetric_difference","","Compute the symmetric difference of the given byte classes, in place.",69,{"inputs":[{"name":"self"},{"name":"classbytes"}],"output":null}],[11,"is_all_ascii","","Returns true if and only if this character class will either match nothing or only ASCII bytes. Stated differently, this returns false if and only if this class contains a non-ASCII byte.",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",70,{"inputs":[{"name":"self"}],"output":{"generics":["classbytesrange"],"name":"option"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"classbytesrange"}}],[11,"default","","",71,{"inputs":[],"output":{"name":"classbytesrange"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",71,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",71,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":{"name":"bool"}}],[11,"le","","",71,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":{"name":"bool"}}],[11,"gt","","",71,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":{"name":"bool"}}],[11,"ge","","",71,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":{"name":"bool"}}],[11,"cmp","","",71,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":{"name":"ordering"}}],[11,"new","","Create a new byte range for a character class.",71,{"inputs":[{"name":"u8"},{"name":"u8"}],"output":{"name":"classbytesrange"}}],[11,"start","","Return the start of this range.",71,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"end","","Return the end of this range.",71,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"anchor"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"name":"bool"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"wordboundary"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"wordboundary"}],"output":{"name":"bool"}}],[11,"is_negated","","Returns true if and only if this word boundary assertion is negated.",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"group"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"group"}],"output":{"name":"bool"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"groupkind"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"groupkind"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"groupkind"}],"output":{"name":"bool"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"repetition"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"repetition"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"repetition"}],"output":{"name":"bool"}}],[11,"is_match_empty","","Returns true if and only if this repetition operator makes it possible to match the empty string.",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"repetitionkind"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"repetitionkind"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"repetitionkind"}],"output":{"name":"bool"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"repetitionrange"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"repetitionrange"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"repetitionrange"}],"output":{"name":"bool"}}],[11,"drop","","",65,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","regex_syntax","",72,{"inputs":[{"name":"self"}],"output":{"name":"parserbuilder"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",72,{"inputs":[],"output":{"name":"parserbuilder"}}],[11,"new","","Create a new parser builder with a default configuration.",72,{"inputs":[],"output":{"name":"parserbuilder"}}],[11,"build","","Build a parser from this configuration with the given pattern.",72,{"inputs":[{"name":"self"}],"output":{"name":"parser"}}],[11,"nest_limit","","Set the nesting limit for this parser.",72,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"parserbuilder"}}],[11,"octal","","Whether to support octal syntax or not.",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"allow_invalid_utf8","","When enabled, the parser will permit the construction of a regular expression that may match invalid UTF-8.",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"ignore_whitespace","","Enable verbose mode in the regular expression.",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"case_insensitive","","Enable or disable the case insensitive flag by default.",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"multi_line","","Enable or disable the multi-line matching flag by default.",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"dot_matches_new_line","","Enable or disable the \"dot matches any character\" flag by default.",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"swap_greed","","Enable or disable the \"swap greed\" flag by default.",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"unicode","","Enable or disable the Unicode flag (`u`) by default.",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"parser"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new parser with a default configuration.",73,{"inputs":[],"output":{"name":"parser"}}],[11,"parse","","Parse the regular expression into a high level intermediate representation.",73,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["hir"],"name":"result"}}],[6,"Result","","A type alias for dealing with errors returned by this crate.",null,null],[11,"start","regex_syntax::ast","This method is called before beginning traversal of the AST.",45,{"inputs":[{"name":"self"}],"output":null}],[11,"visit_pre","","This method is called on an `Ast` before descending into child `Ast` nodes.",45,{"inputs":[{"name":"self"},{"name":"ast"}],"output":{"name":"result"}}],[11,"visit_post","","This method is called on an `Ast` after descending all of its child `Ast` nodes.",45,{"inputs":[{"name":"self"},{"name":"ast"}],"output":{"name":"result"}}],[11,"visit_alternation_in","","This method is called between child nodes of an `Alternation`.",45,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_class_set_item_pre","","This method is called on every `ClassSetItem` before descending into child nodes.",45,{"inputs":[{"name":"self"},{"name":"classsetitem"}],"output":{"name":"result"}}],[11,"visit_class_set_item_post","","This method is called on every `ClassSetItem` after descending into child nodes.",45,{"inputs":[{"name":"self"},{"name":"classsetitem"}],"output":{"name":"result"}}],[11,"visit_class_set_binary_op_pre","","This method is called on every `ClassSetBinaryOp` before descending into child nodes.",45,{"inputs":[{"name":"self"},{"name":"classsetbinaryop"}],"output":{"name":"result"}}],[11,"visit_class_set_binary_op_post","","This method is called on every `ClassSetBinaryOp` after descending into child nodes.",45,{"inputs":[{"name":"self"},{"name":"classsetbinaryop"}],"output":{"name":"result"}}],[11,"visit_class_set_binary_op_in","","This method is called between the left hand and right hand child nodes of a `ClassSetBinaryOp`.",45,{"inputs":[{"name":"self"},{"name":"classsetbinaryop"}],"output":{"name":"result"}}],[11,"start","regex_syntax::hir","This method is called before beginning traversal of the HIR.",63,{"inputs":[{"name":"self"}],"output":null}],[11,"visit_pre","","This method is called on an `Hir` before descending into child `Hir` nodes.",63,{"inputs":[{"name":"self"},{"name":"hir"}],"output":{"name":"result"}}],[11,"visit_post","","This method is called on an `Hir` after descending all of its child `Hir` nodes.",63,{"inputs":[{"name":"self"},{"name":"hir"}],"output":{"name":"result"}}],[11,"visit_alternation_in","","This method is called between child nodes of an alternation.",63,{"inputs":[{"name":"self"}],"output":{"name":"result"}}]],"paths":[[4,"Error"],[3,"Span"],[3,"Position"],[3,"WithComments"],[3,"Comment"],[3,"Alternation"],[3,"Concat"],[3,"Literal"],[3,"ClassPerl"],[3,"ClassAscii"],[3,"ClassUnicode"],[3,"ClassBracketed"],[3,"ClassSetRange"],[3,"ClassSetUnion"],[3,"ClassSetBinaryOp"],[3,"Assertion"],[3,"Repetition"],[3,"RepetitionOp"],[3,"Group"],[3,"CaptureName"],[3,"SetFlags"],[3,"Flags"],[3,"FlagsItem"],[4,"ErrorKind"],[4,"Ast"],[4,"LiteralKind"],[4,"SpecialLiteralKind"],[4,"HexLiteralKind"],[4,"Class"],[4,"ClassPerlKind"],[4,"ClassAsciiKind"],[4,"ClassUnicodeKind"],[4,"ClassUnicodeOpKind"],[4,"ClassSet"],[4,"ClassSetItem"],[4,"ClassSetBinaryOpKind"],[4,"AssertionKind"],[4,"RepetitionKind"],[4,"RepetitionRange"],[4,"GroupKind"],[4,"FlagsItemKind"],[4,"Flag"],[3,"ParserBuilder"],[3,"Parser"],[3,"Printer"],[8,"Visitor"],[3,"Error"],[3,"Group"],[3,"Repetition"],[4,"ErrorKind"],[4,"HirKind"],[4,"Literal"],[4,"Class"],[4,"Anchor"],[4,"WordBoundary"],[4,"GroupKind"],[4,"RepetitionKind"],[4,"RepetitionRange"],[3,"Literals"],[3,"Literal"],[3,"Printer"],[3,"TranslatorBuilder"],[3,"Translator"],[8,"Visitor"],[3,"Error"],[3,"Hir"],[3,"ClassUnicode"],[3,"ClassUnicodeIter"],[3,"ClassUnicodeRange"],[3,"ClassBytes"],[3,"ClassBytesIter"],[3,"ClassBytesRange"],[3,"ParserBuilder"],[3,"Parser"]]};
searchIndex["rustc_demangle"] = {"doc":"Demangle Rust compiler symbol names.","items":[[3,"Demangle","rustc_demangle","Representation of a demangled symbol name.",null,null],[3,"TryDemangleError","","Error returned from the `try_demangle` function below when demangling fails.",null,null],[5,"demangle","","De-mangles a Rust symbol into a more readable version",null,{"inputs":[{"name":"str"}],"output":{"name":"demangle"}}],[5,"try_demangle","","The same as `demangle`, except return an `Err` if the string does not appear to be a Rust symbol, rather than \"demangling\" the given string as a no-op.",null,{"inputs":[{"name":"str"}],"output":{"generics":["demangle","trydemangleerror"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"trydemangleerror"}}],[11,"as_str","","Returns the underlying string that's being demangled.",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"TryDemangleError"],[3,"Demangle"]]};
searchIndex["slog"] = {"doc":"Slog -  Structured, extensible, composable logging for Rust","items":[[3,"Logger","slog","Logging handle used to execute logging statements",null,null],[3,"Discard","","`Drain` discarding everything",null,null],[3,"Filter","","`Drain` filtering records",null,null],[12,"0","","",0,null],[12,"1","","",0,null],[3,"LevelFilter","","`Drain` filtering records by `Record` logging level",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[3,"MapError","","`Drain` mapping error returned by another `Drain`",null,null],[3,"Duplicate","","`Drain` duplicating records into two other `Drain`s",null,null],[12,"0","","",2,null],[12,"1","","",2,null],[3,"Fuse","","`Drain` panicking on error",null,null],[12,"0","","",3,null],[3,"IgnoreResult","","`Drain` ignoring result",null,null],[3,"Record","","One logging record",null,null],[3,"FnValue","","Explicit lazy-closure `Value`",null,null],[12,"0","","",4,null],[3,"PushFnValueSerializer","","Handle passed to `PushFnValue` closure",null,null],[3,"PushFnValue","","Lazy `Value` that writes to Serializer",null,null],[12,"0","","",5,null],[3,"SingleKV","","Single pair `Key` and `Value`",null,null],[12,"0","","",6,null],[12,"1","","",6,null],[3,"OwnedKV","","Owned KV",null,null],[3,"BorrowedKV","","Borrowed `KV`",null,null],[3,"OwnedKVList","","Chain of `SyncMultiSerialize`-s of a `Logger` and its ancestors",null,null],[4,"MutexDrainError","","Error returned by `Mutex<D : Drain>`",null,null],[13,"Mutex","","Error acquiring mutex",7,null],[13,"Drain","","Error returned by drain",7,null],[4,"Level","","Logging level associated with a logging `Record`",null,null],[13,"Critical","","Critical",8,null],[13,"Error","","Error",8,null],[13,"Warning","","Warning",8,null],[13,"Info","","Info",8,null],[13,"Debug","","Debug",8,null],[13,"Trace","","Trace",8,null],[4,"FilterLevel","","Logging filtering level",null,null],[13,"Off","","Log nothing",9,null],[13,"Critical","","Log critical level only",9,null],[13,"Error","","Log only error level and above",9,null],[13,"Warning","","Log only warning level and above",9,null],[13,"Info","","Log only info level and above",9,null],[13,"Debug","","Log only debug level and above",9,null],[13,"Trace","","Log everything",9,null],[4,"Error","","Serialization Error",null,null],[13,"Io","","`io::Error` (not available in ![no_std] mode)",10,null],[13,"Fmt","","`fmt::Error`",10,null],[13,"Other","","Other error",10,null],[0,"ser","","Compatibility name to ease upgrading from `slog v1`",null,null],[6,"Key","","Key type",null,null],[6,"PushFnSerializer","","Old name of `PushFnValueSerializer`",null,null],[6,"Result","","Serialization `Result`",null,null],[6,"Serialize","","Compatibility name to ease upgrading from `slog v1`",null,null],[6,"PushLazy","","Compatibility name to ease upgrading from `slog v1`",null,null],[6,"ValueSerializer","","Compatibility name to ease upgrading from `slog v1`",null,null],[6,"OwnedKeyValueList","","Compatibility name to ease upgrading from `slog v1`",null,null],[7,"LOG_LEVEL_NAMES","","Official capitalized logging (and logging filtering) level names",null,null],[7,"LOG_LEVEL_SHORT_NAMES","","Official capitalized logging (and logging filtering) short level names",null,null],[8,"Drain","","Logging drain",null,null],[16,"Ok","","Type returned by this drain",11,null],[16,"Err","","Type of potential errors that can be returned by this `Drain`",11,null],[10,"log","","Handle one logging statement (`Record`)",11,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkvlist"}],"output":{"name":"result"}}],[11,"is_enabled","","Avoid: Check if messages at the specified log level are maybe enabled for this logger.",11,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"is_critical_enabled","","Avoid: See `is_enabled`",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_error_enabled","","Avoid: See `is_enabled`",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_warning_enabled","","Avoid: See `is_enabled`",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_info_enabled","","Avoid: See `is_enabled`",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_debug_enabled","","Avoid: See `is_enabled`",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_trace_enabled","","Avoid: See `is_enabled`",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"map","","Pass `Drain` through a closure, eg. to wrap into another `Drain`.",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"filter","","Filter logging records passed to `Drain`",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filter"}}],[11,"filter_level","","Filter logging records passed to `Drain` (by level)",11,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"levelfilter"}}],[11,"map_err","","Map logging errors returned by this drain",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperror"}}],[11,"ignore_res","","Ignore results returned by this drain",11,{"inputs":[{"name":"self"}],"output":{"name":"ignoreresult"}}],[11,"fuse","","Make `Self` panic when returning any errors",11,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[8,"SendSyncUnwindSafe","","`Send + Sync + UnwindSafe` bound",null,null],[8,"SendSyncUnwindSafeDrain","","`Drain + Send + Sync + UnwindSafe` bound",null,null],[8,"SendSyncRefUnwindSafeDrain","","`Drain + Send + Sync + RefUnwindSafe` bound",null,null],[8,"MapErrFn","","Function that can be used in `MapErr` drain",null,null],[8,"FilterFn","","Function that can be used in `Filter` drain",null,null],[8,"SendRefUnwindSafeDrain","","`Drain + Send + RefUnwindSafe` bound",null,null],[8,"Serializer","","Serializer",null,null],[11,"emit_usize","","Emit $t",12,{"inputs":[{"name":"self"},{"name":"key"},{"name":"usize"}],"output":{"name":"result"}}],[11,"emit_isize","","Emit $t",12,{"inputs":[{"name":"self"},{"name":"key"},{"name":"isize"}],"output":{"name":"result"}}],[11,"emit_bool","","Emit $t",12,{"inputs":[{"name":"self"},{"name":"key"},{"name":"bool"}],"output":{"name":"result"}}],[11,"emit_char","","Emit $t",12,{"inputs":[{"name":"self"},{"name":"key"},{"name":"char"}],"output":{"name":"result"}}],[11,"emit_u8","","Emit $t",12,{"inputs":[{"name":"self"},{"name":"key"},{"name":"u8"}],"output":{"name":"result"}}],[11,"emit_i8","","Emit $t",12,{"inputs":[{"name":"self"},{"name":"key"},{"name":"i8"}],"output":{"name":"result"}}],[11,"emit_u16","","Emit $t",12,{"inputs":[{"name":"self"},{"name":"key"},{"name":"u16"}],"output":{"name":"result"}}],[11,"emit_i16","","Emit $t",12,{"inputs":[{"name":"self"},{"name":"key"},{"name":"i16"}],"output":{"name":"result"}}],[11,"emit_u32","","Emit $t",12,{"inputs":[{"name":"self"},{"name":"key"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_i32","","Emit $t",12,{"inputs":[{"name":"self"},{"name":"key"},{"name":"i32"}],"output":{"name":"result"}}],[11,"emit_f32","","Emit $t",12,{"inputs":[{"name":"self"},{"name":"key"},{"name":"f32"}],"output":{"name":"result"}}],[11,"emit_u64","","Emit $t",12,{"inputs":[{"name":"self"},{"name":"key"},{"name":"u64"}],"output":{"name":"result"}}],[11,"emit_i64","","Emit $t",12,{"inputs":[{"name":"self"},{"name":"key"},{"name":"i64"}],"output":{"name":"result"}}],[11,"emit_f64","","Emit $t",12,{"inputs":[{"name":"self"},{"name":"key"},{"name":"f64"}],"output":{"name":"result"}}],[11,"emit_str","","Emit $t",12,{"inputs":[{"name":"self"},{"name":"key"},{"name":"str"}],"output":{"name":"result"}}],[11,"emit_unit","","Emit `()`",12,{"inputs":[{"name":"self"},{"name":"key"}],"output":{"name":"result"}}],[11,"emit_none","","Emit `None`",12,{"inputs":[{"name":"self"},{"name":"key"}],"output":{"name":"result"}}],[10,"emit_arguments","","Emit `fmt::Arguments`",12,{"inputs":[{"name":"self"},{"name":"key"},{"name":"arguments"}],"output":{"name":"result"}}],[8,"Value","","Value that can be serialized",null,null],[10,"serialize","","Serialize self into `Serializer`",13,{"inputs":[{"name":"self"},{"name":"record"},{"name":"key"},{"name":"serializer"}],"output":{"name":"result"}}],[8,"KV","","Key-value pair(s) for log events",null,null],[10,"serialize","","Serialize self into `Serializer`",14,{"inputs":[{"name":"self"},{"name":"record"},{"name":"serializer"}],"output":{"name":"result"}}],[8,"SendSyncRefUnwindSafeKV","","Thread-local safety bound for `KV`",null,null],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"logger"}}],[11,"root","","Build a root `Logger`",15,{"inputs":[{"name":"d"},{"name":"ownedkv"}],"output":{"name":"logger"}}],[11,"root_typed","","Build a root `Logger` that retains `drain` type",15,{"inputs":[{"name":"d"},{"name":"ownedkv"}],"output":{"name":"logger"}}],[11,"new","","Build a child logger",15,{"inputs":[{"name":"self"},{"name":"ownedkv"}],"output":{"name":"logger"}}],[11,"log","","Log one logging `Record`",15,{"inputs":[{"name":"self"},{"name":"record"}],"output":null}],[11,"list","","Get list of key-value pairs assigned to this `Logger`",15,{"inputs":[{"name":"self"}],"output":{"name":"ownedkvlist"}}],[11,"into_erased","","Convert to default, \"erased\" type: `Logger<Arc<SendSyncUnwindSafeDrain>>`",15,{"inputs":[{"name":"self"}],"output":{"generics":["arc"],"name":"logger"}}],[11,"to_erased","","Create a copy with \"erased\" type",15,{"inputs":[{"name":"self"}],"output":{"generics":["arc"],"name":"logger"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"log","","",15,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkvlist"}],"output":{"name":"result"}}],[11,"is_enabled","","",15,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"discard"}}],[11,"log","","",16,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkvlist"}],"output":{"generics":["never"],"name":"result"}}],[11,"is_enabled","","",16,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"filter"}}],[11,"new","","Create `Filter` wrapping given `drain`",0,{"inputs":[{"name":"d"},{"name":"f"}],"output":{"name":"self"}}],[11,"log","","",0,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkvlist"}],"output":{"name":"result"}}],[11,"is_enabled","","",0,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"levelfilter"}}],[11,"new","","Create `LevelFilter`",1,{"inputs":[{"name":"d"},{"name":"level"}],"output":{"name":"self"}}],[11,"log","","",1,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkvlist"}],"output":{"name":"result"}}],[11,"is_enabled","","",1,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"new","","Create `Filter` wrapping given `drain`",17,{"inputs":[{"name":"d"},{"name":"f"}],"output":{"name":"self"}}],[11,"log","","",17,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkvlist"}],"output":{"name":"result"}}],[11,"is_enabled","","",17,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"duplicate"}}],[11,"new","","Create `Duplicate`",2,{"inputs":[{"name":"d1"},{"name":"d2"}],"output":{"name":"self"}}],[11,"log","","",2,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkvlist"}],"output":{"name":"result"}}],[11,"is_enabled","","",2,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"new","","Create `Fuse` wrapping given `drain`",3,{"inputs":[{"name":"d"}],"output":{"name":"self"}}],[11,"log","","",3,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkvlist"}],"output":{"generics":["never"],"name":"result"}}],[11,"is_enabled","","",3,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"ignoreresult"}}],[11,"new","","Create `IgnoreResult` wrapping `drain`",18,{"inputs":[{"name":"d"}],"output":{"name":"self"}}],[11,"log","","",18,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkvlist"}],"output":{"generics":["never"],"name":"result"}}],[11,"is_enabled","","",18,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"mutexdrainerror"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"from","","",7,{"inputs":[{"generics":["mutexguard"],"name":"poisonerror"}],"output":{"name":"mutexdrainerror"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"level"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"cmp","","",8,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"filterlevel"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"filterlevel"}],"output":{"name":"bool"}}],[11,"cmp","","",9,{"inputs":[{"name":"self"},{"name":"filterlevel"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"filterlevel"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"as_short_str","","Convert to `str` from `LOG_LEVEL_SHORT_NAMES`",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_str","","Convert to `str` from `LOG_LEVEL_NAMES`",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_usize","","Cast `Level` to ordering integer",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_usize","","Get a `Level` from an `usize`",8,{"inputs":[{"name":"usize"}],"output":{"generics":["level"],"name":"option"}}],[11,"as_usize","","Convert to `usize` value",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_usize","","Get a `FilterLevel` from an `usize`",9,{"inputs":[{"name":"usize"}],"output":{"generics":["filterlevel"],"name":"option"}}],[11,"max","","Maximum logging level (log everything)",9,{"inputs":[],"output":{"name":"self"}}],[11,"min","","Minimum logging level (log nothing)",9,{"inputs":[],"output":{"name":"self"}}],[11,"from_str","","",8,{"inputs":[{"name":"str"}],"output":{"generics":["level"],"name":"result"}}],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"generics":["filterlevel"],"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_at_least","","Returns true if `self` is at least `level` logging level",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"msg","","Get a log record message",19,{"inputs":[{"name":"self"}],"output":{"name":"arguments"}}],[11,"level","","Get record logging level",19,{"inputs":[{"name":"self"}],"output":{"name":"level"}}],[11,"line","","Get line number",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"location","","Get line number",19,{"inputs":[{"name":"self"}],"output":{"name":"recordlocation"}}],[11,"column","","Get error column",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"file","","Get file path",19,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"tag","","Get tag",19,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"module","","Get module",19,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"function","","Get function (placeholder)",19,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"kv","","Get key-value pairs",19,{"inputs":[{"name":"self"}],"output":{"name":"borrowedkv"}}],[11,"serialize","","",4,{"inputs":[{"name":"self"},{"name":"record"},{"name":"key"},{"name":"serializer"}],"output":{"name":"result"}}],[11,"serialize","","Emit a value",20,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"emit","","Emit a value",20,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"drop","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"serialize","","",5,{"inputs":[{"name":"self"},{"name":"record"},{"name":"key"},{"name":"serializer"}],"output":{"name":"result"}}],[11,"from","","",6,null],[11,"serialize","","",6,{"inputs":[{"name":"self"},{"name":"record"},{"name":"serializer"}],"output":{"name":"result"}}],[11,"serialize","","",21,{"inputs":[{"name":"self"},{"name":"record"},{"name":"serializer"}],"output":{"name":"result"}}],[11,"serialize","","",22,{"inputs":[{"name":"self"},{"name":"record"},{"name":"serializer"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"ownedkvlist"}}],[11,"serialize","","",23,{"inputs":[{"name":"self"},{"name":"record"},{"name":"serializer"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",23,{"inputs":[{"name":"ownedkv"}],"output":{"name":"self"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",10,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",10,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"description","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"o","","Macro for building group of key-value pairs: `OwnedKV`",null,null],[14,"slog_o","","Macro for building group of key-value pairs (alias)",null,null],[14,"b","","Macro for building group of key-value pairs in `BorrowedKV`",null,null],[14,"slog_b","","Alias of `b`",null,null],[14,"kv","","Macro for build `KV` implementing type",null,null],[14,"slog_kv","","Alias of `kv`",null,null],[14,"record_static","","Create `RecordStatic` at the given code location",null,null],[14,"slog_record_static","","Create `RecordStatic` at the given code location (alias)",null,null],[14,"record","","Create `Record` at the given code location",null,null],[14,"slog_record","","Create `Record` at the given code location (alias)",null,null],[14,"log","","Log message a logging record",null,null],[14,"slog_log","","Log message a logging record (alias)",null,null],[14,"crit","","Log critical level record",null,null],[14,"slog_crit","","Log critical level record (alias)",null,null],[14,"error","","Log error level record",null,null],[14,"slog_error","","Log error level record",null,null],[14,"warn","","Log warning level record",null,null],[14,"slog_warn","","Log warning level record (alias)",null,null],[14,"info","","Log info level record",null,null],[14,"slog_info","","Log info level record (alias)",null,null],[14,"debug","","Log debug level record",null,null],[14,"slog_debug","","Log debug level record (alias)",null,null],[14,"trace","","Log trace level record",null,null],[14,"slog_trace","","Log trace level record (alias)",null,null]],"paths":[[3,"Filter"],[3,"LevelFilter"],[3,"Duplicate"],[3,"Fuse"],[3,"FnValue"],[3,"PushFnValue"],[3,"SingleKV"],[4,"MutexDrainError"],[4,"Level"],[4,"FilterLevel"],[4,"Error"],[8,"Drain"],[8,"Serializer"],[8,"Value"],[8,"KV"],[3,"Logger"],[3,"Discard"],[3,"MapError"],[3,"IgnoreResult"],[3,"Record"],[3,"PushFnValueSerializer"],[3,"OwnedKV"],[3,"BorrowedKV"],[3,"OwnedKVList"]]};
searchIndex["syn"] = {"doc":"","items":[[3,"Attribute","syn","Doc-comments are promoted to attributes that have `is_sugared_doc` = true",null,null],[12,"style","","",0,null],[12,"value","","",0,null],[12,"is_sugared_doc","","",0,null],[3,"Field","","A field of a struct or enum variant.",null,null],[12,"ident","","Name of the field, if any.",1,null],[12,"vis","","Visibility of the field.",1,null],[12,"attrs","","Attributes tagged on the field.",1,null],[12,"ty","","Type of the field.",1,null],[3,"Variant","","An enum variant.",null,null],[12,"ident","","Name of the variant.",2,null],[12,"attrs","","Attributes tagged on the variant.",2,null],[12,"data","","Type of variant.",2,null],[12,"discriminant","","Explicit discriminant, e.g. `Foo = 1`",2,null],[3,"Generics","","Represents lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",null,null],[12,"lifetimes","","",3,null],[12,"ty_params","","",3,null],[12,"where_clause","","",3,null],[3,"Lifetime","","",null,null],[12,"ident","","",4,null],[3,"LifetimeDef","","A lifetime definition, e.g. `'a: 'b+'c+'d`",null,null],[12,"attrs","","",5,null],[12,"lifetime","","",5,null],[12,"bounds","","",5,null],[3,"TyParam","","A generic type parameter, e.g. `T: Into<String>`.",null,null],[12,"attrs","","",6,null],[12,"ident","","",6,null],[12,"bounds","","",6,null],[12,"default","","",6,null],[3,"WhereBoundPredicate","","A type bound.",null,null],[12,"bound_lifetimes","","Any lifetimes from a `for` binding",7,null],[12,"bounded_ty","","The type being bounded",7,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",7,null],[3,"WhereClause","","A `where` clause in a definition",null,null],[12,"predicates","","",8,null],[3,"WhereEqPredicate","","An equality predicate (unsupported).",null,null],[12,"lhs_ty","","",9,null],[12,"rhs_ty","","",9,null],[3,"WhereRegionPredicate","","A lifetime predicate.",null,null],[12,"lifetime","","",10,null],[12,"bounds","","",10,null],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Turbofish","","Returned by `TyGenerics::as_turbofish`.",null,null],[3,"TyGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Ident","","",null,null],[3,"ByteStrLit","","",null,null],[12,"value","","",11,null],[12,"style","","",11,null],[3,"FloatLit","","",null,null],[12,"value","","",12,null],[12,"suffix","","",12,null],[3,"IntLit","","",null,null],[12,"value","","",13,null],[12,"suffix","","",13,null],[3,"StrLit","","",null,null],[12,"value","","",14,null],[12,"style","","",14,null],[3,"Delimited","","",null,null],[12,"delim","","The type of delimiter",15,null],[12,"tts","","The delimited sequence of token trees",15,null],[3,"Mac","","Represents a macro invocation. The Path indicates which macro is being invoked, and the vector of token-trees contains the source of the macro invocation.",null,null],[12,"path","","",16,null],[12,"tts","","",16,null],[3,"DeriveInput","","Struct or enum sent to a `proc_macro_derive` macro.",null,null],[12,"ident","","Name of the struct or enum.",17,null],[12,"vis","","Visibility of the struct or enum.",17,null],[12,"attrs","","Attributes tagged on the whole struct or enum.",17,null],[12,"generics","","Generics required to complete the definition.",17,null],[12,"body","","Data within the struct or enum.",17,null],[3,"AngleBracketedParameterData","","A path like `Foo<'a, T>`",null,null],[12,"lifetimes","","The lifetime parameters for this path segment.",18,null],[12,"types","","The type parameters for this path segment, if present.",18,null],[12,"bindings","","Bindings (equality constraints) on associated types, if present.",18,null],[3,"BareFnArg","","An argument in a function type.",null,null],[12,"name","","",19,null],[12,"ty","","",19,null],[3,"BareFnTy","","",null,null],[12,"unsafety","","",20,null],[12,"abi","","",20,null],[12,"lifetimes","","",20,null],[12,"inputs","","",20,null],[12,"output","","",20,null],[12,"variadic","","",20,null],[3,"MutTy","","",null,null],[12,"ty","","",21,null],[12,"mutability","","",21,null],[3,"ParenthesizedParameterData","","A path like `Foo(A,B) -> C`",null,null],[12,"inputs","","`(A, B)`",22,null],[12,"output","","`C`",22,null],[3,"Path","","A \"Path\" is essentially Rust's notion of a name.",null,null],[12,"global","","A `::foo` path, is relative to the crate root rather than current module (like paths in an import).",23,null],[12,"segments","","The segments in the path: the things separated by `::`.",23,null],[3,"PathSegment","","A segment of a path: an identifier, an optional lifetime, and a set of types.",null,null],[12,"ident","","The identifier portion of this path segment.",24,null],[12,"parameters","","Type/lifetime parameters attached to this path. They come in two flavors: `Path<A,B,C>` and `Path(A,B) -> C`. Note that this is more than just simple syntactic sugar; the use of parens affects the region binding rules, so we preserve the distinction.",24,null],[3,"PolyTraitRef","","",null,null],[12,"bound_lifetimes","","The `'a` in `<'a> Foo<&'a T>`",25,null],[12,"trait_ref","","The `Foo<&'a T>` in `<'a> Foo<&'a T>`",25,null],[3,"QSelf","","The explicit Self type in a \"qualified path\". The actual path, including the trait and the associated item, is stored separately. `position` represents the index of the associated item qualified with this Self type.",null,null],[12,"ty","","",26,null],[12,"position","","",26,null],[3,"TypeBinding","","Bind a type to an associated type: `A=Foo`.",null,null],[12,"ident","","",27,null],[12,"ty","","",27,null],[4,"AttrStyle","","Distinguishes between Attributes that decorate items and Attributes that are contained as statements within items. These two cases need to be distinguished for pretty-printing.",null,null],[13,"Outer","","Attribute of the form `#![...]`.",28,null],[13,"Inner","","Attribute of the form `#[...]`.",28,null],[4,"MetaItem","","A compile-time attribute item.",null,null],[13,"Word","","Word meta item.",29,null],[13,"List","","List meta item.",29,null],[13,"NameValue","","Name-value meta item.",29,null],[4,"NestedMetaItem","","Possible values inside of compile-time attribute lists.",null,null],[13,"MetaItem","","A full `MetaItem`.",30,null],[13,"Literal","","A Rust literal.",30,null],[4,"ConstExpr","","",null,null],[13,"Call","","A function call",31,null],[13,"Binary","","A binary operation (For example: `a + b`, `a * b`)",31,null],[13,"Unary","","A unary operation (For example: `!x`, `*x`)",31,null],[13,"Lit","","A literal (For example: `1`, `\"foo\"`)",31,null],[13,"Cast","","A cast (`foo as f64`)",31,null],[13,"Path","","Variable reference, possibly containing `::` and/or type parameters, e.g. foo::bar::.",31,null],[13,"Index","","An indexing operation (`foo[2]`)",31,null],[13,"Paren","","No-op: used solely so we can pretty-print faithfully",31,null],[13,"Other","","If compiling with full support for expression syntax, any expression is allowed",31,null],[4,"VariantData","","Data stored within an enum variant or struct.",null,null],[13,"Struct","","Struct variant, e.g. `Point { x: f64, y: f64 }`.",32,null],[13,"Tuple","","Tuple variant, e.g. `Some(T)`.",32,null],[13,"Unit","","Unit variant, e.g. `None`.",32,null],[4,"Visibility","","Visibility level of an item.",null,null],[13,"Public","","Public, i.e. `pub`.",33,null],[13,"Crate","","Crate-visible, i.e. `pub(crate)`.",33,null],[13,"Restricted","","Restricted, e.g. `pub(some::module)`.",33,null],[13,"Inherited","","Inherited, i.e. private.",33,null],[4,"TraitBoundModifier","","A modifier on a bound, currently this is only used for `?Sized`, where the modifier is `Maybe`. Negative bounds should also be handled here.",null,null],[13,"None","","",34,null],[13,"Maybe","","",34,null],[4,"TyParamBound","","The AST represents all type param bounds as types. `typeck::collect::compute_bounds` matches these against the \"special\" built-in traits (see `middle::lang_items`) and detects Copy, Send and Sync.",null,null],[13,"Trait","","",35,null],[13,"Region","","",35,null],[4,"WherePredicate","","A single predicate in a `where` clause",null,null],[13,"BoundPredicate","","A type binding, e.g. `for<'c> Foo: Send+Clone+'c`",36,null],[13,"RegionPredicate","","A lifetime predicate, e.g. `'a: 'b+'c`",36,null],[13,"EqPredicate","","An equality predicate (unsupported)",36,null],[4,"FloatTy","","",null,null],[13,"F32","","",37,null],[13,"F64","","",37,null],[13,"Unsuffixed","","",37,null],[4,"IntTy","","",null,null],[13,"Isize","","",38,null],[13,"I8","","",38,null],[13,"I16","","",38,null],[13,"I32","","",38,null],[13,"I64","","",38,null],[13,"Usize","","",38,null],[13,"U8","","",38,null],[13,"U16","","",38,null],[13,"U32","","",38,null],[13,"U64","","",38,null],[13,"Unsuffixed","","",38,null],[4,"Lit","","Literal kind.",null,null],[13,"Str","","A string literal (`\"foo\"`)",39,null],[13,"ByteStr","","A byte string (`b\"foo\"`)",39,null],[13,"Byte","","A byte char (`b'f'`)",39,null],[13,"Char","","A character literal (`'a'`)",39,null],[13,"Int","","An integer literal (`1`)",39,null],[13,"Float","","A float literal (`1f64` or `1E10f64` or `1.0E10`)",39,null],[13,"Bool","","A boolean literal",39,null],[4,"StrStyle","","",null,null],[13,"Cooked","","A regular string, like `\"foo\"`",40,null],[13,"Raw","","A raw string, like `r##\"foo\"##`",40,null],[4,"BinOpToken","","",null,null],[13,"Plus","","",41,null],[13,"Minus","","",41,null],[13,"Star","","",41,null],[13,"Slash","","",41,null],[13,"Percent","","",41,null],[13,"Caret","","",41,null],[13,"And","","",41,null],[13,"Or","","",41,null],[13,"Shl","","",41,null],[13,"Shr","","",41,null],[4,"DelimToken","","A delimiter token",null,null],[13,"Paren","","A round parenthesis: `(` or `)`",42,null],[13,"Bracket","","A square bracket: `[` or `]`",42,null],[13,"Brace","","A curly brace: `{` or `}`",42,null],[4,"Token","","",null,null],[13,"Eq","","",43,null],[13,"Lt","","",43,null],[13,"Le","","",43,null],[13,"EqEq","","",43,null],[13,"Ne","","",43,null],[13,"Ge","","",43,null],[13,"Gt","","",43,null],[13,"AndAnd","","",43,null],[13,"OrOr","","",43,null],[13,"Not","","",43,null],[13,"Tilde","","",43,null],[13,"BinOp","","",43,null],[13,"BinOpEq","","",43,null],[13,"At","","",43,null],[13,"Dot","","",43,null],[13,"DotDot","","",43,null],[13,"DotDotDot","","",43,null],[13,"Comma","","",43,null],[13,"Semi","","",43,null],[13,"Colon","","",43,null],[13,"ModSep","","",43,null],[13,"RArrow","","",43,null],[13,"LArrow","","",43,null],[13,"FatArrow","","",43,null],[13,"Pound","","",43,null],[13,"Dollar","","",43,null],[13,"Question","","",43,null],[13,"Literal","","",43,null],[13,"Ident","","",43,null],[13,"Underscore","","",43,null],[13,"Lifetime","","",43,null],[13,"DocComment","","",43,null],[4,"TokenTree","","When the main rust parser encounters a syntax-extension invocation, it parses the arguments to the invocation as a token-tree. This is a very loose structure, such that all sorts of different AST-fragments can be passed to syntax extensions using a uniform type.",null,null],[13,"Token","","A single token",44,null],[13,"Delimited","","A delimited sequence of token trees",44,null],[4,"Body","","Body of a derived struct or enum.",null,null],[13,"Enum","","It's an enum.",45,null],[13,"Struct","","It's a struct.",45,null],[4,"BinOp","","",null,null],[13,"Add","","The `+` operator (addition)",46,null],[13,"Sub","","The `-` operator (subtraction)",46,null],[13,"Mul","","The `*` operator (multiplication)",46,null],[13,"Div","","The `/` operator (division)",46,null],[13,"Rem","","The `%` operator (modulus)",46,null],[13,"And","","The `&&` operator (logical and)",46,null],[13,"Or","","The `||` operator (logical or)",46,null],[13,"BitXor","","The `^` operator (bitwise xor)",46,null],[13,"BitAnd","","The `&` operator (bitwise and)",46,null],[13,"BitOr","","The `|` operator (bitwise or)",46,null],[13,"Shl","","The `<<` operator (shift left)",46,null],[13,"Shr","","The `>>` operator (shift right)",46,null],[13,"Eq","","The `==` operator (equality)",46,null],[13,"Lt","","The `<` operator (less than)",46,null],[13,"Le","","The `<=` operator (less than or equal to)",46,null],[13,"Ne","","The `!=` operator (not equal to)",46,null],[13,"Ge","","The `>=` operator (greater than or equal to)",46,null],[13,"Gt","","The `>` operator (greater than)",46,null],[4,"UnOp","","",null,null],[13,"Deref","","The `*` operator for dereferencing",47,null],[13,"Not","","The `!` operator for logical inversion",47,null],[13,"Neg","","The `-` operator for negation",47,null],[4,"Abi","","",null,null],[13,"Named","","",48,null],[13,"Rust","","",48,null],[4,"FunctionRetTy","","",null,null],[13,"Default","","Return type is not specified.",49,null],[13,"Ty","","Everything else",49,null],[4,"Mutability","","",null,null],[13,"Mutable","","",50,null],[13,"Immutable","","",50,null],[4,"PathParameters","","Parameters of a path segment.",null,null],[13,"AngleBracketed","","The `<'a, A, B, C>` in `foo::bar::baz::<'a, A, B, C>`",51,null],[13,"Parenthesized","","The `(A, B)` and `C` in `Foo(A, B) -> C`",51,null],[4,"Ty","","The different kinds of types recognized by the compiler",null,null],[13,"Slice","","A variable-length array (`[T]`)",52,null],[13,"Array","","A fixed length array (`[T; n]`)",52,null],[13,"Ptr","","A raw pointer (`*const T` or `*mut T`)",52,null],[13,"Rptr","","A reference (`&'a T` or `&'a mut T`)",52,null],[13,"BareFn","","A bare function (e.g. `fn(usize) -> bool`)",52,null],[13,"Never","","The never type (`!`)",52,null],[13,"Tup","","A tuple (`(A, B, C, D, ...)`)",52,null],[13,"Path","","A path (`module::module::...::Type`), optionally \"qualified\", e.g. `<Vec<T> as SomeTrait>::SomeType`.",52,null],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",52,null],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",52,null],[13,"Paren","","No-op; kept solely so that we can pretty-print faithfully",52,null],[13,"Infer","","TyKind::Infer means the type should be inferred instead of it having been specified. This can appear anywhere in a type.",52,null],[13,"Mac","","A macro in the type position.",52,null],[4,"Unsafety","","",null,null],[13,"Unsafe","","",53,null],[13,"Normal","","",53,null],[5,"parse_derive_input","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["deriveinput","string"],"name":"result"}}],[5,"parse_type","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["ty","string"],"name":"result"}}],[5,"parse_path","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["path","string"],"name":"result"}}],[5,"parse_where_clause","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["whereclause","string"],"name":"result"}}],[5,"parse_token_trees","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["vec","string"],"name":"result"}}],[5,"parse_ident","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["ident","string"],"name":"result"}}],[5,"parse_ty_param_bound","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["typarambound","string"],"name":"result"}}],[5,"parse_outer_attr","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["attribute","string"],"name":"result"}}],[11,"to_tokens","","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",29,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",30,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"attribute"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"name","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"attrstyle"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"attrstyle"}],"output":{"name":"bool"}}],[11,"hash","","",28,null],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"metaitem"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"bool"}}],[11,"hash","","",29,null],[11,"name","","Name of the item.",29,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"nestedmetaitem"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"nestedmetaitem"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"nestedmetaitem"}],"output":{"name":"bool"}}],[11,"hash","","",30,null],[11,"to_tokens","","",31,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"constexpr"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":{"name":"bool"}}],[11,"hash","","",31,null],[11,"to_tokens","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",32,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",33,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"variant"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"variantdata"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"hash","","",32,null],[11,"fields","","Slice containing the fields stored in the variant.",32,null],[11,"fields_mut","","Mutable slice containing the fields stored in the variant.",32,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"visibility"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"hash","","",33,null],[11,"to_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",54,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",55,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",56,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",4,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",5,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",6,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",35,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",8,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",36,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",7,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",10,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",9,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"generics"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"generics"}}],[11,"hash","","",3,null],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"split_for_impl","","Split a type's generics into the pieces required for impl'ing a trait for that type.",3,null],[11,"as_turbofish","","Turn a type's generics like `<X, Y>` into a turbofish like `::<X, Y>`.",55,{"inputs":[{"name":"self"}],"output":{"name":"turbofish"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"new","","",4,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"new","","",5,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"typaram"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"from","","",6,{"inputs":[{"name":"ident"}],"output":{"name":"self"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"typarambound"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"hash","","",35,null],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"traitboundmodifier"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"traitboundmodifier"}],"output":{"name":"bool"}}],[11,"hash","","",34,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"whereclause"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"whereclause"}}],[11,"hash","","",8,null],[11,"none","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"wherepredicate"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"hash","","",36,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"whereboundpredicate"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",7,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"whereregionpredicate"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",10,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"whereeqpredicate"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",9,null],[11,"to_tokens","","",57,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"hash","","",57,null],[11,"cmp","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"le","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"gt","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"ge","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"new","","",57,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",57,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",57,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"name":"self"}}],[11,"from","","",57,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",57,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"as_ref","","",57,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"to_tokens","","",39,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"lit"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"hash","","",39,null],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"strstyle"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"hash","","",40,null],[11,"from","","",39,{"inputs":[{"name":"string"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"str"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"lit"}}],[11,"from","","",39,null],[11,"from","","",39,{"inputs":[{"name":"char"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"bool"}],"output":{"name":"lit"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"intty"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"intty"}],"output":{"name":"bool"}}],[11,"hash","","",38,null],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"floatty"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"floatty"}],"output":{"name":"bool"}}],[11,"hash","","",37,null],[11,"from","","",39,{"inputs":[{"name":"isize"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"i8"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"i16"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"i32"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"i64"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"usize"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"u8"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"u16"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"u32"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"u64"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"f32"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"f64"}],"output":{"name":"lit"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"strlit"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bytestrlit"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"intlit"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"floatlit"}}],[11,"to_tokens","","",16,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",44,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",15,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",43,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",41,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"mac"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"bool"}}],[11,"hash","","",16,null],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"tokentree"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"hash","","",44,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"delimited"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"hash","","",43,null],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"binoptoken"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"binoptoken"}],"output":{"name":"bool"}}],[11,"hash","","",41,null],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"delimtoken"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"delimtoken"}],"output":{"name":"bool"}}],[11,"hash","","",42,null],[11,"to_tokens","","",17,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"deriveinput"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":{"name":"bool"}}],[11,"hash","","",17,null],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"body"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"hash","","",45,null],[11,"op","","",46,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"assign_op","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",46,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"op","","",47,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_tokens","","",47,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"binop"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"binop"}],"output":{"name":"bool"}}],[11,"hash","","",46,null],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"unop"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"unop"}],"output":{"name":"bool"}}],[11,"hash","","",47,null],[11,"to_tokens","","",52,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",50,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",23,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",24,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",51,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",18,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",27,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",22,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",25,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",20,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",19,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",53,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",48,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"hash","","",52,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"mutty"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"hash","","",21,null],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"mutability"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"mutability"}],"output":{"name":"bool"}}],[11,"hash","","",50,null],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"hash","","",23,null],[11,"from","","",23,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"pathsegment"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"hash","","",24,null],[11,"from","","",24,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"pathparameters"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"hash","","",51,null],[11,"none","","",51,{"inputs":[],"output":{"name":"self"}}],[11,"is_empty","","",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"anglebracketedparameterdata"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"anglebracketedparameterdata"}}],[11,"hash","","",18,null],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"typebinding"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"hash","","",27,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"parenthesizedparameterdata"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"hash","","",22,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"polytraitref"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"hash","","",25,null],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"qself"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"hash","","",26,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"barefnty"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"hash","","",20,null],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"unsafety"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"unsafety"}],"output":{"name":"bool"}}],[11,"hash","","",53,null],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"abi"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"hash","","",48,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"barefnarg"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":{"name":"bool"}}],[11,"hash","","",19,null],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"functionretty"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"hash","","",49,null],[0,"visit","","AST walker. Each overridden visit method has full control over what happens with its node, it can do its own traversal of the node's children, call `visit::walk_*` to apply the default traversal algorithm, or prevent deeper traversal by doing nothing.",null,null],[5,"walk_opt_ident","syn::visit","",null,{"inputs":[{"name":"v"},{"name":"option"}],"output":null}],[5,"walk_lifetime_def","","",null,{"inputs":[{"name":"v"},{"name":"lifetimedef"}],"output":null}],[5,"walk_poly_trait_ref","","",null,{"inputs":[{"name":"v"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[5,"walk_derive_input","","",null,{"inputs":[{"name":"v"},{"name":"deriveinput"}],"output":null}],[5,"walk_variant","","",null,{"inputs":[{"name":"v"},{"name":"variant"},{"name":"generics"}],"output":null}],[5,"walk_ty","","",null,{"inputs":[{"name":"v"},{"name":"ty"}],"output":null}],[5,"walk_path","","",null,{"inputs":[{"name":"v"},{"name":"path"}],"output":null}],[5,"walk_path_segment","","",null,{"inputs":[{"name":"v"},{"name":"pathsegment"}],"output":null}],[5,"walk_path_parameters","","",null,{"inputs":[{"name":"v"},{"name":"pathparameters"}],"output":null}],[5,"walk_assoc_type_binding","","",null,{"inputs":[{"name":"v"},{"name":"typebinding"}],"output":null}],[5,"walk_ty_param_bound","","",null,{"inputs":[{"name":"v"},{"name":"typarambound"}],"output":null}],[5,"walk_generics","","",null,{"inputs":[{"name":"v"},{"name":"generics"}],"output":null}],[5,"walk_fn_ret_ty","","",null,{"inputs":[{"name":"v"},{"name":"functionretty"}],"output":null}],[5,"walk_variant_data","","",null,{"inputs":[{"name":"v"},{"name":"variantdata"}],"output":null}],[5,"walk_field","","",null,{"inputs":[{"name":"v"},{"name":"field"}],"output":null}],[5,"walk_const_expr","","",null,{"inputs":[{"name":"v"},{"name":"constexpr"}],"output":null}],[5,"walk_mac","","",null,{"inputs":[{"name":"v"},{"name":"mac"}],"output":null}],[8,"Visitor","","Each method of the Visitor trait is a hook to be potentially overridden.  Each method's default implementation recursively visits the substructure of the input via the corresponding `walk` method; e.g. the `visit_mod` method by default calls `visit::walk_mod`.",null,null],[11,"visit_ident","","",58,{"inputs":[{"name":"self"},{"name":"ident"}],"output":null}],[11,"visit_derive_input","","",58,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":null}],[11,"visit_ty","","",58,{"inputs":[{"name":"self"},{"name":"ty"}],"output":null}],[11,"visit_generics","","",58,{"inputs":[{"name":"self"},{"name":"generics"}],"output":null}],[11,"visit_ty_param_bound","","",58,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":null}],[11,"visit_poly_trait_ref","","",58,{"inputs":[{"name":"self"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[11,"visit_variant_data","","",58,{"inputs":[{"name":"self"},{"name":"variantdata"},{"name":"ident"},{"name":"generics"}],"output":null}],[11,"visit_field","","",58,{"inputs":[{"name":"self"},{"name":"field"}],"output":null}],[11,"visit_variant","","",58,{"inputs":[{"name":"self"},{"name":"variant"},{"name":"generics"}],"output":null}],[11,"visit_lifetime","","",58,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":null}],[11,"visit_lifetime_def","","",58,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":null}],[11,"visit_path","","",58,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"visit_path_segment","","",58,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":null}],[11,"visit_path_parameters","","",58,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":null}],[11,"visit_assoc_type_binding","","",58,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":null}],[11,"visit_attribute","","",58,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"visit_fn_ret_ty","","",58,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":null}],[11,"visit_const_expr","","",58,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":null}],[11,"visit_lit","","",58,{"inputs":[{"name":"self"},{"name":"lit"}],"output":null}],[11,"visit_mac","","",58,{"inputs":[{"name":"self"},{"name":"mac"}],"output":null}],[0,"parse","syn","This module contains a set of exported nom parsers which can be used to parse custom grammars when used alongside the `synom` crate.",null,null],[4,"IResult","syn::parse","The result of a parser.",null,null],[13,"Done","","Parsing succeeded. The first field contains the rest of the unparsed data and the second field contains the parse result.",59,null],[13,"Error","","Parsing failed.",59,null],[5,"lit","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","lit"],"name":"iresult"}}],[5,"string","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","strlit"],"name":"iresult"}}],[5,"byte_string","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","bytestrlit"],"name":"iresult"}}],[5,"byte","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","u8"],"name":"iresult"}}],[5,"character","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","char"],"name":"iresult"}}],[5,"float","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","floatlit"],"name":"iresult"}}],[5,"int","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","intlit"],"name":"iresult"}}],[5,"boolean","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","bool"],"name":"iresult"}}],[5,"ty","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","ty"],"name":"iresult"}}],[5,"path","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","path"],"name":"iresult"}}],[5,"tt","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","tokentree"],"name":"iresult"}}],[5,"ident","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","ident"],"name":"iresult"}}],[5,"lifetime","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","lifetime"],"name":"iresult"}}],[11,"expect","","Unwraps the result, asserting the the parse is complete. Panics with a message based on the given string if the parse failed or is incomplete.",59,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"o"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"iresult"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}]],"paths":[[3,"Attribute"],[3,"Field"],[3,"Variant"],[3,"Generics"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"TyParam"],[3,"WhereBoundPredicate"],[3,"WhereClause"],[3,"WhereEqPredicate"],[3,"WhereRegionPredicate"],[3,"ByteStrLit"],[3,"FloatLit"],[3,"IntLit"],[3,"StrLit"],[3,"Delimited"],[3,"Mac"],[3,"DeriveInput"],[3,"AngleBracketedParameterData"],[3,"BareFnArg"],[3,"BareFnTy"],[3,"MutTy"],[3,"ParenthesizedParameterData"],[3,"Path"],[3,"PathSegment"],[3,"PolyTraitRef"],[3,"QSelf"],[3,"TypeBinding"],[4,"AttrStyle"],[4,"MetaItem"],[4,"NestedMetaItem"],[4,"ConstExpr"],[4,"VariantData"],[4,"Visibility"],[4,"TraitBoundModifier"],[4,"TyParamBound"],[4,"WherePredicate"],[4,"FloatTy"],[4,"IntTy"],[4,"Lit"],[4,"StrStyle"],[4,"BinOpToken"],[4,"DelimToken"],[4,"Token"],[4,"TokenTree"],[4,"Body"],[4,"BinOp"],[4,"UnOp"],[4,"Abi"],[4,"FunctionRetTy"],[4,"Mutability"],[4,"PathParameters"],[4,"Ty"],[4,"Unsafety"],[3,"ImplGenerics"],[3,"TyGenerics"],[3,"Turbofish"],[3,"Ident"],[8,"Visitor"],[4,"IResult"]]};
searchIndex["synom"] = {"doc":"Adapted from `nom` by removing the `IResult::Incomplete` variant which:","items":[[4,"IResult","synom","The result of a parser.",null,null],[13,"Done","","Parsing succeeded. The first field contains the rest of the unparsed data and the second field contains the parse result.",0,null],[13,"Error","","Parsing failed.",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"iresult"}}],[11,"expect","","Unwraps the result, asserting the the parse is complete. Panics with a message based on the given string if the parse failed or is incomplete.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"o"}}],[14,"punct","","Parse a piece of punctuation like \"+\" or \"+=\".",null,null],[14,"keyword","","Parse a keyword like \"fn\" or \"struct\".",null,null],[14,"option","","Turn a failed parse into `None` and a successful parse into `Some`.",null,null],[14,"opt_vec","","Turn a failed parse into an empty vector. The argument parser must itself return a vector.",null,null],[14,"epsilon","","Parses nothing and always succeeds.",null,null],[14,"separated_list","","Zero or more values separated by some separator. Does not allow a trailing seperator.",null,null],[14,"terminated_list","","Zero or more values separated by some separator. A trailing separator is allowed.",null,null],[14,"named","","Define a function from a parser combination.",null,null],[14,"call","","Invoke the given parser function with the passed in arguments.",null,null],[14,"map","","Transform the result of a parser by applying a function or closure.",null,null],[14,"not","","Parses successfully if the given parser fails to parse. Does not consume any of the input.",null,null],[14,"cond","","Conditionally execute the given parser.",null,null],[14,"cond_reduce","","Fail to parse if condition is false, otherwise parse the given parser.",null,null],[14,"preceded","","Parse two things, returning the value of the second.",null,null],[14,"terminated","","Parse two things, returning the value of the first.",null,null],[14,"many0","","Parse zero or more values using the given parser.",null,null],[14,"peek","","Parse a value without consuming it from the input data.",null,null],[14,"take_until","","Parse the part of the input up to but not including the given string. Fail to parse if the given string is not present in the input.",null,null],[14,"tag","","Parse the given string from exactly the current position in the input. You almost always want `punct!` or `keyword!` instead of this.",null,null],[14,"switch","","Pattern-match the result of a parser to select which other parser to run.",null,null],[14,"value","","Produce the given value without parsing anything. Useful as an argument to `switch!`.",null,null],[14,"delimited","","Value surrounded by a pair of delimiters.",null,null],[14,"separated_nonempty_list","","One or more values separated by some separator. Does not allow a trailing separator.",null,null],[14,"tuple","","Run a series of parsers and produce all of the results in a tuple.",null,null],[14,"alt","","Run a series of parsers, returning the result of the first one which succeeds.",null,null],[14,"do_parse","","Run a series of parsers, one after another, optionally assigning the results a name. Fail if any of the parsers fails.",null,null]],"paths":[[4,"IResult"]]};
searchIndex["synstructure"] = {"doc":"This crate provides helper types for matching against enum variants, and extracting bindings to each of the fields in the deriving Struct or Enum in a generic way.","items":[[3,"BindingInfo","synstructure","Information about a specific binding. This contains both an `Ident` reference to the given field, and the syn `&'a Field` descriptor for that field.",null,null],[12,"binding","","The name which this BindingInfo will bind to.",0,null],[12,"style","","The type of binding which this BindingInfo will create.",0,null],[3,"VariantAst","","This type is similar to `syn`'s `Variant` type, however each of the fields are references rather than owned. When this is used as the AST for a real variant, this struct simply borrows the fields of the `syn` `Variant`, however this type may also be used as the sole variant for astruct.",null,null],[12,"ident","","",1,null],[12,"attrs","","",1,null],[12,"data","","",1,null],[12,"discriminant","","",1,null],[3,"VariantInfo","","A wrapper around a `syn` `DeriveInput`'s variant which provides utilities for destructuring `Variant`s with `match` expressions.",null,null],[12,"prefix","","",2,null],[3,"Structure","","A wrapper around a `syn` `DeriveInput` which provides utilities for creating custom derive trait implementations.",null,null],[4,"BindStyle","","The type of binding to use when generating a pattern.",null,null],[13,"Move","","`x`",3,null],[13,"MoveMut","","`mut x`",3,null],[13,"Ref","","`ref x`",3,null],[13,"RefMut","","`ref mut x`",3,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bindstyle"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"bindstyle"}],"output":{"name":"bool"}}],[11,"hash","","",3,null],[11,"to_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bindinginfo"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"bindinginfo"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"bindinginfo"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"to_tokens","","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"ast","","Returns a reference to the underlying `syn` AST node which this `BindingInfo` references",0,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"pat","","Generates the pattern fragment for this field binding.",0,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"referenced_ty_params","","Returns a list of the type parameters which are referenced in this field's type.",0,{"inputs":[{"name":"self"}],"output":{"generics":["ident"],"name":"vec"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"variantast"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"variantast"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"variantast"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"variantinfo"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"variantinfo"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"variantinfo"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"bindings","","Returns a slice of the bindings in this Variant.",2,null],[11,"bindings_mut","","Returns a mut slice of the bindings in this Variant.",2,null],[11,"ast","","Returns a `VariantAst` object which contains references to the underlying `syn` AST node which this `Variant` was created from.",2,{"inputs":[{"name":"self"}],"output":{"name":"variantast"}}],[11,"omitted_bindings","","True if any bindings were omitted due to a `filter` call.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"pat","","Generates the match-arm pattern which could be used to match against this Variant.",2,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"construct","","Generates the token stream required to construct the current variant.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"tokens"}}],[11,"each","","Runs the passed-in function once for each bound field, passing in a `BindingInfo`. and generating a `match` arm which evaluates the returned tokens.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"tokens"}}],[11,"fold","","Runs the passed-in function once for each bound field, passing in the result of the previous call, and a `BindingInfo`. generating a `match` arm which evaluates to the resulting tokens.",2,{"inputs":[{"name":"self"},{"name":"i"},{"name":"f"}],"output":{"name":"tokens"}}],[11,"filter","","Filter the bindings created by this `Variant` object. This has 2 effects:",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"remove_binding","","Remove the binding at the given index.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"bind_with","","Updates the `BindStyle` for each of the passed-in fields by calling the passed-in function for each `BindingInfo`.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"binding_name","","Updates the binding name for each fo the passed-in fields by calling the passed-in function for each `BindingInfo`.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"referenced_ty_params","","Returns a list of the type parameters which are referenced in this field's type.",2,{"inputs":[{"name":"self"}],"output":{"generics":["ident"],"name":"vec"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"structure"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"structure"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"structure"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"new","","Create a new `Structure` with the variants and fields from the passed-in `DeriveInput`.",4,{"inputs":[{"name":"deriveinput"}],"output":{"name":"self"}}],[11,"variants","","Returns a slice of the variants in this Structure.",4,null],[11,"variants_mut","","Returns a mut slice of the variants in this Structure.",4,null],[11,"ast","","Returns a reference to the underlying `syn` AST node which this `Structure` was created from.",4,{"inputs":[{"name":"self"}],"output":{"name":"deriveinput"}}],[11,"omitted_variants","","True if any variants were omitted due to a `filter_variants` call.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"each","","Runs the passed-in function once for each bound field, passing in a `BindingInfo`. and generating `match` arms which evaluate the returned tokens.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"tokens"}}],[11,"fold","","Runs the passed-in function once for each bound field, passing in the result of the previous call, and a `BindingInfo`. generating `match` arms which evaluate to the resulting tokens.",4,{"inputs":[{"name":"self"},{"name":"i"},{"name":"f"}],"output":{"name":"tokens"}}],[11,"each_variant","","Runs the passed-in function once for each variant, passing in a `VariantInfo`. and generating `match` arms which evaluate the returned tokens.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"tokens"}}],[11,"filter","","Filter the bindings created by this `Structure` object. This has 2 effects:",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"filter_variants","","Filter the variants matched by this `Structure` object. This has 2 effects:",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"remove_variant","","Remove the variant at the given index.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"bind_with","","Updates the `BindStyle` for each of the passed-in fields by calling the passed-in function for each `BindingInfo`.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"binding_name","","Updates the binding name for each fo the passed-in fields by calling the passed-in function for each `BindingInfo`.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"referenced_ty_params","","Returns a list of the type parameters which are refrenced in the types of non-filtered fields / variants.",4,{"inputs":[{"name":"self"}],"output":{"generics":["ident"],"name":"vec"}}],[11,"add_trait_bounds","","Add trait bounds for a trait with the given path for each type parmaeter referenced in the types of non-filtered fields.",4,{"inputs":[{"name":"self"},{"name":"typarambound"},{"name":"vec"}],"output":null}],[11,"bound_impl","","Creates an `impl` block with the required generic type fields filled in to implement the trait `path`.",4,{"inputs":[{"name":"self"},{"name":"p"},{"name":"b"}],"output":{"name":"tokens"}}],[11,"unsafe_bound_impl","","This method is the same as `bound_impl`, except also includes the `unsafe` keyword for implementing unsafe traits.",4,{"inputs":[{"name":"self"},{"name":"p"},{"name":"b"}],"output":{"name":"tokens"}}],[11,"unbound_impl","","This method is like `bound_impl` but doesn't add the additional bounds to the where clause.",4,{"inputs":[{"name":"self"},{"name":"p"},{"name":"b"}],"output":{"name":"tokens"}}],[11,"unsafe_unbound_impl","","This method is the same as `unbound_impl`, except also includes the `unsafe` keyword for implementing unsafe traits.",4,{"inputs":[{"name":"self"},{"name":"p"},{"name":"b"}],"output":{"name":"tokens"}}],[14,"decl_derive","","The `decl_derive!` macro declares a custom derive wrapper. It will parse the incoming TokenStream into a `synstructure::Structure` object, and pass it into the inner function.",null,null],[14,"test_derive","","Run a test on a custom derive. This macro expands both the original struct and the expansion to ensure that they compile correctly, and confirms that feeding the original struct into the named derive will produce the written output.",null,null]],"paths":[[3,"BindingInfo"],[3,"VariantAst"],[3,"VariantInfo"],[4,"BindStyle"],[3,"Structure"]]};
searchIndex["thread_local"] = {"doc":"Per-object thread-local storage","items":[[3,"ThreadLocal","thread_local","Thread-local variable wrapper",null,null],[3,"IterMut","","Mutable iterator over the contents of a `ThreadLocal`.",null,null],[3,"IntoIter","","An iterator that moves out of a `ThreadLocal`.",null,null],[3,"CachedThreadLocal","","Wrapper around `ThreadLocal` which adds a fast path for a single thread.",null,null],[6,"CachedIterMut","","Mutable iterator over the contents of a `CachedThreadLocal`.",null,null],[6,"CachedIntoIter","","An iterator that moves out of a `CachedThreadLocal`.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new empty `ThreadLocal`.",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",0,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"into_iter","","",0,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"option"}}],[11,"size_hint","","",1,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"option"}}],[11,"size_hint","","",2,null],[11,"default","","",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"new","","Creates a new empty `CachedThreadLocal`.",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",3,{"inputs":[{"name":"self"}],"output":{"name":"cacheditermut"}}],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"into_iter","","",3,{"inputs":[{"name":"self"}],"output":{"name":"cachedintoiter"}}],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ThreadLocal"],[3,"IterMut"],[3,"IntoIter"],[3,"CachedThreadLocal"]]};
searchIndex["ucd_util"] = {"doc":"The `ucd-util` crate contains a smattering of utility functions that implement various algorithms specified by Unicode. There is no specific goal for exhaustiveness. Instead, implementations should be added on an as-needed basis.","items":[[5,"hangul_name","ucd_util","Return the character name of the given precomposed Hangul codepoint.",null,{"inputs":[{"name":"u32"}],"output":{"generics":["string"],"name":"option"}}],[5,"hangul_full_canonical_decomposition","","Return the full canonical decomposition of the given precomposed Hangul codepoint.",null,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[5,"ideograph_name","","Return the character name of the given ideograph codepoint.",null,{"inputs":[{"name":"u32"}],"output":{"generics":["string"],"name":"option"}}],[5,"character_name_normalize","","Normalize the given character name in place according to UAX44-LM2.",null,{"inputs":[{"name":"string"}],"output":null}],[5,"symbolic_name_normalize","","Normalize the given symbolic name in place according to UAX44-LM3.",null,{"inputs":[{"name":"string"}],"output":null}],[5,"canonical_property_name","","Find the canonical property name for the given normalized property name.",null,{"inputs":[{"name":"propertytable"},{"name":"str"}],"output":{"generics":["str"],"name":"option"}}],[5,"property_values","","Find the set of possible property values for a given property.",null,{"inputs":[{"name":"propertyvaluetable"},{"name":"str"}],"output":{"generics":["propertyvalues"],"name":"option"}}],[5,"canonical_property_value","","Find the canonical property value for the given normalized property value.",null,{"inputs":[{"name":"propertyvalues"},{"name":"str"}],"output":{"generics":["str"],"name":"option"}}],[6,"PropertyTable","","The type of a property name table.",null,null],[6,"PropertyValueTable","","Type of a property value table.",null,null],[6,"PropertyValues","","A mapping of property values for a specific property.",null,null],[17,"RANGE_HANGUL_SYLLABLE","","A set of ranges that corresponds to the set of all Hangul syllable codepoints.",null,null],[17,"RANGE_IDEOGRAPH","","A set of ranges that corresponds to the set of all ideograph codepoints.",null,null]],"paths":[]};
searchIndex["unicode_xid"] = {"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to Unicode Standard Annex #31 rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is based on.",null,null],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",null,null],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[8,"UnicodeXID"]]};
searchIndex["unreachable"] = {"doc":"unreachable","items":[[5,"unreachable","unreachable","Hint to the optimizer that any code path which calls this function is statically unreachable and can be removed.",null,null],[8,"UncheckedOptionExt","","An extension trait for `Option<T>` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap","","Get the value out of this Option without checking for None.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"unchecked_unwrap_none","","Assert that this Option is a None to the optimizer.",0,{"inputs":[{"name":"self"}],"output":null}],[8,"UncheckedResultExt","","An extension trait for `Result<T, E>` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap_ok","","Get the value out of this Result without checking for Err.",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"unchecked_unwrap_err","","Get the error out of this Result without checking for Ok.",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}]],"paths":[[8,"UncheckedOptionExt"],[8,"UncheckedResultExt"]]};
searchIndex["utf8_ranges"] = {"doc":"Crate `utf8-ranges` converts ranges of Unicode scalar values to equivalent ranges of UTF-8 bytes. This is useful for constructing byte based automatons that need to embed UTF-8 decoding.","items":[[3,"Utf8Range","utf8_ranges","A single inclusive range of UTF-8 bytes.",null,null],[12,"start","","Start of byte range (inclusive).",0,null],[12,"end","","End of byte range (inclusive).",0,null],[3,"Utf8Sequences","","An iterator over ranges of matching UTF-8 byte sequences.",null,null],[4,"Utf8Sequence","","Utf8Sequence represents a sequence of byte ranges.",null,null],[13,"One","","One byte range.",1,null],[13,"Two","","Two successive byte ranges.",1,null],[13,"Three","","Three successive byte ranges.",1,null],[13,"Four","","Four successive byte ranges.",1,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utf8sequence"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"utf8sequence"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"utf8sequence"}],"output":{"name":"bool"}}],[11,"as_slice","","Returns the underlying sequence of byte ranges as a slice.",1,null],[11,"len","","Returns the number of byte ranges in this sequence.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"matches","","Returns true if and only if a prefix of `bytes` matches this sequence of byte ranges.",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"utf8range"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"utf8range"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"utf8range"}],"output":{"name":"bool"}}],[11,"matches","","Returns true if and only if the given byte is in this range.",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new iterator over UTF-8 byte ranges for the scalar value range given.",2,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"self"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Utf8Range"],[4,"Utf8Sequence"],[3,"Utf8Sequences"]]};
searchIndex["void"] = {"doc":"Void","items":[[4,"Void","void","The empty type for cases which can't occur.",null,null],[5,"unreachable","","A safe version of `intrinsincs::unreachable`.",null,null],[8,"ResultVoidExt","","Extensions to `Result<T, Void>`",null,null],[10,"void_unwrap","","Get the value out of a wrapper.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"ResultVoidErrExt","","Extensions to `Result<Void, E>`",null,null],[10,"void_unwrap_err","","Get the error out of a wrapper.",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"void"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["ordering"],"name":"option"}}]],"paths":[[8,"ResultVoidExt"],[8,"ResultVoidErrExt"],[4,"Void"]]};
initSearch(searchIndex);
