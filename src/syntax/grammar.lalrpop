use syntax::ast::{Expr, Atom, BinaryOp, FunctionCall};

grammar;

pub Expr: Expr = {
    <l:Expr> "+" <r:Factor> => BinaryOp::add(l, r).into(),
    <l:Expr> "-" <r:Factor> => BinaryOp::sub(l, r).into(),
    Factor,
};

Factor: Expr = {
    <l:Factor> "*" <r:Term> => BinaryOp::mult(l, r).into(),
    <l:Factor> "/" <r:Term> => BinaryOp::div(l, r).into(),
    Term,
};

Term: Expr = {
    "(" <e:Expr> ")" => e,
    Atom => Expr::Atom(<>),
    <f:FunctionCall> => f.into(),
};

pub FunctionCall: FunctionCall = {
    <i:ident> "(" <a:CommaSeparated<Expr>> ")" => FunctionCall::new(i, a),
};

CommaSeparated<T>: Vec<T> = { 
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

pub Atom: Atom = {
    num => Atom::Number(<>),
    ident => Atom::Ident(<>),
};

num: f64 = {
    <s:r"[0-9]+(\.[0-9]+)?"> => s.parse().unwrap(),
};

ident: String = {
    <i:r"[a-zA-Z][a-zA-Z0-9_-]*"> => i.to_string(),
};
